/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetArtistSingle_200_response_songs_inner_originSongSimpleData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::MDGetArtistSingle_200_response_songs_inner_originSongSimpleData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::MDGetArtistSingle_200_response_songs_inner_originSongSimpleData() {
    this->initializeModel();
}

MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::~MDGetArtistSingle_200_response_songs_inner_originSongSimpleData() {}

void MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::initializeModel() {

    m_song_id_isSet = false;
    m_song_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_album_meta_isSet = false;
    m_album_meta_isValid = false;
}

void MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::fromJsonObject(QJsonObject json) {

    m_song_id_isValid = ::MelodixAPI::fromJsonValue(m_song_id, json[QString("songId")]);
    m_song_id_isSet = !json[QString("songId")].isNull() && m_song_id_isValid;

    m_name_isValid = ::MelodixAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_artists_isValid = ::MelodixAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_album_meta_isValid = ::MelodixAPI::fromJsonValue(m_album_meta, json[QString("albumMeta")]);
    m_album_meta_isSet = !json[QString("albumMeta")].isNull() && m_album_meta_isValid;
}

QString MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::asJsonObject() const {
    QJsonObject obj;
    if (m_song_id_isSet) {
        obj.insert(QString("songId"), ::MelodixAPI::toJsonValue(m_song_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::MelodixAPI::toJsonValue(m_name));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::MelodixAPI::toJsonValue(m_artists));
    }
    if (m_album_meta.isSet()) {
        obj.insert(QString("albumMeta"), ::MelodixAPI::toJsonValue(m_album_meta));
    }
    return obj;
}

qint32 MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::getSongId() const {
    return m_song_id;
}
void MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::setSongId(const qint32 &song_id) {
    m_song_id = song_id;
    m_song_id_isSet = true;
}

bool MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::is_song_id_Set() const{
    return m_song_id_isSet;
}

bool MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::is_song_id_Valid() const{
    return m_song_id_isValid;
}

QString MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::getName() const {
    return m_name;
}
void MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::is_name_Set() const{
    return m_name_isSet;
}

bool MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::is_name_Valid() const{
    return m_name_isValid;
}

QList<MDGetArtistSingle_200_response_songs_inner_originSongSimpleData_artists_inner> MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::getArtists() const {
    return m_artists;
}
void MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::setArtists(const QList<MDGetArtistSingle_200_response_songs_inner_originSongSimpleData_artists_inner> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::is_artists_Set() const{
    return m_artists_isSet;
}

bool MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::is_artists_Valid() const{
    return m_artists_isValid;
}

MDGetArtistSingle_200_response_songs_inner_originSongSimpleData_albumMeta MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::getAlbumMeta() const {
    return m_album_meta;
}
void MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::setAlbumMeta(const MDGetArtistSingle_200_response_songs_inner_originSongSimpleData_albumMeta &album_meta) {
    m_album_meta = album_meta;
    m_album_meta_isSet = true;
}

bool MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::is_album_meta_Set() const{
    return m_album_meta_isSet;
}

bool MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::is_album_meta_Valid() const{
    return m_album_meta_isValid;
}

bool MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_song_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetArtistSingle_200_response_songs_inner_originSongSimpleData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_song_id_isValid && m_name_isValid && m_artists_isValid && m_album_meta_isValid && true;
}

} // namespace MelodixAPI
