/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetRecommendedMv_200_response_result_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetRecommendedMv_200_response_result_inner::MDGetRecommendedMv_200_response_result_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetRecommendedMv_200_response_result_inner::MDGetRecommendedMv_200_response_result_inner() {
    this->initializeModel();
}

MDGetRecommendedMv_200_response_result_inner::~MDGetRecommendedMv_200_response_result_inner() {}

void MDGetRecommendedMv_200_response_result_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_copywriter_isSet = false;
    m_copywriter_isValid = false;

    m_pic_url_isSet = false;
    m_pic_url_isValid = false;

    m_can_dislike_isSet = false;
    m_can_dislike_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_play_count_isSet = false;
    m_play_count_isValid = false;

    m_subed_isSet = false;
    m_subed_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_artist_name_isSet = false;
    m_artist_name_isValid = false;

    m_artist_id_isSet = false;
    m_artist_id_isValid = false;

    m_alg_isSet = false;
    m_alg_isValid = false;
}

void MDGetRecommendedMv_200_response_result_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetRecommendedMv_200_response_result_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::MelodixAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_name_isValid = ::MelodixAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_copywriter_isValid = ::MelodixAPI::fromJsonValue(m_copywriter, json[QString("copywriter")]);
    m_copywriter_isSet = !json[QString("copywriter")].isNull() && m_copywriter_isValid;

    m_pic_url_isValid = ::MelodixAPI::fromJsonValue(m_pic_url, json[QString("picUrl")]);
    m_pic_url_isSet = !json[QString("picUrl")].isNull() && m_pic_url_isValid;

    m_can_dislike_isValid = ::MelodixAPI::fromJsonValue(m_can_dislike, json[QString("canDislike")]);
    m_can_dislike_isSet = !json[QString("canDislike")].isNull() && m_can_dislike_isValid;

    m_duration_isValid = ::MelodixAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_play_count_isValid = ::MelodixAPI::fromJsonValue(m_play_count, json[QString("playCount")]);
    m_play_count_isSet = !json[QString("playCount")].isNull() && m_play_count_isValid;

    m_subed_isValid = ::MelodixAPI::fromJsonValue(m_subed, json[QString("subed")]);
    m_subed_isSet = !json[QString("subed")].isNull() && m_subed_isValid;

    m_artists_isValid = ::MelodixAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_artist_name_isValid = ::MelodixAPI::fromJsonValue(m_artist_name, json[QString("artistName")]);
    m_artist_name_isSet = !json[QString("artistName")].isNull() && m_artist_name_isValid;

    m_artist_id_isValid = ::MelodixAPI::fromJsonValue(m_artist_id, json[QString("artistId")]);
    m_artist_id_isSet = !json[QString("artistId")].isNull() && m_artist_id_isValid;

    m_alg_isValid = ::MelodixAPI::fromJsonValue(m_alg, json[QString("alg")]);
    m_alg_isSet = !json[QString("alg")].isNull() && m_alg_isValid;
}

QString MDGetRecommendedMv_200_response_result_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetRecommendedMv_200_response_result_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::MelodixAPI::toJsonValue(m_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::MelodixAPI::toJsonValue(m_name));
    }
    if (m_copywriter_isSet) {
        obj.insert(QString("copywriter"), ::MelodixAPI::toJsonValue(m_copywriter));
    }
    if (m_pic_url_isSet) {
        obj.insert(QString("picUrl"), ::MelodixAPI::toJsonValue(m_pic_url));
    }
    if (m_can_dislike_isSet) {
        obj.insert(QString("canDislike"), ::MelodixAPI::toJsonValue(m_can_dislike));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::MelodixAPI::toJsonValue(m_duration));
    }
    if (m_play_count_isSet) {
        obj.insert(QString("playCount"), ::MelodixAPI::toJsonValue(m_play_count));
    }
    if (m_subed_isSet) {
        obj.insert(QString("subed"), ::MelodixAPI::toJsonValue(m_subed));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::MelodixAPI::toJsonValue(m_artists));
    }
    if (m_artist_name_isSet) {
        obj.insert(QString("artistName"), ::MelodixAPI::toJsonValue(m_artist_name));
    }
    if (m_artist_id_isSet) {
        obj.insert(QString("artistId"), ::MelodixAPI::toJsonValue(m_artist_id));
    }
    if (m_alg_isSet) {
        obj.insert(QString("alg"), ::MelodixAPI::toJsonValue(m_alg));
    }
    return obj;
}

qint32 MDGetRecommendedMv_200_response_result_inner::getId() const {
    return m_id;
}
void MDGetRecommendedMv_200_response_result_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetRecommendedMv_200_response_result_inner::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetRecommendedMv_200_response_result_inner::is_id_Valid() const{
    return m_id_isValid;
}

qint32 MDGetRecommendedMv_200_response_result_inner::getType() const {
    return m_type;
}
void MDGetRecommendedMv_200_response_result_inner::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool MDGetRecommendedMv_200_response_result_inner::is_type_Set() const{
    return m_type_isSet;
}

bool MDGetRecommendedMv_200_response_result_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString MDGetRecommendedMv_200_response_result_inner::getName() const {
    return m_name;
}
void MDGetRecommendedMv_200_response_result_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool MDGetRecommendedMv_200_response_result_inner::is_name_Set() const{
    return m_name_isSet;
}

bool MDGetRecommendedMv_200_response_result_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString MDGetRecommendedMv_200_response_result_inner::getCopywriter() const {
    return m_copywriter;
}
void MDGetRecommendedMv_200_response_result_inner::setCopywriter(const QString &copywriter) {
    m_copywriter = copywriter;
    m_copywriter_isSet = true;
}

bool MDGetRecommendedMv_200_response_result_inner::is_copywriter_Set() const{
    return m_copywriter_isSet;
}

bool MDGetRecommendedMv_200_response_result_inner::is_copywriter_Valid() const{
    return m_copywriter_isValid;
}

QString MDGetRecommendedMv_200_response_result_inner::getPicUrl() const {
    return m_pic_url;
}
void MDGetRecommendedMv_200_response_result_inner::setPicUrl(const QString &pic_url) {
    m_pic_url = pic_url;
    m_pic_url_isSet = true;
}

bool MDGetRecommendedMv_200_response_result_inner::is_pic_url_Set() const{
    return m_pic_url_isSet;
}

bool MDGetRecommendedMv_200_response_result_inner::is_pic_url_Valid() const{
    return m_pic_url_isValid;
}

bool MDGetRecommendedMv_200_response_result_inner::isCanDislike() const {
    return m_can_dislike;
}
void MDGetRecommendedMv_200_response_result_inner::setCanDislike(const bool &can_dislike) {
    m_can_dislike = can_dislike;
    m_can_dislike_isSet = true;
}

bool MDGetRecommendedMv_200_response_result_inner::is_can_dislike_Set() const{
    return m_can_dislike_isSet;
}

bool MDGetRecommendedMv_200_response_result_inner::is_can_dislike_Valid() const{
    return m_can_dislike_isValid;
}

qint32 MDGetRecommendedMv_200_response_result_inner::getDuration() const {
    return m_duration;
}
void MDGetRecommendedMv_200_response_result_inner::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool MDGetRecommendedMv_200_response_result_inner::is_duration_Set() const{
    return m_duration_isSet;
}

bool MDGetRecommendedMv_200_response_result_inner::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 MDGetRecommendedMv_200_response_result_inner::getPlayCount() const {
    return m_play_count;
}
void MDGetRecommendedMv_200_response_result_inner::setPlayCount(const qint32 &play_count) {
    m_play_count = play_count;
    m_play_count_isSet = true;
}

bool MDGetRecommendedMv_200_response_result_inner::is_play_count_Set() const{
    return m_play_count_isSet;
}

bool MDGetRecommendedMv_200_response_result_inner::is_play_count_Valid() const{
    return m_play_count_isValid;
}

bool MDGetRecommendedMv_200_response_result_inner::isSubed() const {
    return m_subed;
}
void MDGetRecommendedMv_200_response_result_inner::setSubed(const bool &subed) {
    m_subed = subed;
    m_subed_isSet = true;
}

bool MDGetRecommendedMv_200_response_result_inner::is_subed_Set() const{
    return m_subed_isSet;
}

bool MDGetRecommendedMv_200_response_result_inner::is_subed_Valid() const{
    return m_subed_isValid;
}

QList<MDGetArtistSingle_200_response_songs_inner_originSongSimpleData_albumMeta> MDGetRecommendedMv_200_response_result_inner::getArtists() const {
    return m_artists;
}
void MDGetRecommendedMv_200_response_result_inner::setArtists(const QList<MDGetArtistSingle_200_response_songs_inner_originSongSimpleData_albumMeta> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool MDGetRecommendedMv_200_response_result_inner::is_artists_Set() const{
    return m_artists_isSet;
}

bool MDGetRecommendedMv_200_response_result_inner::is_artists_Valid() const{
    return m_artists_isValid;
}

QString MDGetRecommendedMv_200_response_result_inner::getArtistName() const {
    return m_artist_name;
}
void MDGetRecommendedMv_200_response_result_inner::setArtistName(const QString &artist_name) {
    m_artist_name = artist_name;
    m_artist_name_isSet = true;
}

bool MDGetRecommendedMv_200_response_result_inner::is_artist_name_Set() const{
    return m_artist_name_isSet;
}

bool MDGetRecommendedMv_200_response_result_inner::is_artist_name_Valid() const{
    return m_artist_name_isValid;
}

qint32 MDGetRecommendedMv_200_response_result_inner::getArtistId() const {
    return m_artist_id;
}
void MDGetRecommendedMv_200_response_result_inner::setArtistId(const qint32 &artist_id) {
    m_artist_id = artist_id;
    m_artist_id_isSet = true;
}

bool MDGetRecommendedMv_200_response_result_inner::is_artist_id_Set() const{
    return m_artist_id_isSet;
}

bool MDGetRecommendedMv_200_response_result_inner::is_artist_id_Valid() const{
    return m_artist_id_isValid;
}

QString MDGetRecommendedMv_200_response_result_inner::getAlg() const {
    return m_alg;
}
void MDGetRecommendedMv_200_response_result_inner::setAlg(const QString &alg) {
    m_alg = alg;
    m_alg_isSet = true;
}

bool MDGetRecommendedMv_200_response_result_inner::is_alg_Set() const{
    return m_alg_isSet;
}

bool MDGetRecommendedMv_200_response_result_inner::is_alg_Valid() const{
    return m_alg_isValid;
}

bool MDGetRecommendedMv_200_response_result_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copywriter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pic_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_dislike_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alg_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetRecommendedMv_200_response_result_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_type_isValid && m_name_isValid && m_copywriter_isValid && m_pic_url_isValid && m_can_dislike_isValid && m_duration_isValid && m_play_count_isValid && m_subed_isValid && m_artists_isValid && m_artist_name_isValid && m_artist_id_isValid && m_alg_isValid && true;
}

} // namespace MelodixAPI
