/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetMvDetail_200_response_mp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetMvDetail_200_response_mp::MDGetMvDetail_200_response_mp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetMvDetail_200_response_mp::MDGetMvDetail_200_response_mp() {
    this->initializeModel();
}

MDGetMvDetail_200_response_mp::~MDGetMvDetail_200_response_mp() {}

void MDGetMvDetail_200_response_mp::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_fee_isSet = false;
    m_fee_isValid = false;

    m_mv_fee_isSet = false;
    m_mv_fee_isValid = false;

    m_payed_isSet = false;
    m_payed_isValid = false;

    m_pl_isSet = false;
    m_pl_isValid = false;

    m_dl_isSet = false;
    m_dl_isValid = false;

    m_cp_isSet = false;
    m_cp_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_st_isSet = false;
    m_st_isValid = false;

    m_normal_isSet = false;
    m_normal_isValid = false;

    m_unauthorized_isSet = false;
    m_unauthorized_isValid = false;
}

void MDGetMvDetail_200_response_mp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetMvDetail_200_response_mp::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_fee_isValid = ::MelodixAPI::fromJsonValue(m_fee, json[QString("fee")]);
    m_fee_isSet = !json[QString("fee")].isNull() && m_fee_isValid;

    m_mv_fee_isValid = ::MelodixAPI::fromJsonValue(m_mv_fee, json[QString("mvFee")]);
    m_mv_fee_isSet = !json[QString("mvFee")].isNull() && m_mv_fee_isValid;

    m_payed_isValid = ::MelodixAPI::fromJsonValue(m_payed, json[QString("payed")]);
    m_payed_isSet = !json[QString("payed")].isNull() && m_payed_isValid;

    m_pl_isValid = ::MelodixAPI::fromJsonValue(m_pl, json[QString("pl")]);
    m_pl_isSet = !json[QString("pl")].isNull() && m_pl_isValid;

    m_dl_isValid = ::MelodixAPI::fromJsonValue(m_dl, json[QString("dl")]);
    m_dl_isSet = !json[QString("dl")].isNull() && m_dl_isValid;

    m_cp_isValid = ::MelodixAPI::fromJsonValue(m_cp, json[QString("cp")]);
    m_cp_isSet = !json[QString("cp")].isNull() && m_cp_isValid;

    m_sid_isValid = ::MelodixAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_st_isValid = ::MelodixAPI::fromJsonValue(m_st, json[QString("st")]);
    m_st_isSet = !json[QString("st")].isNull() && m_st_isValid;

    m_normal_isValid = ::MelodixAPI::fromJsonValue(m_normal, json[QString("normal")]);
    m_normal_isSet = !json[QString("normal")].isNull() && m_normal_isValid;

    m_unauthorized_isValid = ::MelodixAPI::fromJsonValue(m_unauthorized, json[QString("unauthorized")]);
    m_unauthorized_isSet = !json[QString("unauthorized")].isNull() && m_unauthorized_isValid;
}

QString MDGetMvDetail_200_response_mp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetMvDetail_200_response_mp::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_fee_isSet) {
        obj.insert(QString("fee"), ::MelodixAPI::toJsonValue(m_fee));
    }
    if (m_mv_fee_isSet) {
        obj.insert(QString("mvFee"), ::MelodixAPI::toJsonValue(m_mv_fee));
    }
    if (m_payed_isSet) {
        obj.insert(QString("payed"), ::MelodixAPI::toJsonValue(m_payed));
    }
    if (m_pl_isSet) {
        obj.insert(QString("pl"), ::MelodixAPI::toJsonValue(m_pl));
    }
    if (m_dl_isSet) {
        obj.insert(QString("dl"), ::MelodixAPI::toJsonValue(m_dl));
    }
    if (m_cp_isSet) {
        obj.insert(QString("cp"), ::MelodixAPI::toJsonValue(m_cp));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::MelodixAPI::toJsonValue(m_sid));
    }
    if (m_st_isSet) {
        obj.insert(QString("st"), ::MelodixAPI::toJsonValue(m_st));
    }
    if (m_normal_isSet) {
        obj.insert(QString("normal"), ::MelodixAPI::toJsonValue(m_normal));
    }
    if (m_unauthorized_isSet) {
        obj.insert(QString("unauthorized"), ::MelodixAPI::toJsonValue(m_unauthorized));
    }
    return obj;
}

qint32 MDGetMvDetail_200_response_mp::getId() const {
    return m_id;
}
void MDGetMvDetail_200_response_mp::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetMvDetail_200_response_mp::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetMvDetail_200_response_mp::is_id_Valid() const{
    return m_id_isValid;
}

qint32 MDGetMvDetail_200_response_mp::getFee() const {
    return m_fee;
}
void MDGetMvDetail_200_response_mp::setFee(const qint32 &fee) {
    m_fee = fee;
    m_fee_isSet = true;
}

bool MDGetMvDetail_200_response_mp::is_fee_Set() const{
    return m_fee_isSet;
}

bool MDGetMvDetail_200_response_mp::is_fee_Valid() const{
    return m_fee_isValid;
}

qint32 MDGetMvDetail_200_response_mp::getMvFee() const {
    return m_mv_fee;
}
void MDGetMvDetail_200_response_mp::setMvFee(const qint32 &mv_fee) {
    m_mv_fee = mv_fee;
    m_mv_fee_isSet = true;
}

bool MDGetMvDetail_200_response_mp::is_mv_fee_Set() const{
    return m_mv_fee_isSet;
}

bool MDGetMvDetail_200_response_mp::is_mv_fee_Valid() const{
    return m_mv_fee_isValid;
}

qint32 MDGetMvDetail_200_response_mp::getPayed() const {
    return m_payed;
}
void MDGetMvDetail_200_response_mp::setPayed(const qint32 &payed) {
    m_payed = payed;
    m_payed_isSet = true;
}

bool MDGetMvDetail_200_response_mp::is_payed_Set() const{
    return m_payed_isSet;
}

bool MDGetMvDetail_200_response_mp::is_payed_Valid() const{
    return m_payed_isValid;
}

qint32 MDGetMvDetail_200_response_mp::getPl() const {
    return m_pl;
}
void MDGetMvDetail_200_response_mp::setPl(const qint32 &pl) {
    m_pl = pl;
    m_pl_isSet = true;
}

bool MDGetMvDetail_200_response_mp::is_pl_Set() const{
    return m_pl_isSet;
}

bool MDGetMvDetail_200_response_mp::is_pl_Valid() const{
    return m_pl_isValid;
}

qint32 MDGetMvDetail_200_response_mp::getDl() const {
    return m_dl;
}
void MDGetMvDetail_200_response_mp::setDl(const qint32 &dl) {
    m_dl = dl;
    m_dl_isSet = true;
}

bool MDGetMvDetail_200_response_mp::is_dl_Set() const{
    return m_dl_isSet;
}

bool MDGetMvDetail_200_response_mp::is_dl_Valid() const{
    return m_dl_isValid;
}

qint32 MDGetMvDetail_200_response_mp::getCp() const {
    return m_cp;
}
void MDGetMvDetail_200_response_mp::setCp(const qint32 &cp) {
    m_cp = cp;
    m_cp_isSet = true;
}

bool MDGetMvDetail_200_response_mp::is_cp_Set() const{
    return m_cp_isSet;
}

bool MDGetMvDetail_200_response_mp::is_cp_Valid() const{
    return m_cp_isValid;
}

qint32 MDGetMvDetail_200_response_mp::getSid() const {
    return m_sid;
}
void MDGetMvDetail_200_response_mp::setSid(const qint32 &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool MDGetMvDetail_200_response_mp::is_sid_Set() const{
    return m_sid_isSet;
}

bool MDGetMvDetail_200_response_mp::is_sid_Valid() const{
    return m_sid_isValid;
}

qint32 MDGetMvDetail_200_response_mp::getSt() const {
    return m_st;
}
void MDGetMvDetail_200_response_mp::setSt(const qint32 &st) {
    m_st = st;
    m_st_isSet = true;
}

bool MDGetMvDetail_200_response_mp::is_st_Set() const{
    return m_st_isSet;
}

bool MDGetMvDetail_200_response_mp::is_st_Valid() const{
    return m_st_isValid;
}

bool MDGetMvDetail_200_response_mp::isNormal() const {
    return m_normal;
}
void MDGetMvDetail_200_response_mp::setNormal(const bool &normal) {
    m_normal = normal;
    m_normal_isSet = true;
}

bool MDGetMvDetail_200_response_mp::is_normal_Set() const{
    return m_normal_isSet;
}

bool MDGetMvDetail_200_response_mp::is_normal_Valid() const{
    return m_normal_isValid;
}

bool MDGetMvDetail_200_response_mp::isUnauthorized() const {
    return m_unauthorized;
}
void MDGetMvDetail_200_response_mp::setUnauthorized(const bool &unauthorized) {
    m_unauthorized = unauthorized;
    m_unauthorized_isSet = true;
}

bool MDGetMvDetail_200_response_mp::is_unauthorized_Set() const{
    return m_unauthorized_isSet;
}

bool MDGetMvDetail_200_response_mp::is_unauthorized_Valid() const{
    return m_unauthorized_isValid;
}

bool MDGetMvDetail_200_response_mp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mv_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_st_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unauthorized_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetMvDetail_200_response_mp::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_fee_isValid && m_mv_fee_isValid && m_payed_isValid && m_pl_isValid && m_dl_isValid && m_cp_isValid && m_sid_isValid && m_st_isValid && m_normal_isValid && m_unauthorized_isValid && true;
}

} // namespace MelodixAPI
