/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetArtistDetail_200_response_data_user.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetArtistDetail_200_response_data_user::MDGetArtistDetail_200_response_data_user(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetArtistDetail_200_response_data_user::MDGetArtistDetail_200_response_data_user() {
    this->initializeModel();
}

MDGetArtistDetail_200_response_data_user::~MDGetArtistDetail_200_response_data_user() {}

void MDGetArtistDetail_200_response_data_user::initializeModel() {

    m_background_url_isSet = false;
    m_background_url_isValid = false;

    m_birthday_isSet = false;
    m_birthday_isValid = false;

    m_detail_description_isSet = false;
    m_detail_description_isValid = false;

    m_authenticated_isSet = false;
    m_authenticated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_followed_isSet = false;
    m_followed_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_anchor_isSet = false;
    m_anchor_isValid = false;

    m_background_img_id_isSet = false;
    m_background_img_id_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;
}

void MDGetArtistDetail_200_response_data_user::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetArtistDetail_200_response_data_user::fromJsonObject(QJsonObject json) {

    m_background_url_isValid = ::MelodixAPI::fromJsonValue(m_background_url, json[QString("backgroundUrl")]);
    m_background_url_isSet = !json[QString("backgroundUrl")].isNull() && m_background_url_isValid;

    m_birthday_isValid = ::MelodixAPI::fromJsonValue(m_birthday, json[QString("birthday")]);
    m_birthday_isSet = !json[QString("birthday")].isNull() && m_birthday_isValid;

    m_detail_description_isValid = ::MelodixAPI::fromJsonValue(m_detail_description, json[QString("detailDescription")]);
    m_detail_description_isSet = !json[QString("detailDescription")].isNull() && m_detail_description_isValid;

    m_authenticated_isValid = ::MelodixAPI::fromJsonValue(m_authenticated, json[QString("authenticated")]);
    m_authenticated_isSet = !json[QString("authenticated")].isNull() && m_authenticated_isValid;

    m_description_isValid = ::MelodixAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_nickname_isValid = ::MelodixAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_avatar_url_isValid = ::MelodixAPI::fromJsonValue(m_avatar_url, json[QString("avatarUrl")]);
    m_avatar_url_isSet = !json[QString("avatarUrl")].isNull() && m_avatar_url_isValid;

    m_account_type_isValid = ::MelodixAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_user_name_isValid = ::MelodixAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;

    m_followed_isValid = ::MelodixAPI::fromJsonValue(m_followed, json[QString("followed")]);
    m_followed_isSet = !json[QString("followed")].isNull() && m_followed_isValid;

    m_user_id_isValid = ::MelodixAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_create_time_isValid = ::MelodixAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_anchor_isValid = ::MelodixAPI::fromJsonValue(m_anchor, json[QString("anchor")]);
    m_anchor_isSet = !json[QString("anchor")].isNull() && m_anchor_isValid;

    m_background_img_id_isValid = ::MelodixAPI::fromJsonValue(m_background_img_id, json[QString("backgroundImgId")]);
    m_background_img_id_isSet = !json[QString("backgroundImgId")].isNull() && m_background_img_id_isValid;

    m_user_type_isValid = ::MelodixAPI::fromJsonValue(m_user_type, json[QString("userType")]);
    m_user_type_isSet = !json[QString("userType")].isNull() && m_user_type_isValid;
}

QString MDGetArtistDetail_200_response_data_user::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetArtistDetail_200_response_data_user::asJsonObject() const {
    QJsonObject obj;
    if (m_background_url_isSet) {
        obj.insert(QString("backgroundUrl"), ::MelodixAPI::toJsonValue(m_background_url));
    }
    if (m_birthday_isSet) {
        obj.insert(QString("birthday"), ::MelodixAPI::toJsonValue(m_birthday));
    }
    if (m_detail_description_isSet) {
        obj.insert(QString("detailDescription"), ::MelodixAPI::toJsonValue(m_detail_description));
    }
    if (m_authenticated_isSet) {
        obj.insert(QString("authenticated"), ::MelodixAPI::toJsonValue(m_authenticated));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::MelodixAPI::toJsonValue(m_description));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::MelodixAPI::toJsonValue(m_nickname));
    }
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatarUrl"), ::MelodixAPI::toJsonValue(m_avatar_url));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::MelodixAPI::toJsonValue(m_account_type));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::MelodixAPI::toJsonValue(m_user_name));
    }
    if (m_followed_isSet) {
        obj.insert(QString("followed"), ::MelodixAPI::toJsonValue(m_followed));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::MelodixAPI::toJsonValue(m_user_id));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::MelodixAPI::toJsonValue(m_create_time));
    }
    if (m_anchor_isSet) {
        obj.insert(QString("anchor"), ::MelodixAPI::toJsonValue(m_anchor));
    }
    if (m_background_img_id_isSet) {
        obj.insert(QString("backgroundImgId"), ::MelodixAPI::toJsonValue(m_background_img_id));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("userType"), ::MelodixAPI::toJsonValue(m_user_type));
    }
    return obj;
}

QString MDGetArtistDetail_200_response_data_user::getBackgroundUrl() const {
    return m_background_url;
}
void MDGetArtistDetail_200_response_data_user::setBackgroundUrl(const QString &background_url) {
    m_background_url = background_url;
    m_background_url_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_background_url_Set() const{
    return m_background_url_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_background_url_Valid() const{
    return m_background_url_isValid;
}

qint32 MDGetArtistDetail_200_response_data_user::getBirthday() const {
    return m_birthday;
}
void MDGetArtistDetail_200_response_data_user::setBirthday(const qint32 &birthday) {
    m_birthday = birthday;
    m_birthday_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_birthday_Set() const{
    return m_birthday_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_birthday_Valid() const{
    return m_birthday_isValid;
}

QString MDGetArtistDetail_200_response_data_user::getDetailDescription() const {
    return m_detail_description;
}
void MDGetArtistDetail_200_response_data_user::setDetailDescription(const QString &detail_description) {
    m_detail_description = detail_description;
    m_detail_description_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_detail_description_Set() const{
    return m_detail_description_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_detail_description_Valid() const{
    return m_detail_description_isValid;
}

bool MDGetArtistDetail_200_response_data_user::isAuthenticated() const {
    return m_authenticated;
}
void MDGetArtistDetail_200_response_data_user::setAuthenticated(const bool &authenticated) {
    m_authenticated = authenticated;
    m_authenticated_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_authenticated_Set() const{
    return m_authenticated_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_authenticated_Valid() const{
    return m_authenticated_isValid;
}

QString MDGetArtistDetail_200_response_data_user::getDescription() const {
    return m_description;
}
void MDGetArtistDetail_200_response_data_user::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_description_Set() const{
    return m_description_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_description_Valid() const{
    return m_description_isValid;
}

QString MDGetArtistDetail_200_response_data_user::getNickname() const {
    return m_nickname;
}
void MDGetArtistDetail_200_response_data_user::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString MDGetArtistDetail_200_response_data_user::getAvatarUrl() const {
    return m_avatar_url;
}
void MDGetArtistDetail_200_response_data_user::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

qint32 MDGetArtistDetail_200_response_data_user::getAccountType() const {
    return m_account_type;
}
void MDGetArtistDetail_200_response_data_user::setAccountType(const qint32 &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString MDGetArtistDetail_200_response_data_user::getUserName() const {
    return m_user_name;
}
void MDGetArtistDetail_200_response_data_user::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool MDGetArtistDetail_200_response_data_user::isFollowed() const {
    return m_followed;
}
void MDGetArtistDetail_200_response_data_user::setFollowed(const bool &followed) {
    m_followed = followed;
    m_followed_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_followed_Set() const{
    return m_followed_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_followed_Valid() const{
    return m_followed_isValid;
}

qint32 MDGetArtistDetail_200_response_data_user::getUserId() const {
    return m_user_id;
}
void MDGetArtistDetail_200_response_data_user::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_user_id_Valid() const{
    return m_user_id_isValid;
}

qint32 MDGetArtistDetail_200_response_data_user::getCreateTime() const {
    return m_create_time;
}
void MDGetArtistDetail_200_response_data_user::setCreateTime(const qint32 &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_create_time_Valid() const{
    return m_create_time_isValid;
}

bool MDGetArtistDetail_200_response_data_user::isAnchor() const {
    return m_anchor;
}
void MDGetArtistDetail_200_response_data_user::setAnchor(const bool &anchor) {
    m_anchor = anchor;
    m_anchor_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_anchor_Set() const{
    return m_anchor_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_anchor_Valid() const{
    return m_anchor_isValid;
}

qint32 MDGetArtistDetail_200_response_data_user::getBackgroundImgId() const {
    return m_background_img_id;
}
void MDGetArtistDetail_200_response_data_user::setBackgroundImgId(const qint32 &background_img_id) {
    m_background_img_id = background_img_id;
    m_background_img_id_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_background_img_id_Set() const{
    return m_background_img_id_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_background_img_id_Valid() const{
    return m_background_img_id_isValid;
}

qint32 MDGetArtistDetail_200_response_data_user::getUserType() const {
    return m_user_type;
}
void MDGetArtistDetail_200_response_data_user::setUserType(const qint32 &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool MDGetArtistDetail_200_response_data_user::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool MDGetArtistDetail_200_response_data_user::is_user_type_Valid() const{
    return m_user_type_isValid;
}

bool MDGetArtistDetail_200_response_data_user::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authenticated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_followed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anchor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_img_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetArtistDetail_200_response_data_user::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_background_url_isValid && m_birthday_isValid && m_detail_description_isValid && m_authenticated_isValid && m_description_isValid && m_nickname_isValid && m_avatar_url_isValid && m_account_type_isValid && m_user_name_isValid && m_followed_isValid && m_user_id_isValid && m_create_time_isValid && m_anchor_isValid && m_background_img_id_isValid && m_user_type_isValid && true;
}

} // namespace MelodixAPI
