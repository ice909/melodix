/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetHotComment_200_response_hotComments_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetHotComment_200_response_hotComments_inner::MDGetHotComment_200_response_hotComments_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetHotComment_200_response_hotComments_inner::MDGetHotComment_200_response_hotComments_inner() {
    this->initializeModel();
}

MDGetHotComment_200_response_hotComments_inner::~MDGetHotComment_200_response_hotComments_inner() {}

void MDGetHotComment_200_response_hotComments_inner::initializeModel() {

    m_user_isSet = false;
    m_user_isValid = false;

    m_be_replied_isSet = false;
    m_be_replied_isValid = false;

    m_pendant_data_isSet = false;
    m_pendant_data_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_comment_id_isSet = false;
    m_comment_id_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_time_str_isSet = false;
    m_time_str_isValid = false;

    m_need_display_time_isSet = false;
    m_need_display_time_isValid = false;

    m_liked_count_isSet = false;
    m_liked_count_isValid = false;

    m_comment_location_type_isSet = false;
    m_comment_location_type_isValid = false;

    m_parent_comment_id_isSet = false;
    m_parent_comment_id_isValid = false;

    m_decoration_isSet = false;
    m_decoration_isValid = false;

    m_ip_location_isSet = false;
    m_ip_location_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_liked_isSet = false;
    m_liked_isValid = false;
}

void MDGetHotComment_200_response_hotComments_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetHotComment_200_response_hotComments_inner::fromJsonObject(QJsonObject json) {

    m_user_isValid = ::MelodixAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_be_replied_isValid = ::MelodixAPI::fromJsonValue(m_be_replied, json[QString("beReplied")]);
    m_be_replied_isSet = !json[QString("beReplied")].isNull() && m_be_replied_isValid;

    m_pendant_data_isValid = ::MelodixAPI::fromJsonValue(m_pendant_data, json[QString("pendantData")]);
    m_pendant_data_isSet = !json[QString("pendantData")].isNull() && m_pendant_data_isValid;

    m_status_isValid = ::MelodixAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_comment_id_isValid = ::MelodixAPI::fromJsonValue(m_comment_id, json[QString("commentId")]);
    m_comment_id_isSet = !json[QString("commentId")].isNull() && m_comment_id_isValid;

    m_content_isValid = ::MelodixAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_time_isValid = ::MelodixAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_time_str_isValid = ::MelodixAPI::fromJsonValue(m_time_str, json[QString("timeStr")]);
    m_time_str_isSet = !json[QString("timeStr")].isNull() && m_time_str_isValid;

    m_need_display_time_isValid = ::MelodixAPI::fromJsonValue(m_need_display_time, json[QString("needDisplayTime")]);
    m_need_display_time_isSet = !json[QString("needDisplayTime")].isNull() && m_need_display_time_isValid;

    m_liked_count_isValid = ::MelodixAPI::fromJsonValue(m_liked_count, json[QString("likedCount")]);
    m_liked_count_isSet = !json[QString("likedCount")].isNull() && m_liked_count_isValid;

    m_comment_location_type_isValid = ::MelodixAPI::fromJsonValue(m_comment_location_type, json[QString("commentLocationType")]);
    m_comment_location_type_isSet = !json[QString("commentLocationType")].isNull() && m_comment_location_type_isValid;

    m_parent_comment_id_isValid = ::MelodixAPI::fromJsonValue(m_parent_comment_id, json[QString("parentCommentId")]);
    m_parent_comment_id_isSet = !json[QString("parentCommentId")].isNull() && m_parent_comment_id_isValid;

    m_decoration_isValid = ::MelodixAPI::fromJsonValue(m_decoration, json[QString("decoration")]);
    m_decoration_isSet = !json[QString("decoration")].isNull() && m_decoration_isValid;

    m_ip_location_isValid = ::MelodixAPI::fromJsonValue(m_ip_location, json[QString("ipLocation")]);
    m_ip_location_isSet = !json[QString("ipLocation")].isNull() && m_ip_location_isValid;

    m_owner_isValid = ::MelodixAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_liked_isValid = ::MelodixAPI::fromJsonValue(m_liked, json[QString("liked")]);
    m_liked_isSet = !json[QString("liked")].isNull() && m_liked_isValid;
}

QString MDGetHotComment_200_response_hotComments_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetHotComment_200_response_hotComments_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::MelodixAPI::toJsonValue(m_user));
    }
    if (m_be_replied.size() > 0) {
        obj.insert(QString("beReplied"), ::MelodixAPI::toJsonValue(m_be_replied));
    }
    if (m_pendant_data.isSet()) {
        obj.insert(QString("pendantData"), ::MelodixAPI::toJsonValue(m_pendant_data));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::MelodixAPI::toJsonValue(m_status));
    }
    if (m_comment_id_isSet) {
        obj.insert(QString("commentId"), ::MelodixAPI::toJsonValue(m_comment_id));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::MelodixAPI::toJsonValue(m_content));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::MelodixAPI::toJsonValue(m_time));
    }
    if (m_time_str_isSet) {
        obj.insert(QString("timeStr"), ::MelodixAPI::toJsonValue(m_time_str));
    }
    if (m_need_display_time_isSet) {
        obj.insert(QString("needDisplayTime"), ::MelodixAPI::toJsonValue(m_need_display_time));
    }
    if (m_liked_count_isSet) {
        obj.insert(QString("likedCount"), ::MelodixAPI::toJsonValue(m_liked_count));
    }
    if (m_comment_location_type_isSet) {
        obj.insert(QString("commentLocationType"), ::MelodixAPI::toJsonValue(m_comment_location_type));
    }
    if (m_parent_comment_id_isSet) {
        obj.insert(QString("parentCommentId"), ::MelodixAPI::toJsonValue(m_parent_comment_id));
    }
    if (m_decoration_isSet) {
        obj.insert(QString("decoration"), ::MelodixAPI::toJsonValue(m_decoration));
    }
    if (m_ip_location.isSet()) {
        obj.insert(QString("ipLocation"), ::MelodixAPI::toJsonValue(m_ip_location));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::MelodixAPI::toJsonValue(m_owner));
    }
    if (m_liked_isSet) {
        obj.insert(QString("liked"), ::MelodixAPI::toJsonValue(m_liked));
    }
    return obj;
}

MDGetHotComment_200_response_hotComments_inner_user MDGetHotComment_200_response_hotComments_inner::getUser() const {
    return m_user;
}
void MDGetHotComment_200_response_hotComments_inner::setUser(const MDGetHotComment_200_response_hotComments_inner_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_user_Set() const{
    return m_user_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_user_Valid() const{
    return m_user_isValid;
}

QList<MDGetHotComment_200_response_hotComments_inner_beReplied_inner> MDGetHotComment_200_response_hotComments_inner::getBeReplied() const {
    return m_be_replied;
}
void MDGetHotComment_200_response_hotComments_inner::setBeReplied(const QList<MDGetHotComment_200_response_hotComments_inner_beReplied_inner> &be_replied) {
    m_be_replied = be_replied;
    m_be_replied_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_be_replied_Set() const{
    return m_be_replied_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_be_replied_Valid() const{
    return m_be_replied_isValid;
}

MDGetHotComment_200_response_hotComments_inner_pendantData MDGetHotComment_200_response_hotComments_inner::getPendantData() const {
    return m_pendant_data;
}
void MDGetHotComment_200_response_hotComments_inner::setPendantData(const MDGetHotComment_200_response_hotComments_inner_pendantData &pendant_data) {
    m_pendant_data = pendant_data;
    m_pendant_data_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_pendant_data_Set() const{
    return m_pendant_data_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_pendant_data_Valid() const{
    return m_pendant_data_isValid;
}

qint32 MDGetHotComment_200_response_hotComments_inner::getStatus() const {
    return m_status;
}
void MDGetHotComment_200_response_hotComments_inner::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_status_Set() const{
    return m_status_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_status_Valid() const{
    return m_status_isValid;
}

qint32 MDGetHotComment_200_response_hotComments_inner::getCommentId() const {
    return m_comment_id;
}
void MDGetHotComment_200_response_hotComments_inner::setCommentId(const qint32 &comment_id) {
    m_comment_id = comment_id;
    m_comment_id_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_comment_id_Set() const{
    return m_comment_id_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_comment_id_Valid() const{
    return m_comment_id_isValid;
}

QString MDGetHotComment_200_response_hotComments_inner::getContent() const {
    return m_content;
}
void MDGetHotComment_200_response_hotComments_inner::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_content_Set() const{
    return m_content_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_content_Valid() const{
    return m_content_isValid;
}

qint32 MDGetHotComment_200_response_hotComments_inner::getTime() const {
    return m_time;
}
void MDGetHotComment_200_response_hotComments_inner::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_time_Set() const{
    return m_time_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_time_Valid() const{
    return m_time_isValid;
}

QString MDGetHotComment_200_response_hotComments_inner::getTimeStr() const {
    return m_time_str;
}
void MDGetHotComment_200_response_hotComments_inner::setTimeStr(const QString &time_str) {
    m_time_str = time_str;
    m_time_str_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_time_str_Set() const{
    return m_time_str_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_time_str_Valid() const{
    return m_time_str_isValid;
}

bool MDGetHotComment_200_response_hotComments_inner::isNeedDisplayTime() const {
    return m_need_display_time;
}
void MDGetHotComment_200_response_hotComments_inner::setNeedDisplayTime(const bool &need_display_time) {
    m_need_display_time = need_display_time;
    m_need_display_time_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_need_display_time_Set() const{
    return m_need_display_time_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_need_display_time_Valid() const{
    return m_need_display_time_isValid;
}

qint32 MDGetHotComment_200_response_hotComments_inner::getLikedCount() const {
    return m_liked_count;
}
void MDGetHotComment_200_response_hotComments_inner::setLikedCount(const qint32 &liked_count) {
    m_liked_count = liked_count;
    m_liked_count_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_liked_count_Set() const{
    return m_liked_count_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_liked_count_Valid() const{
    return m_liked_count_isValid;
}

qint32 MDGetHotComment_200_response_hotComments_inner::getCommentLocationType() const {
    return m_comment_location_type;
}
void MDGetHotComment_200_response_hotComments_inner::setCommentLocationType(const qint32 &comment_location_type) {
    m_comment_location_type = comment_location_type;
    m_comment_location_type_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_comment_location_type_Set() const{
    return m_comment_location_type_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_comment_location_type_Valid() const{
    return m_comment_location_type_isValid;
}

qint32 MDGetHotComment_200_response_hotComments_inner::getParentCommentId() const {
    return m_parent_comment_id;
}
void MDGetHotComment_200_response_hotComments_inner::setParentCommentId(const qint32 &parent_comment_id) {
    m_parent_comment_id = parent_comment_id;
    m_parent_comment_id_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_parent_comment_id_Set() const{
    return m_parent_comment_id_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_parent_comment_id_Valid() const{
    return m_parent_comment_id_isValid;
}

MDObject MDGetHotComment_200_response_hotComments_inner::getDecoration() const {
    return m_decoration;
}
void MDGetHotComment_200_response_hotComments_inner::setDecoration(const MDObject &decoration) {
    m_decoration = decoration;
    m_decoration_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_decoration_Set() const{
    return m_decoration_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_decoration_Valid() const{
    return m_decoration_isValid;
}

MDGetHotComment_200_response_hotComments_inner_beReplied_inner_ipLocation MDGetHotComment_200_response_hotComments_inner::getIpLocation() const {
    return m_ip_location;
}
void MDGetHotComment_200_response_hotComments_inner::setIpLocation(const MDGetHotComment_200_response_hotComments_inner_beReplied_inner_ipLocation &ip_location) {
    m_ip_location = ip_location;
    m_ip_location_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_ip_location_Set() const{
    return m_ip_location_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_ip_location_Valid() const{
    return m_ip_location_isValid;
}

bool MDGetHotComment_200_response_hotComments_inner::isOwner() const {
    return m_owner;
}
void MDGetHotComment_200_response_hotComments_inner::setOwner(const bool &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_owner_Set() const{
    return m_owner_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_owner_Valid() const{
    return m_owner_isValid;
}

bool MDGetHotComment_200_response_hotComments_inner::isLiked() const {
    return m_liked;
}
void MDGetHotComment_200_response_hotComments_inner::setLiked(const bool &liked) {
    m_liked = liked;
    m_liked_isSet = true;
}

bool MDGetHotComment_200_response_hotComments_inner::is_liked_Set() const{
    return m_liked_isSet;
}

bool MDGetHotComment_200_response_hotComments_inner::is_liked_Valid() const{
    return m_liked_isValid;
}

bool MDGetHotComment_200_response_hotComments_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_be_replied.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pendant_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_str_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_need_display_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liked_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_location_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decoration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liked_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetHotComment_200_response_hotComments_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_isValid && m_be_replied_isValid && m_pendant_data_isValid && m_status_isValid && m_comment_id_isValid && m_content_isValid && m_time_isValid && m_time_str_isValid && m_need_display_time_isValid && m_liked_count_isValid && m_comment_location_type_isValid && m_parent_comment_id_isValid && m_decoration_isValid && m_ip_location_isValid && m_owner_isValid && m_liked_isValid && true;
}

} // namespace MelodixAPI
