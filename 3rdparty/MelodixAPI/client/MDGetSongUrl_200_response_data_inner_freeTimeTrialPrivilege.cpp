/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege() {
    this->initializeModel();
}

MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::~MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege() {}

void MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::initializeModel() {

    m_res_consumable_isSet = false;
    m_res_consumable_isValid = false;

    m_user_consumable_isSet = false;
    m_user_consumable_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_remain_time_isSet = false;
    m_remain_time_isValid = false;
}

void MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::fromJsonObject(QJsonObject json) {

    m_res_consumable_isValid = ::MelodixAPI::fromJsonValue(m_res_consumable, json[QString("resConsumable")]);
    m_res_consumable_isSet = !json[QString("resConsumable")].isNull() && m_res_consumable_isValid;

    m_user_consumable_isValid = ::MelodixAPI::fromJsonValue(m_user_consumable, json[QString("userConsumable")]);
    m_user_consumable_isSet = !json[QString("userConsumable")].isNull() && m_user_consumable_isValid;

    m_type_isValid = ::MelodixAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_remain_time_isValid = ::MelodixAPI::fromJsonValue(m_remain_time, json[QString("remainTime")]);
    m_remain_time_isSet = !json[QString("remainTime")].isNull() && m_remain_time_isValid;
}

QString MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::asJsonObject() const {
    QJsonObject obj;
    if (m_res_consumable_isSet) {
        obj.insert(QString("resConsumable"), ::MelodixAPI::toJsonValue(m_res_consumable));
    }
    if (m_user_consumable_isSet) {
        obj.insert(QString("userConsumable"), ::MelodixAPI::toJsonValue(m_user_consumable));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::MelodixAPI::toJsonValue(m_type));
    }
    if (m_remain_time_isSet) {
        obj.insert(QString("remainTime"), ::MelodixAPI::toJsonValue(m_remain_time));
    }
    return obj;
}

bool MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::isResConsumable() const {
    return m_res_consumable;
}
void MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::setResConsumable(const bool &res_consumable) {
    m_res_consumable = res_consumable;
    m_res_consumable_isSet = true;
}

bool MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::is_res_consumable_Set() const{
    return m_res_consumable_isSet;
}

bool MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::is_res_consumable_Valid() const{
    return m_res_consumable_isValid;
}

bool MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::isUserConsumable() const {
    return m_user_consumable;
}
void MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::setUserConsumable(const bool &user_consumable) {
    m_user_consumable = user_consumable;
    m_user_consumable_isSet = true;
}

bool MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::is_user_consumable_Set() const{
    return m_user_consumable_isSet;
}

bool MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::is_user_consumable_Valid() const{
    return m_user_consumable_isValid;
}

qint32 MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::getType() const {
    return m_type;
}
void MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::is_type_Set() const{
    return m_type_isSet;
}

bool MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::is_type_Valid() const{
    return m_type_isValid;
}

qint32 MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::getRemainTime() const {
    return m_remain_time;
}
void MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::setRemainTime(const qint32 &remain_time) {
    m_remain_time = remain_time;
    m_remain_time_isSet = true;
}

bool MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::is_remain_time_Set() const{
    return m_remain_time_isSet;
}

bool MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::is_remain_time_Valid() const{
    return m_remain_time_isValid;
}

bool MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_res_consumable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_consumable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remain_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetSongUrl_200_response_data_inner_freeTimeTrialPrivilege::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_res_consumable_isValid && m_user_consumable_isValid && m_type_isValid && m_remain_time_isValid && true;
}

} // namespace MelodixAPI
