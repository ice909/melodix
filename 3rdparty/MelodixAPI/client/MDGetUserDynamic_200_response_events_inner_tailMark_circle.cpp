/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDynamic_200_response_events_inner_tailMark_circle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDynamic_200_response_events_inner_tailMark_circle::MDGetUserDynamic_200_response_events_inner_tailMark_circle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDynamic_200_response_events_inner_tailMark_circle::MDGetUserDynamic_200_response_events_inner_tailMark_circle() {
    this->initializeModel();
}

MDGetUserDynamic_200_response_events_inner_tailMark_circle::~MDGetUserDynamic_200_response_events_inner_tailMark_circle() {}

void MDGetUserDynamic_200_response_events_inner_tailMark_circle::initializeModel() {

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_post_count_isSet = false;
    m_post_count_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;
}

void MDGetUserDynamic_200_response_events_inner_tailMark_circle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDynamic_200_response_events_inner_tailMark_circle::fromJsonObject(QJsonObject json) {

    m_image_url_isValid = ::MelodixAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_post_count_isValid = ::MelodixAPI::fromJsonValue(m_post_count, json[QString("postCount")]);
    m_post_count_isSet = !json[QString("postCount")].isNull() && m_post_count_isValid;

    m_member_isValid = ::MelodixAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_tailMark_circle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDynamic_200_response_events_inner_tailMark_circle::asJsonObject() const {
    QJsonObject obj;
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::MelodixAPI::toJsonValue(m_image_url));
    }
    if (m_post_count_isSet) {
        obj.insert(QString("postCount"), ::MelodixAPI::toJsonValue(m_post_count));
    }
    if (m_member_isSet) {
        obj.insert(QString("member"), ::MelodixAPI::toJsonValue(m_member));
    }
    return obj;
}

QString MDGetUserDynamic_200_response_events_inner_tailMark_circle::getImageUrl() const {
    return m_image_url;
}
void MDGetUserDynamic_200_response_events_inner_tailMark_circle::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_tailMark_circle::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_tailMark_circle::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_tailMark_circle::getPostCount() const {
    return m_post_count;
}
void MDGetUserDynamic_200_response_events_inner_tailMark_circle::setPostCount(const QString &post_count) {
    m_post_count = post_count;
    m_post_count_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_tailMark_circle::is_post_count_Set() const{
    return m_post_count_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_tailMark_circle::is_post_count_Valid() const{
    return m_post_count_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_tailMark_circle::getMember() const {
    return m_member;
}
void MDGetUserDynamic_200_response_events_inner_tailMark_circle::setMember(const QString &member) {
    m_member = member;
    m_member_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_tailMark_circle::is_member_Set() const{
    return m_member_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_tailMark_circle::is_member_Valid() const{
    return m_member_isValid;
}

bool MDGetUserDynamic_200_response_events_inner_tailMark_circle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDynamic_200_response_events_inner_tailMark_circle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_url_isValid && m_post_count_isValid && m_member_isValid && true;
}

} // namespace MelodixAPI
