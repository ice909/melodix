/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetPlaylistDetail_200_response_playlist_creator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetPlaylistDetail_200_response_playlist_creator::MDGetPlaylistDetail_200_response_playlist_creator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetPlaylistDetail_200_response_playlist_creator::MDGetPlaylistDetail_200_response_playlist_creator() {
    this->initializeModel();
}

MDGetPlaylistDetail_200_response_playlist_creator::~MDGetPlaylistDetail_200_response_playlist_creator() {}

void MDGetPlaylistDetail_200_response_playlist_creator::initializeModel() {

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;
}

void MDGetPlaylistDetail_200_response_playlist_creator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetPlaylistDetail_200_response_playlist_creator::fromJsonObject(QJsonObject json) {

    m_user_id_isValid = ::MelodixAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_nickname_isValid = ::MelodixAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;
}

QString MDGetPlaylistDetail_200_response_playlist_creator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetPlaylistDetail_200_response_playlist_creator::asJsonObject() const {
    QJsonObject obj;
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::MelodixAPI::toJsonValue(m_user_id));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::MelodixAPI::toJsonValue(m_nickname));
    }
    return obj;
}

qint32 MDGetPlaylistDetail_200_response_playlist_creator::getUserId() const {
    return m_user_id;
}
void MDGetPlaylistDetail_200_response_playlist_creator::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool MDGetPlaylistDetail_200_response_playlist_creator::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool MDGetPlaylistDetail_200_response_playlist_creator::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString MDGetPlaylistDetail_200_response_playlist_creator::getNickname() const {
    return m_nickname;
}
void MDGetPlaylistDetail_200_response_playlist_creator::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool MDGetPlaylistDetail_200_response_playlist_creator::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool MDGetPlaylistDetail_200_response_playlist_creator::is_nickname_Valid() const{
    return m_nickname_isValid;
}

bool MDGetPlaylistDetail_200_response_playlist_creator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetPlaylistDetail_200_response_playlist_creator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_id_isValid && m_nickname_isValid && true;
}

} // namespace MelodixAPI
