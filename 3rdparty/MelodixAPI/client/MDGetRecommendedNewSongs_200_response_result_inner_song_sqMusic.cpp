/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic() {
    this->initializeModel();
}

MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::~MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic() {}

void MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_extension_isSet = false;
    m_extension_isValid = false;

    m_sr_isSet = false;
    m_sr_isValid = false;

    m_dfs_id_isSet = false;
    m_dfs_id_isValid = false;

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_play_time_isSet = false;
    m_play_time_isValid = false;

    m_volume_delta_isSet = false;
    m_volume_delta_isValid = false;
}

void MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_size_isValid = ::MelodixAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_extension_isValid = ::MelodixAPI::fromJsonValue(m_extension, json[QString("extension")]);
    m_extension_isSet = !json[QString("extension")].isNull() && m_extension_isValid;

    m_sr_isValid = ::MelodixAPI::fromJsonValue(m_sr, json[QString("sr")]);
    m_sr_isSet = !json[QString("sr")].isNull() && m_sr_isValid;

    m_dfs_id_isValid = ::MelodixAPI::fromJsonValue(m_dfs_id, json[QString("dfsId")]);
    m_dfs_id_isSet = !json[QString("dfsId")].isNull() && m_dfs_id_isValid;

    m_bitrate_isValid = ::MelodixAPI::fromJsonValue(m_bitrate, json[QString("bitrate")]);
    m_bitrate_isSet = !json[QString("bitrate")].isNull() && m_bitrate_isValid;

    m_play_time_isValid = ::MelodixAPI::fromJsonValue(m_play_time, json[QString("playTime")]);
    m_play_time_isSet = !json[QString("playTime")].isNull() && m_play_time_isValid;

    m_volume_delta_isValid = ::MelodixAPI::fromJsonValue(m_volume_delta, json[QString("volumeDelta")]);
    m_volume_delta_isSet = !json[QString("volumeDelta")].isNull() && m_volume_delta_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::MelodixAPI::toJsonValue(m_size));
    }
    if (m_extension_isSet) {
        obj.insert(QString("extension"), ::MelodixAPI::toJsonValue(m_extension));
    }
    if (m_sr_isSet) {
        obj.insert(QString("sr"), ::MelodixAPI::toJsonValue(m_sr));
    }
    if (m_dfs_id_isSet) {
        obj.insert(QString("dfsId"), ::MelodixAPI::toJsonValue(m_dfs_id));
    }
    if (m_bitrate_isSet) {
        obj.insert(QString("bitrate"), ::MelodixAPI::toJsonValue(m_bitrate));
    }
    if (m_play_time_isSet) {
        obj.insert(QString("playTime"), ::MelodixAPI::toJsonValue(m_play_time));
    }
    if (m_volume_delta_isSet) {
        obj.insert(QString("volumeDelta"), ::MelodixAPI::toJsonValue(m_volume_delta));
    }
    return obj;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::getId() const {
    return m_id;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_id_Valid() const{
    return m_id_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::getSize() const {
    return m_size;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_size_Set() const{
    return m_size_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_size_Valid() const{
    return m_size_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::getExtension() const {
    return m_extension;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::setExtension(const QString &extension) {
    m_extension = extension;
    m_extension_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_extension_Set() const{
    return m_extension_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_extension_Valid() const{
    return m_extension_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::getSr() const {
    return m_sr;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::setSr(const qint32 &sr) {
    m_sr = sr;
    m_sr_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_sr_Set() const{
    return m_sr_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_sr_Valid() const{
    return m_sr_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::getDfsId() const {
    return m_dfs_id;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::setDfsId(const qint32 &dfs_id) {
    m_dfs_id = dfs_id;
    m_dfs_id_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_dfs_id_Set() const{
    return m_dfs_id_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_dfs_id_Valid() const{
    return m_dfs_id_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::getBitrate() const {
    return m_bitrate;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::setBitrate(const qint32 &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::getPlayTime() const {
    return m_play_time;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::setPlayTime(const qint32 &play_time) {
    m_play_time = play_time;
    m_play_time_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_play_time_Set() const{
    return m_play_time_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_play_time_Valid() const{
    return m_play_time_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::getVolumeDelta() const {
    return m_volume_delta;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::setVolumeDelta(const qint32 &volume_delta) {
    m_volume_delta = volume_delta;
    m_volume_delta_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_volume_delta_Set() const{
    return m_volume_delta_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::is_volume_delta_Valid() const{
    return m_volume_delta_isValid;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dfs_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_delta_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_size_isValid && m_extension_isValid && m_sr_isValid && m_dfs_id_isValid && m_bitrate_isValid && m_play_time_isValid && m_volume_delta_isValid && true;
}

} // namespace MelodixAPI
