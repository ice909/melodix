/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetLyric_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetLyric_200_response::MDGetLyric_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetLyric_200_response::MDGetLyric_200_response() {
    this->initializeModel();
}

MDGetLyric_200_response::~MDGetLyric_200_response() {}

void MDGetLyric_200_response::initializeModel() {

    m_sgc_isSet = false;
    m_sgc_isValid = false;

    m_sfy_isSet = false;
    m_sfy_isValid = false;

    m_qfy_isSet = false;
    m_qfy_isValid = false;

    m_lrc_isSet = false;
    m_lrc_isValid = false;

    m_klyric_isSet = false;
    m_klyric_isValid = false;

    m_tlyric_isSet = false;
    m_tlyric_isValid = false;

    m_romalrc_isSet = false;
    m_romalrc_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;
}

void MDGetLyric_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetLyric_200_response::fromJsonObject(QJsonObject json) {

    m_sgc_isValid = ::MelodixAPI::fromJsonValue(m_sgc, json[QString("sgc")]);
    m_sgc_isSet = !json[QString("sgc")].isNull() && m_sgc_isValid;

    m_sfy_isValid = ::MelodixAPI::fromJsonValue(m_sfy, json[QString("sfy")]);
    m_sfy_isSet = !json[QString("sfy")].isNull() && m_sfy_isValid;

    m_qfy_isValid = ::MelodixAPI::fromJsonValue(m_qfy, json[QString("qfy")]);
    m_qfy_isSet = !json[QString("qfy")].isNull() && m_qfy_isValid;

    m_lrc_isValid = ::MelodixAPI::fromJsonValue(m_lrc, json[QString("lrc")]);
    m_lrc_isSet = !json[QString("lrc")].isNull() && m_lrc_isValid;

    m_klyric_isValid = ::MelodixAPI::fromJsonValue(m_klyric, json[QString("klyric")]);
    m_klyric_isSet = !json[QString("klyric")].isNull() && m_klyric_isValid;

    m_tlyric_isValid = ::MelodixAPI::fromJsonValue(m_tlyric, json[QString("tlyric")]);
    m_tlyric_isSet = !json[QString("tlyric")].isNull() && m_tlyric_isValid;

    m_romalrc_isValid = ::MelodixAPI::fromJsonValue(m_romalrc, json[QString("romalrc")]);
    m_romalrc_isSet = !json[QString("romalrc")].isNull() && m_romalrc_isValid;

    m_code_isValid = ::MelodixAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;
}

QString MDGetLyric_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetLyric_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_sgc_isSet) {
        obj.insert(QString("sgc"), ::MelodixAPI::toJsonValue(m_sgc));
    }
    if (m_sfy_isSet) {
        obj.insert(QString("sfy"), ::MelodixAPI::toJsonValue(m_sfy));
    }
    if (m_qfy_isSet) {
        obj.insert(QString("qfy"), ::MelodixAPI::toJsonValue(m_qfy));
    }
    if (m_lrc.isSet()) {
        obj.insert(QString("lrc"), ::MelodixAPI::toJsonValue(m_lrc));
    }
    if (m_klyric.isSet()) {
        obj.insert(QString("klyric"), ::MelodixAPI::toJsonValue(m_klyric));
    }
    if (m_tlyric.isSet()) {
        obj.insert(QString("tlyric"), ::MelodixAPI::toJsonValue(m_tlyric));
    }
    if (m_romalrc.isSet()) {
        obj.insert(QString("romalrc"), ::MelodixAPI::toJsonValue(m_romalrc));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::MelodixAPI::toJsonValue(m_code));
    }
    return obj;
}

bool MDGetLyric_200_response::isSgc() const {
    return m_sgc;
}
void MDGetLyric_200_response::setSgc(const bool &sgc) {
    m_sgc = sgc;
    m_sgc_isSet = true;
}

bool MDGetLyric_200_response::is_sgc_Set() const{
    return m_sgc_isSet;
}

bool MDGetLyric_200_response::is_sgc_Valid() const{
    return m_sgc_isValid;
}

bool MDGetLyric_200_response::isSfy() const {
    return m_sfy;
}
void MDGetLyric_200_response::setSfy(const bool &sfy) {
    m_sfy = sfy;
    m_sfy_isSet = true;
}

bool MDGetLyric_200_response::is_sfy_Set() const{
    return m_sfy_isSet;
}

bool MDGetLyric_200_response::is_sfy_Valid() const{
    return m_sfy_isValid;
}

bool MDGetLyric_200_response::isQfy() const {
    return m_qfy;
}
void MDGetLyric_200_response::setQfy(const bool &qfy) {
    m_qfy = qfy;
    m_qfy_isSet = true;
}

bool MDGetLyric_200_response::is_qfy_Set() const{
    return m_qfy_isSet;
}

bool MDGetLyric_200_response::is_qfy_Valid() const{
    return m_qfy_isValid;
}

MDGetLyric_200_response_lrc MDGetLyric_200_response::getLrc() const {
    return m_lrc;
}
void MDGetLyric_200_response::setLrc(const MDGetLyric_200_response_lrc &lrc) {
    m_lrc = lrc;
    m_lrc_isSet = true;
}

bool MDGetLyric_200_response::is_lrc_Set() const{
    return m_lrc_isSet;
}

bool MDGetLyric_200_response::is_lrc_Valid() const{
    return m_lrc_isValid;
}

MDGetLyric_200_response_lrc MDGetLyric_200_response::getKlyric() const {
    return m_klyric;
}
void MDGetLyric_200_response::setKlyric(const MDGetLyric_200_response_lrc &klyric) {
    m_klyric = klyric;
    m_klyric_isSet = true;
}

bool MDGetLyric_200_response::is_klyric_Set() const{
    return m_klyric_isSet;
}

bool MDGetLyric_200_response::is_klyric_Valid() const{
    return m_klyric_isValid;
}

MDGetLyric_200_response_lrc MDGetLyric_200_response::getTlyric() const {
    return m_tlyric;
}
void MDGetLyric_200_response::setTlyric(const MDGetLyric_200_response_lrc &tlyric) {
    m_tlyric = tlyric;
    m_tlyric_isSet = true;
}

bool MDGetLyric_200_response::is_tlyric_Set() const{
    return m_tlyric_isSet;
}

bool MDGetLyric_200_response::is_tlyric_Valid() const{
    return m_tlyric_isValid;
}

MDGetLyric_200_response_lrc MDGetLyric_200_response::getRomalrc() const {
    return m_romalrc;
}
void MDGetLyric_200_response::setRomalrc(const MDGetLyric_200_response_lrc &romalrc) {
    m_romalrc = romalrc;
    m_romalrc_isSet = true;
}

bool MDGetLyric_200_response::is_romalrc_Set() const{
    return m_romalrc_isSet;
}

bool MDGetLyric_200_response::is_romalrc_Valid() const{
    return m_romalrc_isValid;
}

qint32 MDGetLyric_200_response::getCode() const {
    return m_code;
}
void MDGetLyric_200_response::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool MDGetLyric_200_response::is_code_Set() const{
    return m_code_isSet;
}

bool MDGetLyric_200_response::is_code_Valid() const{
    return m_code_isValid;
}

bool MDGetLyric_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sgc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sfy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qfy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lrc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_klyric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tlyric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_romalrc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetLyric_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sgc_isValid && m_sfy_isValid && m_qfy_isValid && m_lrc_isValid && m_klyric_isValid && m_tlyric_isValid && m_romalrc_isValid && m_code_isValid && true;
}

} // namespace MelodixAPI
