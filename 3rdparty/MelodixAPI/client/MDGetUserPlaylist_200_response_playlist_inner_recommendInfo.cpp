/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserPlaylist_200_response_playlist_inner_recommendInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::MDGetUserPlaylist_200_response_playlist_inner_recommendInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::MDGetUserPlaylist_200_response_playlist_inner_recommendInfo() {
    this->initializeModel();
}

MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::~MDGetUserPlaylist_200_response_playlist_inner_recommendInfo() {}

void MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::initializeModel() {

    m_alg_isSet = false;
    m_alg_isValid = false;

    m_log_info_isSet = false;
    m_log_info_isValid = false;
}

void MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::fromJsonObject(QJsonObject json) {

    m_alg_isValid = ::MelodixAPI::fromJsonValue(m_alg, json[QString("alg")]);
    m_alg_isSet = !json[QString("alg")].isNull() && m_alg_isValid;

    m_log_info_isValid = ::MelodixAPI::fromJsonValue(m_log_info, json[QString("logInfo")]);
    m_log_info_isSet = !json[QString("logInfo")].isNull() && m_log_info_isValid;
}

QString MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_alg_isSet) {
        obj.insert(QString("alg"), ::MelodixAPI::toJsonValue(m_alg));
    }
    if (m_log_info_isSet) {
        obj.insert(QString("logInfo"), ::MelodixAPI::toJsonValue(m_log_info));
    }
    return obj;
}

QString MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::getAlg() const {
    return m_alg;
}
void MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::setAlg(const QString &alg) {
    m_alg = alg;
    m_alg_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::is_alg_Set() const{
    return m_alg_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::is_alg_Valid() const{
    return m_alg_isValid;
}

QString MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::getLogInfo() const {
    return m_log_info;
}
void MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::setLogInfo(const QString &log_info) {
    m_log_info = log_info;
    m_log_info_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::is_log_info_Set() const{
    return m_log_info_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::is_log_info_Valid() const{
    return m_log_info_isValid;
}

bool MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_info_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserPlaylist_200_response_playlist_inner_recommendInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alg_isValid && m_log_info_isValid && true;
}

} // namespace MelodixAPI
