/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDynamic_200_response_events_inner_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDynamic_200_response_events_inner_info::MDGetUserDynamic_200_response_events_inner_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDynamic_200_response_events_inner_info::MDGetUserDynamic_200_response_events_inner_info() {
    this->initializeModel();
}

MDGetUserDynamic_200_response_events_inner_info::~MDGetUserDynamic_200_response_events_inner_info() {}

void MDGetUserDynamic_200_response_events_inner_info::initializeModel() {

    m_comment_thread_isSet = false;
    m_comment_thread_isValid = false;

    m_liked_isSet = false;
    m_liked_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_liked_count_isSet = false;
    m_liked_count_isValid = false;

    m_share_count_isSet = false;
    m_share_count_isValid = false;

    m_thread_id_isSet = false;
    m_thread_id_isValid = false;
}

void MDGetUserDynamic_200_response_events_inner_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDynamic_200_response_events_inner_info::fromJsonObject(QJsonObject json) {

    m_comment_thread_isValid = ::MelodixAPI::fromJsonValue(m_comment_thread, json[QString("commentThread")]);
    m_comment_thread_isSet = !json[QString("commentThread")].isNull() && m_comment_thread_isValid;

    m_liked_isValid = ::MelodixAPI::fromJsonValue(m_liked, json[QString("liked")]);
    m_liked_isSet = !json[QString("liked")].isNull() && m_liked_isValid;

    m_resource_type_isValid = ::MelodixAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_resource_id_isValid = ::MelodixAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_comment_count_isValid = ::MelodixAPI::fromJsonValue(m_comment_count, json[QString("commentCount")]);
    m_comment_count_isSet = !json[QString("commentCount")].isNull() && m_comment_count_isValid;

    m_liked_count_isValid = ::MelodixAPI::fromJsonValue(m_liked_count, json[QString("likedCount")]);
    m_liked_count_isSet = !json[QString("likedCount")].isNull() && m_liked_count_isValid;

    m_share_count_isValid = ::MelodixAPI::fromJsonValue(m_share_count, json[QString("shareCount")]);
    m_share_count_isSet = !json[QString("shareCount")].isNull() && m_share_count_isValid;

    m_thread_id_isValid = ::MelodixAPI::fromJsonValue(m_thread_id, json[QString("threadId")]);
    m_thread_id_isSet = !json[QString("threadId")].isNull() && m_thread_id_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDynamic_200_response_events_inner_info::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_thread.isSet()) {
        obj.insert(QString("commentThread"), ::MelodixAPI::toJsonValue(m_comment_thread));
    }
    if (m_liked_isSet) {
        obj.insert(QString("liked"), ::MelodixAPI::toJsonValue(m_liked));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::MelodixAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::MelodixAPI::toJsonValue(m_resource_id));
    }
    if (m_comment_count_isSet) {
        obj.insert(QString("commentCount"), ::MelodixAPI::toJsonValue(m_comment_count));
    }
    if (m_liked_count_isSet) {
        obj.insert(QString("likedCount"), ::MelodixAPI::toJsonValue(m_liked_count));
    }
    if (m_share_count_isSet) {
        obj.insert(QString("shareCount"), ::MelodixAPI::toJsonValue(m_share_count));
    }
    if (m_thread_id_isSet) {
        obj.insert(QString("threadId"), ::MelodixAPI::toJsonValue(m_thread_id));
    }
    return obj;
}

MDGetUserDynamic_200_response_events_inner_info_commentThread MDGetUserDynamic_200_response_events_inner_info::getCommentThread() const {
    return m_comment_thread;
}
void MDGetUserDynamic_200_response_events_inner_info::setCommentThread(const MDGetUserDynamic_200_response_events_inner_info_commentThread &comment_thread) {
    m_comment_thread = comment_thread;
    m_comment_thread_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_comment_thread_Set() const{
    return m_comment_thread_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_comment_thread_Valid() const{
    return m_comment_thread_isValid;
}

bool MDGetUserDynamic_200_response_events_inner_info::isLiked() const {
    return m_liked;
}
void MDGetUserDynamic_200_response_events_inner_info::setLiked(const bool &liked) {
    m_liked = liked;
    m_liked_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_liked_Set() const{
    return m_liked_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_liked_Valid() const{
    return m_liked_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info::getResourceType() const {
    return m_resource_type;
}
void MDGetUserDynamic_200_response_events_inner_info::setResourceType(const qint32 &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info::getResourceId() const {
    return m_resource_id;
}
void MDGetUserDynamic_200_response_events_inner_info::setResourceId(const qint32 &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info::getCommentCount() const {
    return m_comment_count;
}
void MDGetUserDynamic_200_response_events_inner_info::setCommentCount(const qint32 &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info::getLikedCount() const {
    return m_liked_count;
}
void MDGetUserDynamic_200_response_events_inner_info::setLikedCount(const qint32 &liked_count) {
    m_liked_count = liked_count;
    m_liked_count_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_liked_count_Set() const{
    return m_liked_count_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_liked_count_Valid() const{
    return m_liked_count_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info::getShareCount() const {
    return m_share_count;
}
void MDGetUserDynamic_200_response_events_inner_info::setShareCount(const qint32 &share_count) {
    m_share_count = share_count;
    m_share_count_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_share_count_Set() const{
    return m_share_count_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_share_count_Valid() const{
    return m_share_count_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_info::getThreadId() const {
    return m_thread_id;
}
void MDGetUserDynamic_200_response_events_inner_info::setThreadId(const QString &thread_id) {
    m_thread_id = thread_id;
    m_thread_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_thread_id_Set() const{
    return m_thread_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info::is_thread_id_Valid() const{
    return m_thread_id_isValid;
}

bool MDGetUserDynamic_200_response_events_inner_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_thread.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_liked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liked_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDynamic_200_response_events_inner_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comment_thread_isValid && m_liked_isValid && m_resource_type_isValid && m_resource_id_isValid && m_comment_count_isValid && m_liked_count_isValid && m_share_count_isValid && m_thread_id_isValid && true;
}

} // namespace MelodixAPI
