/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MDGetUserDynamic_200_response_events_inner_user_vipRights.h
 *
 * 
 */

#ifndef MDGetUserDynamic_200_response_events_inner_user_vipRights_H
#define MDGetUserDynamic_200_response_events_inner_user_vipRights_H

#include <QJsonObject>

#include "MDGetUserDynamic_200_response_events_inner_user_vipRights_associator.h"

#include "MDEnum.h"
#include "MDObject.h"

namespace MelodixAPI {
class MDGetUserDynamic_200_response_events_inner_user_vipRights_associator;

class MDGetUserDynamic_200_response_events_inner_user_vipRights : public MDObject {
public:
    MDGetUserDynamic_200_response_events_inner_user_vipRights();
    MDGetUserDynamic_200_response_events_inner_user_vipRights(QString json);
    ~MDGetUserDynamic_200_response_events_inner_user_vipRights() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    MDGetUserDynamic_200_response_events_inner_user_vipRights_associator getAssociator() const;
    void setAssociator(const MDGetUserDynamic_200_response_events_inner_user_vipRights_associator &associator);
    bool is_associator_Set() const;
    bool is_associator_Valid() const;

    MDGetUserDynamic_200_response_events_inner_user_vipRights_associator getMusicPackage() const;
    void setMusicPackage(const MDGetUserDynamic_200_response_events_inner_user_vipRights_associator &music_package);
    bool is_music_package_Set() const;
    bool is_music_package_Valid() const;

    MDGetUserDynamic_200_response_events_inner_user_vipRights_associator getRedplus() const;
    void setRedplus(const MDGetUserDynamic_200_response_events_inner_user_vipRights_associator &redplus);
    bool is_redplus_Set() const;
    bool is_redplus_Valid() const;

    qint32 getRedVipAnnualCount() const;
    void setRedVipAnnualCount(const qint32 &red_vip_annual_count);
    bool is_red_vip_annual_count_Set() const;
    bool is_red_vip_annual_count_Valid() const;

    qint32 getRedVipLevel() const;
    void setRedVipLevel(const qint32 &red_vip_level);
    bool is_red_vip_level_Set() const;
    bool is_red_vip_level_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    MDGetUserDynamic_200_response_events_inner_user_vipRights_associator m_associator;
    bool m_associator_isSet;
    bool m_associator_isValid;

    MDGetUserDynamic_200_response_events_inner_user_vipRights_associator m_music_package;
    bool m_music_package_isSet;
    bool m_music_package_isValid;

    MDGetUserDynamic_200_response_events_inner_user_vipRights_associator m_redplus;
    bool m_redplus_isSet;
    bool m_redplus_isValid;

    qint32 m_red_vip_annual_count;
    bool m_red_vip_annual_count_isSet;
    bool m_red_vip_annual_count_isValid;

    qint32 m_red_vip_level;
    bool m_red_vip_level_isSet;
    bool m_red_vip_level_isValid;
};

} // namespace MelodixAPI

Q_DECLARE_METATYPE(MelodixAPI::MDGetUserDynamic_200_response_events_inner_user_vipRights)

#endif // MDGetUserDynamic_200_response_events_inner_user_vipRights_H
