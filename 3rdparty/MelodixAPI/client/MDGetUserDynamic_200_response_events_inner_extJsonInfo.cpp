/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDynamic_200_response_events_inner_extJsonInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDynamic_200_response_events_inner_extJsonInfo::MDGetUserDynamic_200_response_events_inner_extJsonInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDynamic_200_response_events_inner_extJsonInfo::MDGetUserDynamic_200_response_events_inner_extJsonInfo() {
    this->initializeModel();
}

MDGetUserDynamic_200_response_events_inner_extJsonInfo::~MDGetUserDynamic_200_response_events_inner_extJsonInfo() {}

void MDGetUserDynamic_200_response_events_inner_extJsonInfo::initializeModel() {

    m_act_id_isSet = false;
    m_act_id_isValid = false;

    m_act_ids_isSet = false;
    m_act_ids_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_ext_type_isSet = false;
    m_ext_type_isValid = false;

    m_ext_id_isSet = false;
    m_ext_id_isValid = false;

    m_circle_id_isSet = false;
    m_circle_id_isValid = false;

    m_ext_params_isSet = false;
    m_ext_params_isValid = false;

    m_privacy_setting_isSet = false;
    m_privacy_setting_isValid = false;

    m_point_topic_info_isSet = false;
    m_point_topic_info_isValid = false;

    m_activity_infos_isSet = false;
    m_activity_infos_isValid = false;

    m_anonymity_info_isSet = false;
    m_anonymity_info_isValid = false;

    m_recommend_status_isSet = false;
    m_recommend_status_isValid = false;

    m_first_recommend_time_isSet = false;
    m_first_recommend_time_isValid = false;
}

void MDGetUserDynamic_200_response_events_inner_extJsonInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDynamic_200_response_events_inner_extJsonInfo::fromJsonObject(QJsonObject json) {

    m_act_id_isValid = ::MelodixAPI::fromJsonValue(m_act_id, json[QString("actId")]);
    m_act_id_isSet = !json[QString("actId")].isNull() && m_act_id_isValid;

    m_act_ids_isValid = ::MelodixAPI::fromJsonValue(m_act_ids, json[QString("actIds")]);
    m_act_ids_isSet = !json[QString("actIds")].isNull() && m_act_ids_isValid;

    m_uuid_isValid = ::MelodixAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_ext_type_isValid = ::MelodixAPI::fromJsonValue(m_ext_type, json[QString("extType")]);
    m_ext_type_isSet = !json[QString("extType")].isNull() && m_ext_type_isValid;

    m_ext_id_isValid = ::MelodixAPI::fromJsonValue(m_ext_id, json[QString("extId")]);
    m_ext_id_isSet = !json[QString("extId")].isNull() && m_ext_id_isValid;

    m_circle_id_isValid = ::MelodixAPI::fromJsonValue(m_circle_id, json[QString("circleId")]);
    m_circle_id_isSet = !json[QString("circleId")].isNull() && m_circle_id_isValid;

    m_ext_params_isValid = ::MelodixAPI::fromJsonValue(m_ext_params, json[QString("extParams")]);
    m_ext_params_isSet = !json[QString("extParams")].isNull() && m_ext_params_isValid;

    m_privacy_setting_isValid = ::MelodixAPI::fromJsonValue(m_privacy_setting, json[QString("privacySetting")]);
    m_privacy_setting_isSet = !json[QString("privacySetting")].isNull() && m_privacy_setting_isValid;

    m_point_topic_info_isValid = ::MelodixAPI::fromJsonValue(m_point_topic_info, json[QString("pointTopicInfo")]);
    m_point_topic_info_isSet = !json[QString("pointTopicInfo")].isNull() && m_point_topic_info_isValid;

    m_activity_infos_isValid = ::MelodixAPI::fromJsonValue(m_activity_infos, json[QString("activityInfos")]);
    m_activity_infos_isSet = !json[QString("activityInfos")].isNull() && m_activity_infos_isValid;

    m_anonymity_info_isValid = ::MelodixAPI::fromJsonValue(m_anonymity_info, json[QString("anonymityInfo")]);
    m_anonymity_info_isSet = !json[QString("anonymityInfo")].isNull() && m_anonymity_info_isValid;

    m_recommend_status_isValid = ::MelodixAPI::fromJsonValue(m_recommend_status, json[QString("recommendStatus")]);
    m_recommend_status_isSet = !json[QString("recommendStatus")].isNull() && m_recommend_status_isValid;

    m_first_recommend_time_isValid = ::MelodixAPI::fromJsonValue(m_first_recommend_time, json[QString("firstRecommendTime")]);
    m_first_recommend_time_isSet = !json[QString("firstRecommendTime")].isNull() && m_first_recommend_time_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_extJsonInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDynamic_200_response_events_inner_extJsonInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_act_id_isSet) {
        obj.insert(QString("actId"), ::MelodixAPI::toJsonValue(m_act_id));
    }
    if (m_act_ids.size() > 0) {
        obj.insert(QString("actIds"), ::MelodixAPI::toJsonValue(m_act_ids));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::MelodixAPI::toJsonValue(m_uuid));
    }
    if (m_ext_type_isSet) {
        obj.insert(QString("extType"), ::MelodixAPI::toJsonValue(m_ext_type));
    }
    if (m_ext_id_isSet) {
        obj.insert(QString("extId"), ::MelodixAPI::toJsonValue(m_ext_id));
    }
    if (m_circle_id_isSet) {
        obj.insert(QString("circleId"), ::MelodixAPI::toJsonValue(m_circle_id));
    }
    if (m_ext_params_isSet) {
        obj.insert(QString("extParams"), ::MelodixAPI::toJsonValue(m_ext_params));
    }
    if (m_privacy_setting_isSet) {
        obj.insert(QString("privacySetting"), ::MelodixAPI::toJsonValue(m_privacy_setting));
    }
    if (m_point_topic_info_isSet) {
        obj.insert(QString("pointTopicInfo"), ::MelodixAPI::toJsonValue(m_point_topic_info));
    }
    if (m_activity_infos.size() > 0) {
        obj.insert(QString("activityInfos"), ::MelodixAPI::toJsonValue(m_activity_infos));
    }
    if (m_anonymity_info.isSet()) {
        obj.insert(QString("anonymityInfo"), ::MelodixAPI::toJsonValue(m_anonymity_info));
    }
    if (m_recommend_status_isSet) {
        obj.insert(QString("recommendStatus"), ::MelodixAPI::toJsonValue(m_recommend_status));
    }
    if (m_first_recommend_time_isSet) {
        obj.insert(QString("firstRecommendTime"), ::MelodixAPI::toJsonValue(m_first_recommend_time));
    }
    return obj;
}

qint32 MDGetUserDynamic_200_response_events_inner_extJsonInfo::getActId() const {
    return m_act_id;
}
void MDGetUserDynamic_200_response_events_inner_extJsonInfo::setActId(const qint32 &act_id) {
    m_act_id = act_id;
    m_act_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_act_id_Set() const{
    return m_act_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_act_id_Valid() const{
    return m_act_id_isValid;
}

QList<qint32> MDGetUserDynamic_200_response_events_inner_extJsonInfo::getActIds() const {
    return m_act_ids;
}
void MDGetUserDynamic_200_response_events_inner_extJsonInfo::setActIds(const QList<qint32> &act_ids) {
    m_act_ids = act_ids;
    m_act_ids_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_act_ids_Set() const{
    return m_act_ids_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_act_ids_Valid() const{
    return m_act_ids_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_extJsonInfo::getUuid() const {
    return m_uuid;
}
void MDGetUserDynamic_200_response_events_inner_extJsonInfo::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_uuid_Valid() const{
    return m_uuid_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_extJsonInfo::getExtType() const {
    return m_ext_type;
}
void MDGetUserDynamic_200_response_events_inner_extJsonInfo::setExtType(const QString &ext_type) {
    m_ext_type = ext_type;
    m_ext_type_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_ext_type_Set() const{
    return m_ext_type_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_ext_type_Valid() const{
    return m_ext_type_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_extJsonInfo::getExtId() const {
    return m_ext_id;
}
void MDGetUserDynamic_200_response_events_inner_extJsonInfo::setExtId(const QString &ext_id) {
    m_ext_id = ext_id;
    m_ext_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_ext_id_Set() const{
    return m_ext_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_ext_id_Valid() const{
    return m_ext_id_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_extJsonInfo::getCircleId() const {
    return m_circle_id;
}
void MDGetUserDynamic_200_response_events_inner_extJsonInfo::setCircleId(const QString &circle_id) {
    m_circle_id = circle_id;
    m_circle_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_circle_id_Set() const{
    return m_circle_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_circle_id_Valid() const{
    return m_circle_id_isValid;
}

MDObject MDGetUserDynamic_200_response_events_inner_extJsonInfo::getExtParams() const {
    return m_ext_params;
}
void MDGetUserDynamic_200_response_events_inner_extJsonInfo::setExtParams(const MDObject &ext_params) {
    m_ext_params = ext_params;
    m_ext_params_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_ext_params_Set() const{
    return m_ext_params_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_ext_params_Valid() const{
    return m_ext_params_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_extJsonInfo::getPrivacySetting() const {
    return m_privacy_setting;
}
void MDGetUserDynamic_200_response_events_inner_extJsonInfo::setPrivacySetting(const qint32 &privacy_setting) {
    m_privacy_setting = privacy_setting;
    m_privacy_setting_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_privacy_setting_Set() const{
    return m_privacy_setting_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_privacy_setting_Valid() const{
    return m_privacy_setting_isValid;
}

MDObject MDGetUserDynamic_200_response_events_inner_extJsonInfo::getPointTopicInfo() const {
    return m_point_topic_info;
}
void MDGetUserDynamic_200_response_events_inner_extJsonInfo::setPointTopicInfo(const MDObject &point_topic_info) {
    m_point_topic_info = point_topic_info;
    m_point_topic_info_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_point_topic_info_Set() const{
    return m_point_topic_info_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_point_topic_info_Valid() const{
    return m_point_topic_info_isValid;
}

QList<MDGetUserDynamic_200_response_events_inner_extJsonInfo_activityInfos_inner> MDGetUserDynamic_200_response_events_inner_extJsonInfo::getActivityInfos() const {
    return m_activity_infos;
}
void MDGetUserDynamic_200_response_events_inner_extJsonInfo::setActivityInfos(const QList<MDGetUserDynamic_200_response_events_inner_extJsonInfo_activityInfos_inner> &activity_infos) {
    m_activity_infos = activity_infos;
    m_activity_infos_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_activity_infos_Set() const{
    return m_activity_infos_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_activity_infos_Valid() const{
    return m_activity_infos_isValid;
}

MDGetUserDynamic_200_response_events_inner_extJsonInfo_anonymityInfo MDGetUserDynamic_200_response_events_inner_extJsonInfo::getAnonymityInfo() const {
    return m_anonymity_info;
}
void MDGetUserDynamic_200_response_events_inner_extJsonInfo::setAnonymityInfo(const MDGetUserDynamic_200_response_events_inner_extJsonInfo_anonymityInfo &anonymity_info) {
    m_anonymity_info = anonymity_info;
    m_anonymity_info_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_anonymity_info_Set() const{
    return m_anonymity_info_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_anonymity_info_Valid() const{
    return m_anonymity_info_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_extJsonInfo::getRecommendStatus() const {
    return m_recommend_status;
}
void MDGetUserDynamic_200_response_events_inner_extJsonInfo::setRecommendStatus(const qint32 &recommend_status) {
    m_recommend_status = recommend_status;
    m_recommend_status_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_recommend_status_Set() const{
    return m_recommend_status_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_recommend_status_Valid() const{
    return m_recommend_status_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_extJsonInfo::getFirstRecommendTime() const {
    return m_first_recommend_time;
}
void MDGetUserDynamic_200_response_events_inner_extJsonInfo::setFirstRecommendTime(const qint32 &first_recommend_time) {
    m_first_recommend_time = first_recommend_time;
    m_first_recommend_time_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_first_recommend_time_Set() const{
    return m_first_recommend_time_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::is_first_recommend_time_Valid() const{
    return m_first_recommend_time_isValid;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_act_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_act_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_circle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_params_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_topic_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_anonymity_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommend_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_recommend_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDynamic_200_response_events_inner_extJsonInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_act_id_isValid && m_act_ids_isValid && m_uuid_isValid && m_ext_type_isValid && m_ext_id_isValid && m_circle_id_isValid && m_ext_params_isValid && m_privacy_setting_isValid && m_point_topic_info_isValid && m_activity_infos_isValid && m_anonymity_info_isValid && m_recommend_status_isValid && m_first_recommend_time_isValid && true;
}

} // namespace MelodixAPI
