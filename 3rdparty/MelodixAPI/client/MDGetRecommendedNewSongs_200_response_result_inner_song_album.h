/**
 * MelodixAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MDGetRecommendedNewSongs_200_response_result_inner_song_album.h
 *
 * 
 */

#ifndef MDGetRecommendedNewSongs_200_response_result_inner_song_album_H
#define MDGetRecommendedNewSongs_200_response_result_inner_song_album_H

#include <QJsonObject>

#include "MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner.h"
#include <QList>
#include <QString>

#include "MDEnum.h"
#include "MDObject.h"

namespace MelodixAPI {
class MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner;

class MDGetRecommendedNewSongs_200_response_result_inner_song_album : public MDObject {
public:
    MDGetRecommendedNewSongs_200_response_result_inner_song_album();
    MDGetRecommendedNewSongs_200_response_result_inner_song_album(QString json);
    ~MDGetRecommendedNewSongs_200_response_result_inner_song_album() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint32 getSize() const;
    void setSize(const qint32 &size);
    bool is_size_Set() const;
    bool is_size_Valid() const;

    qint32 getPicId() const;
    void setPicId(const qint32 &pic_id);
    bool is_pic_id_Set() const;
    bool is_pic_id_Valid() const;

    QString getBlurPicUrl() const;
    void setBlurPicUrl(const QString &blur_pic_url);
    bool is_blur_pic_url_Set() const;
    bool is_blur_pic_url_Valid() const;

    qint32 getCompanyId() const;
    void setCompanyId(const qint32 &company_id);
    bool is_company_id_Set() const;
    bool is_company_id_Valid() const;

    qint32 getPic() const;
    void setPic(const qint32 &pic);
    bool is_pic_Set() const;
    bool is_pic_Valid() const;

    QString getPicUrl() const;
    void setPicUrl(const QString &pic_url);
    bool is_pic_url_Set() const;
    bool is_pic_url_Valid() const;

    qint32 getPublishTime() const;
    void setPublishTime(const qint32 &publish_time);
    bool is_publish_time_Set() const;
    bool is_publish_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getTags() const;
    void setTags(const QString &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getCompany() const;
    void setCompany(const QString &company);
    bool is_company_Set() const;
    bool is_company_Valid() const;

    QString getBriefDesc() const;
    void setBriefDesc(const QString &brief_desc);
    bool is_brief_desc_Set() const;
    bool is_brief_desc_Valid() const;

    MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner getArtist() const;
    void setArtist(const MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner &artist);
    bool is_artist_Set() const;
    bool is_artist_Valid() const;

    QList<QString> getSongs() const;
    void setSongs(const QList<QString> &songs);
    bool is_songs_Set() const;
    bool is_songs_Valid() const;

    QList<QString> getAlias() const;
    void setAlias(const QList<QString> &alias);
    bool is_alias_Set() const;
    bool is_alias_Valid() const;

    qint32 getStatus() const;
    void setStatus(const qint32 &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getCopyrightId() const;
    void setCopyrightId(const qint32 &copyright_id);
    bool is_copyright_id_Set() const;
    bool is_copyright_id_Valid() const;

    QString getCommentThreadId() const;
    void setCommentThreadId(const QString &comment_thread_id);
    bool is_comment_thread_id_Set() const;
    bool is_comment_thread_id_Valid() const;

    QList<MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner> getArtists() const;
    void setArtists(const QList<MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner> &artists);
    bool is_artists_Set() const;
    bool is_artists_Valid() const;

    QString getSubType() const;
    void setSubType(const QString &sub_type);
    bool is_sub_type_Set() const;
    bool is_sub_type_Valid() const;

    bool isOnSale() const;
    void setOnSale(const bool &on_sale);
    bool is_on_sale_Set() const;
    bool is_on_sale_Valid() const;

    qint32 getMark() const;
    void setMark(const qint32 &mark);
    bool is_mark_Set() const;
    bool is_mark_Valid() const;

    qint32 getGapless() const;
    void setGapless(const qint32 &gapless);
    bool is_gapless_Set() const;
    bool is_gapless_Valid() const;

    QString getPicIdStr() const;
    void setPicIdStr(const QString &pic_id_str);
    bool is_pic_id_str_Set() const;
    bool is_pic_id_str_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint32 m_size;
    bool m_size_isSet;
    bool m_size_isValid;

    qint32 m_pic_id;
    bool m_pic_id_isSet;
    bool m_pic_id_isValid;

    QString m_blur_pic_url;
    bool m_blur_pic_url_isSet;
    bool m_blur_pic_url_isValid;

    qint32 m_company_id;
    bool m_company_id_isSet;
    bool m_company_id_isValid;

    qint32 m_pic;
    bool m_pic_isSet;
    bool m_pic_isValid;

    QString m_pic_url;
    bool m_pic_url_isSet;
    bool m_pic_url_isValid;

    qint32 m_publish_time;
    bool m_publish_time_isSet;
    bool m_publish_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_company;
    bool m_company_isSet;
    bool m_company_isValid;

    QString m_brief_desc;
    bool m_brief_desc_isSet;
    bool m_brief_desc_isValid;

    MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner m_artist;
    bool m_artist_isSet;
    bool m_artist_isValid;

    QList<QString> m_songs;
    bool m_songs_isSet;
    bool m_songs_isValid;

    QList<QString> m_alias;
    bool m_alias_isSet;
    bool m_alias_isValid;

    qint32 m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_copyright_id;
    bool m_copyright_id_isSet;
    bool m_copyright_id_isValid;

    QString m_comment_thread_id;
    bool m_comment_thread_id_isSet;
    bool m_comment_thread_id_isValid;

    QList<MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner> m_artists;
    bool m_artists_isSet;
    bool m_artists_isValid;

    QString m_sub_type;
    bool m_sub_type_isSet;
    bool m_sub_type_isValid;

    bool m_on_sale;
    bool m_on_sale_isSet;
    bool m_on_sale_isValid;

    qint32 m_mark;
    bool m_mark_isSet;
    bool m_mark_isValid;

    qint32 m_gapless;
    bool m_gapless_isSet;
    bool m_gapless_isValid;

    QString m_pic_id_str;
    bool m_pic_id_str_isSet;
    bool m_pic_id_str_isValid;
};

} // namespace MelodixAPI

Q_DECLARE_METATYPE(MelodixAPI::MDGetRecommendedNewSongs_200_response_result_inner_song_album)

#endif // MDGetRecommendedNewSongs_200_response_result_inner_song_album_H
