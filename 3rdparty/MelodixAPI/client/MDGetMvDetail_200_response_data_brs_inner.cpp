/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetMvDetail_200_response_data_brs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetMvDetail_200_response_data_brs_inner::MDGetMvDetail_200_response_data_brs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetMvDetail_200_response_data_brs_inner::MDGetMvDetail_200_response_data_brs_inner() {
    this->initializeModel();
}

MDGetMvDetail_200_response_data_brs_inner::~MDGetMvDetail_200_response_data_brs_inner() {}

void MDGetMvDetail_200_response_data_brs_inner::initializeModel() {

    m_size_isSet = false;
    m_size_isValid = false;

    m_br_isSet = false;
    m_br_isValid = false;

    m_point_isSet = false;
    m_point_isValid = false;
}

void MDGetMvDetail_200_response_data_brs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetMvDetail_200_response_data_brs_inner::fromJsonObject(QJsonObject json) {

    m_size_isValid = ::MelodixAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_br_isValid = ::MelodixAPI::fromJsonValue(m_br, json[QString("br")]);
    m_br_isSet = !json[QString("br")].isNull() && m_br_isValid;

    m_point_isValid = ::MelodixAPI::fromJsonValue(m_point, json[QString("point")]);
    m_point_isSet = !json[QString("point")].isNull() && m_point_isValid;
}

QString MDGetMvDetail_200_response_data_brs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetMvDetail_200_response_data_brs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_size_isSet) {
        obj.insert(QString("size"), ::MelodixAPI::toJsonValue(m_size));
    }
    if (m_br_isSet) {
        obj.insert(QString("br"), ::MelodixAPI::toJsonValue(m_br));
    }
    if (m_point_isSet) {
        obj.insert(QString("point"), ::MelodixAPI::toJsonValue(m_point));
    }
    return obj;
}

qint32 MDGetMvDetail_200_response_data_brs_inner::getSize() const {
    return m_size;
}
void MDGetMvDetail_200_response_data_brs_inner::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool MDGetMvDetail_200_response_data_brs_inner::is_size_Set() const{
    return m_size_isSet;
}

bool MDGetMvDetail_200_response_data_brs_inner::is_size_Valid() const{
    return m_size_isValid;
}

qint32 MDGetMvDetail_200_response_data_brs_inner::getBr() const {
    return m_br;
}
void MDGetMvDetail_200_response_data_brs_inner::setBr(const qint32 &br) {
    m_br = br;
    m_br_isSet = true;
}

bool MDGetMvDetail_200_response_data_brs_inner::is_br_Set() const{
    return m_br_isSet;
}

bool MDGetMvDetail_200_response_data_brs_inner::is_br_Valid() const{
    return m_br_isValid;
}

qint32 MDGetMvDetail_200_response_data_brs_inner::getPoint() const {
    return m_point;
}
void MDGetMvDetail_200_response_data_brs_inner::setPoint(const qint32 &point) {
    m_point = point;
    m_point_isSet = true;
}

bool MDGetMvDetail_200_response_data_brs_inner::is_point_Set() const{
    return m_point_isSet;
}

bool MDGetMvDetail_200_response_data_brs_inner::is_point_Valid() const{
    return m_point_isValid;
}

bool MDGetMvDetail_200_response_data_brs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_br_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetMvDetail_200_response_data_brs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_size_isValid && m_br_isValid && m_point_isValid && true;
}

} // namespace MelodixAPI
