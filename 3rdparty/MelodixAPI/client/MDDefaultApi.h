/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef MD_MDDefaultApi_H
#define MD_MDDefaultApi_H

#include "MDHelpers.h"
#include "MDHttpRequest.h"
#include "MDServerConfiguration.h"
#include "MDOauth.h"

#include "MDDailySongRecommend_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace MelodixAPI {

class MDDefaultApi : public QObject {
    Q_OBJECT

public:
    MDDefaultApi(const int timeOut = 0);
    ~MDDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, MDServerVariable> &variables = QMap<QString, MDServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, MDServerVariable> &variables =  QMap<QString, MDServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, MDServerVariable> &variables =  QMap<QString, MDServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    void dailySongRecommend();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<MDServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    MDHttpRequestInput _latestInput;
    MDHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dailySongRecommendCallback(MDHttpRequestWorker *worker);

signals:

    void dailySongRecommendSignal(MDDailySongRecommend_200_response summary);

    void dailySongRecommendSignalFull(MDHttpRequestWorker *worker, MDDailySongRecommend_200_response summary);

    void dailySongRecommendSignalE(MDDailySongRecommend_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);

    void dailySongRecommendSignalEFull(MDHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace MelodixAPI
#endif
