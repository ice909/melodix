/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MDGetUserDynamic_200_response_events_inner.h
 *
 * 
 */

#ifndef MDGetUserDynamic_200_response_events_inner_H
#define MDGetUserDynamic_200_response_events_inner_H

#include <QJsonObject>

#include "MDGetUserDynamic_200_response_events_inner_anonymityInfo.h"
#include "MDGetUserDynamic_200_response_events_inner_bottomActivityInfos_inner.h"
#include "MDGetUserDynamic_200_response_events_inner_extJsonInfo.h"
#include "MDGetUserDynamic_200_response_events_inner_info.h"
#include "MDGetUserDynamic_200_response_events_inner_ipLocation.h"
#include "MDGetUserDynamic_200_response_events_inner_pendantData.h"
#include "MDGetUserDynamic_200_response_events_inner_pics_inner.h"
#include "MDGetUserDynamic_200_response_events_inner_privacySettingInfo.h"
#include "MDGetUserDynamic_200_response_events_inner_tailMark.h"
#include "MDGetUserDynamic_200_response_events_inner_user.h"
#include "MDGetUserDynamic_200_response_events_inner_xInfo.h"
#include "MDObject.h"
#include <QList>
#include <QString>

#include "MDEnum.h"
#include "MDObject.h"

namespace MelodixAPI {
class MDGetUserDynamic_200_response_events_inner_pendantData;
class MDGetUserDynamic_200_response_events_inner_info;
class MDGetUserDynamic_200_response_events_inner_tailMark;
class MDGetUserDynamic_200_response_events_inner_privacySettingInfo;
class MDGetUserDynamic_200_response_events_inner_bottomActivityInfos_inner;
class MDGetUserDynamic_200_response_events_inner_ipLocation;
class MDGetUserDynamic_200_response_events_inner_anonymityInfo;
class MDGetUserDynamic_200_response_events_inner_pics_inner;
class MDGetUserDynamic_200_response_events_inner_user;
class MDGetUserDynamic_200_response_events_inner_extJsonInfo;
class MDGetUserDynamic_200_response_events_inner_xInfo;

class MDGetUserDynamic_200_response_events_inner : public MDObject {
public:
    MDGetUserDynamic_200_response_events_inner();
    MDGetUserDynamic_200_response_events_inner(QString json);
    ~MDGetUserDynamic_200_response_events_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isMusicianSay() const;
    void setMusicianSay(const bool &musician_say);
    bool is_musician_say_Set() const;
    bool is_musician_say_Valid() const;

    QString getActName() const;
    void setActName(const QString &act_name);
    bool is_act_name_Set() const;
    bool is_act_name_Valid() const;

    MDGetUserDynamic_200_response_events_inner_pendantData getPendantData() const;
    void setPendantData(const MDGetUserDynamic_200_response_events_inner_pendantData &pendant_data);
    bool is_pendant_data_Set() const;
    bool is_pendant_data_Valid() const;

    qint32 getForwardCount() const;
    void setForwardCount(const qint32 &forward_count);
    bool is_forward_count_Set() const;
    bool is_forward_count_Valid() const;

    QString getDiscussId() const;
    void setDiscussId(const QString &discuss_id);
    bool is_discuss_id_Set() const;
    bool is_discuss_id_Valid() const;

    QString getEncryptUserId() const;
    void setEncryptUserId(const QString &encrypt_user_id);
    bool is_encrypt_user_id_Set() const;
    bool is_encrypt_user_id_Valid() const;

    qint32 getInsiteForwardCount() const;
    void setInsiteForwardCount(const qint32 &insite_forward_count);
    bool is_insite_forward_count_Set() const;
    bool is_insite_forward_count_Valid() const;

    MDGetUserDynamic_200_response_events_inner_info getInfo() const;
    void setInfo(const MDGetUserDynamic_200_response_events_inner_info &info);
    bool is_info_Set() const;
    bool is_info_Valid() const;

    bool isTopEvent() const;
    void setTopEvent(const bool &top_event);
    bool is_top_event_Set() const;
    bool is_top_event_Valid() const;

    QString getThreadId() const;
    void setThreadId(const QString &thread_id);
    bool is_thread_id_Set() const;
    bool is_thread_id_Valid() const;

    MDGetUserDynamic_200_response_events_inner_tailMark getTailMark() const;
    void setTailMark(const MDGetUserDynamic_200_response_events_inner_tailMark &tail_mark);
    bool is_tail_mark_Set() const;
    bool is_tail_mark_Valid() const;

    QString getTypeDesc() const;
    void setTypeDesc(const QString &type_desc);
    bool is_type_desc_Set() const;
    bool is_type_desc_Valid() const;

    qint32 getPrivacySetting() const;
    void setPrivacySetting(const qint32 &privacy_setting);
    bool is_privacy_setting_Set() const;
    bool is_privacy_setting_Valid() const;

    MDGetUserDynamic_200_response_events_inner_privacySettingInfo getPrivacySettingInfo() const;
    void setPrivacySettingInfo(const MDGetUserDynamic_200_response_events_inner_privacySettingInfo &privacy_setting_info);
    bool is_privacy_setting_info_Set() const;
    bool is_privacy_setting_info_Valid() const;

    QList<QString> getTopActivityInfos() const;
    void setTopActivityInfos(const QList<QString> &top_activity_infos);
    bool is_top_activity_infos_Set() const;
    bool is_top_activity_infos_Valid() const;

    QList<MDGetUserDynamic_200_response_events_inner_bottomActivityInfos_inner> getBottomActivityInfos() const;
    void setBottomActivityInfos(const QList<MDGetUserDynamic_200_response_events_inner_bottomActivityInfos_inner> &bottom_activity_infos);
    bool is_bottom_activity_infos_Set() const;
    bool is_bottom_activity_infos_Valid() const;

    bool isMore() const;
    void setMore(const bool &more);
    bool is_more_Set() const;
    bool is_more_Valid() const;

    bool isRelationTopic() const;
    void setRelationTopic(const bool &relation_topic);
    bool is_relation_topic_Set() const;
    bool is_relation_topic_Valid() const;

    QString getExtType() const;
    void setExtType(const QString &ext_type);
    bool is_ext_type_Set() const;
    bool is_ext_type_Valid() const;

    MDGetUserDynamic_200_response_events_inner_ipLocation getIpLocation() const;
    void setIpLocation(const MDGetUserDynamic_200_response_events_inner_ipLocation &ip_location);
    bool is_ip_location_Set() const;
    bool is_ip_location_Valid() const;

    MDGetUserDynamic_200_response_events_inner_anonymityInfo getAnonymityInfo() const;
    void setAnonymityInfo(const MDGetUserDynamic_200_response_events_inner_anonymityInfo &anonymity_info);
    bool is_anonymity_info_Set() const;
    bool is_anonymity_info_Valid() const;

    MDObject getPointTopicInfo() const;
    void setPointTopicInfo(const MDObject &point_topic_info);
    bool is_point_topic_info_Set() const;
    bool is_point_topic_info_Valid() const;

    bool isOwner() const;
    void setOwner(const bool &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QString getResourceUniqueId() const;
    void setResourceUniqueId(const QString &resource_unique_id);
    bool is_resource_unique_id_Set() const;
    bool is_resource_unique_id_Valid() const;

    bool isShowFollowButton() const;
    void setShowFollowButton(const bool &show_follow_button);
    bool is_show_follow_button_Set() const;
    bool is_show_follow_button_Valid() const;

    qint32 getTmplId() const;
    void setTmplId(const qint32 &tmpl_id);
    bool is_tmpl_id_Set() const;
    bool is_tmpl_id_Valid() const;

    qint32 getExpireTime() const;
    void setExpireTime(const qint32 &expire_time);
    bool is_expire_time_Set() const;
    bool is_expire_time_Valid() const;

    QList<MDGetUserDynamic_200_response_events_inner_pics_inner> getPics() const;
    void setPics(const QList<MDGetUserDynamic_200_response_events_inner_pics_inner> &pics);
    bool is_pics_Set() const;
    bool is_pics_Valid() const;

    QString getJson() const;
    void setJson(const QString &json);
    bool is_json_Set() const;
    bool is_json_Valid() const;

    MDGetUserDynamic_200_response_events_inner_user getUser() const;
    void setUser(const MDGetUserDynamic_200_response_events_inner_user &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    double getEventTime() const;
    void setEventTime(const double &event_time);
    bool is_event_time_Set() const;
    bool is_event_time_Valid() const;

    QString getUuid() const;
    void setUuid(const QString &uuid);
    bool is_uuid_Set() const;
    bool is_uuid_Valid() const;

    MDGetUserDynamic_200_response_events_inner_extJsonInfo getExtJsonInfo() const;
    void setExtJsonInfo(const MDGetUserDynamic_200_response_events_inner_extJsonInfo &ext_json_info);
    bool is_ext_json_info_Set() const;
    bool is_ext_json_info_Valid() const;

    qint32 getActId() const;
    void setActId(const qint32 &act_id);
    bool is_act_id_Set() const;
    bool is_act_id_Valid() const;

    qint32 getShowTime() const;
    void setShowTime(const qint32 &show_time);
    bool is_show_time_Set() const;
    bool is_show_time_Valid() const;

    MDGetUserDynamic_200_response_events_inner_xInfo getXInfo() const;
    void setXInfo(const MDGetUserDynamic_200_response_events_inner_xInfo &x_info);
    bool is_x_info_Set() const;
    bool is_x_info_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getType() const;
    void setType(const qint32 &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_musician_say;
    bool m_musician_say_isSet;
    bool m_musician_say_isValid;

    QString m_act_name;
    bool m_act_name_isSet;
    bool m_act_name_isValid;

    MDGetUserDynamic_200_response_events_inner_pendantData m_pendant_data;
    bool m_pendant_data_isSet;
    bool m_pendant_data_isValid;

    qint32 m_forward_count;
    bool m_forward_count_isSet;
    bool m_forward_count_isValid;

    QString m_discuss_id;
    bool m_discuss_id_isSet;
    bool m_discuss_id_isValid;

    QString m_encrypt_user_id;
    bool m_encrypt_user_id_isSet;
    bool m_encrypt_user_id_isValid;

    qint32 m_insite_forward_count;
    bool m_insite_forward_count_isSet;
    bool m_insite_forward_count_isValid;

    MDGetUserDynamic_200_response_events_inner_info m_info;
    bool m_info_isSet;
    bool m_info_isValid;

    bool m_top_event;
    bool m_top_event_isSet;
    bool m_top_event_isValid;

    QString m_thread_id;
    bool m_thread_id_isSet;
    bool m_thread_id_isValid;

    MDGetUserDynamic_200_response_events_inner_tailMark m_tail_mark;
    bool m_tail_mark_isSet;
    bool m_tail_mark_isValid;

    QString m_type_desc;
    bool m_type_desc_isSet;
    bool m_type_desc_isValid;

    qint32 m_privacy_setting;
    bool m_privacy_setting_isSet;
    bool m_privacy_setting_isValid;

    MDGetUserDynamic_200_response_events_inner_privacySettingInfo m_privacy_setting_info;
    bool m_privacy_setting_info_isSet;
    bool m_privacy_setting_info_isValid;

    QList<QString> m_top_activity_infos;
    bool m_top_activity_infos_isSet;
    bool m_top_activity_infos_isValid;

    QList<MDGetUserDynamic_200_response_events_inner_bottomActivityInfos_inner> m_bottom_activity_infos;
    bool m_bottom_activity_infos_isSet;
    bool m_bottom_activity_infos_isValid;

    bool m_more;
    bool m_more_isSet;
    bool m_more_isValid;

    bool m_relation_topic;
    bool m_relation_topic_isSet;
    bool m_relation_topic_isValid;

    QString m_ext_type;
    bool m_ext_type_isSet;
    bool m_ext_type_isValid;

    MDGetUserDynamic_200_response_events_inner_ipLocation m_ip_location;
    bool m_ip_location_isSet;
    bool m_ip_location_isValid;

    MDGetUserDynamic_200_response_events_inner_anonymityInfo m_anonymity_info;
    bool m_anonymity_info_isSet;
    bool m_anonymity_info_isValid;

    MDObject m_point_topic_info;
    bool m_point_topic_info_isSet;
    bool m_point_topic_info_isValid;

    bool m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QString m_resource_unique_id;
    bool m_resource_unique_id_isSet;
    bool m_resource_unique_id_isValid;

    bool m_show_follow_button;
    bool m_show_follow_button_isSet;
    bool m_show_follow_button_isValid;

    qint32 m_tmpl_id;
    bool m_tmpl_id_isSet;
    bool m_tmpl_id_isValid;

    qint32 m_expire_time;
    bool m_expire_time_isSet;
    bool m_expire_time_isValid;

    QList<MDGetUserDynamic_200_response_events_inner_pics_inner> m_pics;
    bool m_pics_isSet;
    bool m_pics_isValid;

    QString m_json;
    bool m_json_isSet;
    bool m_json_isValid;

    MDGetUserDynamic_200_response_events_inner_user m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    double m_event_time;
    bool m_event_time_isSet;
    bool m_event_time_isValid;

    QString m_uuid;
    bool m_uuid_isSet;
    bool m_uuid_isValid;

    MDGetUserDynamic_200_response_events_inner_extJsonInfo m_ext_json_info;
    bool m_ext_json_info_isSet;
    bool m_ext_json_info_isValid;

    qint32 m_act_id;
    bool m_act_id_isSet;
    bool m_act_id_isValid;

    qint32 m_show_time;
    bool m_show_time_isSet;
    bool m_show_time_isValid;

    MDGetUserDynamic_200_response_events_inner_xInfo m_x_info;
    bool m_x_info_isSet;
    bool m_x_info_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace MelodixAPI

Q_DECLARE_METATYPE(MelodixAPI::MDGetUserDynamic_200_response_events_inner)

#endif // MDGetUserDynamic_200_response_events_inner_H
