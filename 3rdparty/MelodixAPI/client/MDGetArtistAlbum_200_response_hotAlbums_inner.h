/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MDGetArtistAlbum_200_response_hotAlbums_inner.h
 *
 * 
 */

#ifndef MDGetArtistAlbum_200_response_hotAlbums_inner_H
#define MDGetArtistAlbum_200_response_hotAlbums_inner_H

#include <QJsonObject>

#include "MDGetArtistAlbum_200_response_hotAlbums_inner_artist.h"
#include "MDGetArtistAlbum_200_response_hotAlbums_inner_artists_inner.h"
#include <QList>
#include <QString>

#include "MDEnum.h"
#include "MDObject.h"

namespace MelodixAPI {
class MDGetArtistAlbum_200_response_hotAlbums_inner_artists_inner;
class MDGetArtistAlbum_200_response_hotAlbums_inner_artist;

class MDGetArtistAlbum_200_response_hotAlbums_inner : public MDObject {
public:
    MDGetArtistAlbum_200_response_hotAlbums_inner();
    MDGetArtistAlbum_200_response_hotAlbums_inner(QString json);
    ~MDGetArtistAlbum_200_response_hotAlbums_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getSongs() const;
    void setSongs(const QList<QString> &songs);
    bool is_songs_Set() const;
    bool is_songs_Valid() const;

    QList<MDGetArtistAlbum_200_response_hotAlbums_inner_artists_inner> getArtists() const;
    void setArtists(const QList<MDGetArtistAlbum_200_response_hotAlbums_inner_artists_inner> &artists);
    bool is_artists_Set() const;
    bool is_artists_Valid() const;

    MDGetArtistAlbum_200_response_hotAlbums_inner_artist getArtist() const;
    void setArtist(const MDGetArtistAlbum_200_response_hotAlbums_inner_artist &artist);
    bool is_artist_Set() const;
    bool is_artist_Valid() const;

    qint32 getPublishTime() const;
    void setPublishTime(const qint32 &publish_time);
    bool is_publish_time_Set() const;
    bool is_publish_time_Valid() const;

    QString getPicUrl() const;
    void setPicUrl(const QString &pic_url);
    bool is_pic_url_Set() const;
    bool is_pic_url_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getSize() const;
    void setSize(const qint32 &size);
    bool is_size_Set() const;
    bool is_size_Valid() const;

    QString getBlurPicUrl() const;
    void setBlurPicUrl(const QString &blur_pic_url);
    bool is_blur_pic_url_Set() const;
    bool is_blur_pic_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_songs;
    bool m_songs_isSet;
    bool m_songs_isValid;

    QList<MDGetArtistAlbum_200_response_hotAlbums_inner_artists_inner> m_artists;
    bool m_artists_isSet;
    bool m_artists_isValid;

    MDGetArtistAlbum_200_response_hotAlbums_inner_artist m_artist;
    bool m_artist_isSet;
    bool m_artist_isValid;

    qint32 m_publish_time;
    bool m_publish_time_isSet;
    bool m_publish_time_isValid;

    QString m_pic_url;
    bool m_pic_url_isSet;
    bool m_pic_url_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_size;
    bool m_size_isSet;
    bool m_size_isValid;

    QString m_blur_pic_url;
    bool m_blur_pic_url_isSet;
    bool m_blur_pic_url_isValid;
};

} // namespace MelodixAPI

Q_DECLARE_METATYPE(MelodixAPI::MDGetArtistAlbum_200_response_hotAlbums_inner)

#endif // MDGetArtistAlbum_200_response_hotAlbums_inner_H
