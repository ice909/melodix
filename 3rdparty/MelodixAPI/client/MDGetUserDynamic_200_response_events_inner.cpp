/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDynamic_200_response_events_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDynamic_200_response_events_inner::MDGetUserDynamic_200_response_events_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDynamic_200_response_events_inner::MDGetUserDynamic_200_response_events_inner() {
    this->initializeModel();
}

MDGetUserDynamic_200_response_events_inner::~MDGetUserDynamic_200_response_events_inner() {}

void MDGetUserDynamic_200_response_events_inner::initializeModel() {

    m_musician_say_isSet = false;
    m_musician_say_isValid = false;

    m_act_name_isSet = false;
    m_act_name_isValid = false;

    m_pendant_data_isSet = false;
    m_pendant_data_isValid = false;

    m_forward_count_isSet = false;
    m_forward_count_isValid = false;

    m_discuss_id_isSet = false;
    m_discuss_id_isValid = false;

    m_encrypt_user_id_isSet = false;
    m_encrypt_user_id_isValid = false;

    m_insite_forward_count_isSet = false;
    m_insite_forward_count_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_top_event_isSet = false;
    m_top_event_isValid = false;

    m_thread_id_isSet = false;
    m_thread_id_isValid = false;

    m_tail_mark_isSet = false;
    m_tail_mark_isValid = false;

    m_type_desc_isSet = false;
    m_type_desc_isValid = false;

    m_privacy_setting_isSet = false;
    m_privacy_setting_isValid = false;

    m_privacy_setting_info_isSet = false;
    m_privacy_setting_info_isValid = false;

    m_top_activity_infos_isSet = false;
    m_top_activity_infos_isValid = false;

    m_bottom_activity_infos_isSet = false;
    m_bottom_activity_infos_isValid = false;

    m_more_isSet = false;
    m_more_isValid = false;

    m_relation_topic_isSet = false;
    m_relation_topic_isValid = false;

    m_ext_type_isSet = false;
    m_ext_type_isValid = false;

    m_ip_location_isSet = false;
    m_ip_location_isValid = false;

    m_anonymity_info_isSet = false;
    m_anonymity_info_isValid = false;

    m_point_topic_info_isSet = false;
    m_point_topic_info_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_resource_unique_id_isSet = false;
    m_resource_unique_id_isValid = false;

    m_show_follow_button_isSet = false;
    m_show_follow_button_isValid = false;

    m_tmpl_id_isSet = false;
    m_tmpl_id_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_pics_isSet = false;
    m_pics_isValid = false;

    m_json_isSet = false;
    m_json_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_ext_json_info_isSet = false;
    m_ext_json_info_isValid = false;

    m_act_id_isSet = false;
    m_act_id_isValid = false;

    m_show_time_isSet = false;
    m_show_time_isValid = false;

    m_x_info_isSet = false;
    m_x_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void MDGetUserDynamic_200_response_events_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDynamic_200_response_events_inner::fromJsonObject(QJsonObject json) {

    m_musician_say_isValid = ::MelodixAPI::fromJsonValue(m_musician_say, json[QString("musicianSay")]);
    m_musician_say_isSet = !json[QString("musicianSay")].isNull() && m_musician_say_isValid;

    m_act_name_isValid = ::MelodixAPI::fromJsonValue(m_act_name, json[QString("actName")]);
    m_act_name_isSet = !json[QString("actName")].isNull() && m_act_name_isValid;

    m_pendant_data_isValid = ::MelodixAPI::fromJsonValue(m_pendant_data, json[QString("pendantData")]);
    m_pendant_data_isSet = !json[QString("pendantData")].isNull() && m_pendant_data_isValid;

    m_forward_count_isValid = ::MelodixAPI::fromJsonValue(m_forward_count, json[QString("forwardCount")]);
    m_forward_count_isSet = !json[QString("forwardCount")].isNull() && m_forward_count_isValid;

    m_discuss_id_isValid = ::MelodixAPI::fromJsonValue(m_discuss_id, json[QString("discussId")]);
    m_discuss_id_isSet = !json[QString("discussId")].isNull() && m_discuss_id_isValid;

    m_encrypt_user_id_isValid = ::MelodixAPI::fromJsonValue(m_encrypt_user_id, json[QString("encryptUserId")]);
    m_encrypt_user_id_isSet = !json[QString("encryptUserId")].isNull() && m_encrypt_user_id_isValid;

    m_insite_forward_count_isValid = ::MelodixAPI::fromJsonValue(m_insite_forward_count, json[QString("insiteForwardCount")]);
    m_insite_forward_count_isSet = !json[QString("insiteForwardCount")].isNull() && m_insite_forward_count_isValid;

    m_info_isValid = ::MelodixAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_top_event_isValid = ::MelodixAPI::fromJsonValue(m_top_event, json[QString("topEvent")]);
    m_top_event_isSet = !json[QString("topEvent")].isNull() && m_top_event_isValid;

    m_thread_id_isValid = ::MelodixAPI::fromJsonValue(m_thread_id, json[QString("threadId")]);
    m_thread_id_isSet = !json[QString("threadId")].isNull() && m_thread_id_isValid;

    m_tail_mark_isValid = ::MelodixAPI::fromJsonValue(m_tail_mark, json[QString("tailMark")]);
    m_tail_mark_isSet = !json[QString("tailMark")].isNull() && m_tail_mark_isValid;

    m_type_desc_isValid = ::MelodixAPI::fromJsonValue(m_type_desc, json[QString("typeDesc")]);
    m_type_desc_isSet = !json[QString("typeDesc")].isNull() && m_type_desc_isValid;

    m_privacy_setting_isValid = ::MelodixAPI::fromJsonValue(m_privacy_setting, json[QString("privacySetting")]);
    m_privacy_setting_isSet = !json[QString("privacySetting")].isNull() && m_privacy_setting_isValid;

    m_privacy_setting_info_isValid = ::MelodixAPI::fromJsonValue(m_privacy_setting_info, json[QString("privacySettingInfo")]);
    m_privacy_setting_info_isSet = !json[QString("privacySettingInfo")].isNull() && m_privacy_setting_info_isValid;

    m_top_activity_infos_isValid = ::MelodixAPI::fromJsonValue(m_top_activity_infos, json[QString("topActivityInfos")]);
    m_top_activity_infos_isSet = !json[QString("topActivityInfos")].isNull() && m_top_activity_infos_isValid;

    m_bottom_activity_infos_isValid = ::MelodixAPI::fromJsonValue(m_bottom_activity_infos, json[QString("bottomActivityInfos")]);
    m_bottom_activity_infos_isSet = !json[QString("bottomActivityInfos")].isNull() && m_bottom_activity_infos_isValid;

    m_more_isValid = ::MelodixAPI::fromJsonValue(m_more, json[QString("more")]);
    m_more_isSet = !json[QString("more")].isNull() && m_more_isValid;

    m_relation_topic_isValid = ::MelodixAPI::fromJsonValue(m_relation_topic, json[QString("relationTopic")]);
    m_relation_topic_isSet = !json[QString("relationTopic")].isNull() && m_relation_topic_isValid;

    m_ext_type_isValid = ::MelodixAPI::fromJsonValue(m_ext_type, json[QString("extType")]);
    m_ext_type_isSet = !json[QString("extType")].isNull() && m_ext_type_isValid;

    m_ip_location_isValid = ::MelodixAPI::fromJsonValue(m_ip_location, json[QString("ipLocation")]);
    m_ip_location_isSet = !json[QString("ipLocation")].isNull() && m_ip_location_isValid;

    m_anonymity_info_isValid = ::MelodixAPI::fromJsonValue(m_anonymity_info, json[QString("anonymityInfo")]);
    m_anonymity_info_isSet = !json[QString("anonymityInfo")].isNull() && m_anonymity_info_isValid;

    m_point_topic_info_isValid = ::MelodixAPI::fromJsonValue(m_point_topic_info, json[QString("pointTopicInfo")]);
    m_point_topic_info_isSet = !json[QString("pointTopicInfo")].isNull() && m_point_topic_info_isValid;

    m_owner_isValid = ::MelodixAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_resource_unique_id_isValid = ::MelodixAPI::fromJsonValue(m_resource_unique_id, json[QString("resourceUniqueId")]);
    m_resource_unique_id_isSet = !json[QString("resourceUniqueId")].isNull() && m_resource_unique_id_isValid;

    m_show_follow_button_isValid = ::MelodixAPI::fromJsonValue(m_show_follow_button, json[QString("showFollowButton")]);
    m_show_follow_button_isSet = !json[QString("showFollowButton")].isNull() && m_show_follow_button_isValid;

    m_tmpl_id_isValid = ::MelodixAPI::fromJsonValue(m_tmpl_id, json[QString("tmplId")]);
    m_tmpl_id_isSet = !json[QString("tmplId")].isNull() && m_tmpl_id_isValid;

    m_expire_time_isValid = ::MelodixAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_pics_isValid = ::MelodixAPI::fromJsonValue(m_pics, json[QString("pics")]);
    m_pics_isSet = !json[QString("pics")].isNull() && m_pics_isValid;

    m_json_isValid = ::MelodixAPI::fromJsonValue(m_json, json[QString("json")]);
    m_json_isSet = !json[QString("json")].isNull() && m_json_isValid;

    m_user_isValid = ::MelodixAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_event_time_isValid = ::MelodixAPI::fromJsonValue(m_event_time, json[QString("eventTime")]);
    m_event_time_isSet = !json[QString("eventTime")].isNull() && m_event_time_isValid;

    m_uuid_isValid = ::MelodixAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_ext_json_info_isValid = ::MelodixAPI::fromJsonValue(m_ext_json_info, json[QString("extJsonInfo")]);
    m_ext_json_info_isSet = !json[QString("extJsonInfo")].isNull() && m_ext_json_info_isValid;

    m_act_id_isValid = ::MelodixAPI::fromJsonValue(m_act_id, json[QString("actId")]);
    m_act_id_isSet = !json[QString("actId")].isNull() && m_act_id_isValid;

    m_show_time_isValid = ::MelodixAPI::fromJsonValue(m_show_time, json[QString("showTime")]);
    m_show_time_isSet = !json[QString("showTime")].isNull() && m_show_time_isValid;

    m_x_info_isValid = ::MelodixAPI::fromJsonValue(m_x_info, json[QString("xInfo")]);
    m_x_info_isSet = !json[QString("xInfo")].isNull() && m_x_info_isValid;

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::MelodixAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString MDGetUserDynamic_200_response_events_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDynamic_200_response_events_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_musician_say_isSet) {
        obj.insert(QString("musicianSay"), ::MelodixAPI::toJsonValue(m_musician_say));
    }
    if (m_act_name_isSet) {
        obj.insert(QString("actName"), ::MelodixAPI::toJsonValue(m_act_name));
    }
    if (m_pendant_data.isSet()) {
        obj.insert(QString("pendantData"), ::MelodixAPI::toJsonValue(m_pendant_data));
    }
    if (m_forward_count_isSet) {
        obj.insert(QString("forwardCount"), ::MelodixAPI::toJsonValue(m_forward_count));
    }
    if (m_discuss_id_isSet) {
        obj.insert(QString("discussId"), ::MelodixAPI::toJsonValue(m_discuss_id));
    }
    if (m_encrypt_user_id_isSet) {
        obj.insert(QString("encryptUserId"), ::MelodixAPI::toJsonValue(m_encrypt_user_id));
    }
    if (m_insite_forward_count_isSet) {
        obj.insert(QString("insiteForwardCount"), ::MelodixAPI::toJsonValue(m_insite_forward_count));
    }
    if (m_info.isSet()) {
        obj.insert(QString("info"), ::MelodixAPI::toJsonValue(m_info));
    }
    if (m_top_event_isSet) {
        obj.insert(QString("topEvent"), ::MelodixAPI::toJsonValue(m_top_event));
    }
    if (m_thread_id_isSet) {
        obj.insert(QString("threadId"), ::MelodixAPI::toJsonValue(m_thread_id));
    }
    if (m_tail_mark.isSet()) {
        obj.insert(QString("tailMark"), ::MelodixAPI::toJsonValue(m_tail_mark));
    }
    if (m_type_desc_isSet) {
        obj.insert(QString("typeDesc"), ::MelodixAPI::toJsonValue(m_type_desc));
    }
    if (m_privacy_setting_isSet) {
        obj.insert(QString("privacySetting"), ::MelodixAPI::toJsonValue(m_privacy_setting));
    }
    if (m_privacy_setting_info.isSet()) {
        obj.insert(QString("privacySettingInfo"), ::MelodixAPI::toJsonValue(m_privacy_setting_info));
    }
    if (m_top_activity_infos.size() > 0) {
        obj.insert(QString("topActivityInfos"), ::MelodixAPI::toJsonValue(m_top_activity_infos));
    }
    if (m_bottom_activity_infos.size() > 0) {
        obj.insert(QString("bottomActivityInfos"), ::MelodixAPI::toJsonValue(m_bottom_activity_infos));
    }
    if (m_more_isSet) {
        obj.insert(QString("more"), ::MelodixAPI::toJsonValue(m_more));
    }
    if (m_relation_topic_isSet) {
        obj.insert(QString("relationTopic"), ::MelodixAPI::toJsonValue(m_relation_topic));
    }
    if (m_ext_type_isSet) {
        obj.insert(QString("extType"), ::MelodixAPI::toJsonValue(m_ext_type));
    }
    if (m_ip_location.isSet()) {
        obj.insert(QString("ipLocation"), ::MelodixAPI::toJsonValue(m_ip_location));
    }
    if (m_anonymity_info.isSet()) {
        obj.insert(QString("anonymityInfo"), ::MelodixAPI::toJsonValue(m_anonymity_info));
    }
    if (m_point_topic_info_isSet) {
        obj.insert(QString("pointTopicInfo"), ::MelodixAPI::toJsonValue(m_point_topic_info));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::MelodixAPI::toJsonValue(m_owner));
    }
    if (m_resource_unique_id_isSet) {
        obj.insert(QString("resourceUniqueId"), ::MelodixAPI::toJsonValue(m_resource_unique_id));
    }
    if (m_show_follow_button_isSet) {
        obj.insert(QString("showFollowButton"), ::MelodixAPI::toJsonValue(m_show_follow_button));
    }
    if (m_tmpl_id_isSet) {
        obj.insert(QString("tmplId"), ::MelodixAPI::toJsonValue(m_tmpl_id));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::MelodixAPI::toJsonValue(m_expire_time));
    }
    if (m_pics.size() > 0) {
        obj.insert(QString("pics"), ::MelodixAPI::toJsonValue(m_pics));
    }
    if (m_json_isSet) {
        obj.insert(QString("json"), ::MelodixAPI::toJsonValue(m_json));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::MelodixAPI::toJsonValue(m_user));
    }
    if (m_event_time_isSet) {
        obj.insert(QString("eventTime"), ::MelodixAPI::toJsonValue(m_event_time));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::MelodixAPI::toJsonValue(m_uuid));
    }
    if (m_ext_json_info.isSet()) {
        obj.insert(QString("extJsonInfo"), ::MelodixAPI::toJsonValue(m_ext_json_info));
    }
    if (m_act_id_isSet) {
        obj.insert(QString("actId"), ::MelodixAPI::toJsonValue(m_act_id));
    }
    if (m_show_time_isSet) {
        obj.insert(QString("showTime"), ::MelodixAPI::toJsonValue(m_show_time));
    }
    if (m_x_info.isSet()) {
        obj.insert(QString("xInfo"), ::MelodixAPI::toJsonValue(m_x_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::MelodixAPI::toJsonValue(m_type));
    }
    return obj;
}

bool MDGetUserDynamic_200_response_events_inner::isMusicianSay() const {
    return m_musician_say;
}
void MDGetUserDynamic_200_response_events_inner::setMusicianSay(const bool &musician_say) {
    m_musician_say = musician_say;
    m_musician_say_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_musician_say_Set() const{
    return m_musician_say_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_musician_say_Valid() const{
    return m_musician_say_isValid;
}

QString MDGetUserDynamic_200_response_events_inner::getActName() const {
    return m_act_name;
}
void MDGetUserDynamic_200_response_events_inner::setActName(const QString &act_name) {
    m_act_name = act_name;
    m_act_name_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_act_name_Set() const{
    return m_act_name_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_act_name_Valid() const{
    return m_act_name_isValid;
}

MDGetUserDynamic_200_response_events_inner_pendantData MDGetUserDynamic_200_response_events_inner::getPendantData() const {
    return m_pendant_data;
}
void MDGetUserDynamic_200_response_events_inner::setPendantData(const MDGetUserDynamic_200_response_events_inner_pendantData &pendant_data) {
    m_pendant_data = pendant_data;
    m_pendant_data_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_pendant_data_Set() const{
    return m_pendant_data_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_pendant_data_Valid() const{
    return m_pendant_data_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner::getForwardCount() const {
    return m_forward_count;
}
void MDGetUserDynamic_200_response_events_inner::setForwardCount(const qint32 &forward_count) {
    m_forward_count = forward_count;
    m_forward_count_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_forward_count_Set() const{
    return m_forward_count_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_forward_count_Valid() const{
    return m_forward_count_isValid;
}

QString MDGetUserDynamic_200_response_events_inner::getDiscussId() const {
    return m_discuss_id;
}
void MDGetUserDynamic_200_response_events_inner::setDiscussId(const QString &discuss_id) {
    m_discuss_id = discuss_id;
    m_discuss_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_discuss_id_Set() const{
    return m_discuss_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_discuss_id_Valid() const{
    return m_discuss_id_isValid;
}

QString MDGetUserDynamic_200_response_events_inner::getEncryptUserId() const {
    return m_encrypt_user_id;
}
void MDGetUserDynamic_200_response_events_inner::setEncryptUserId(const QString &encrypt_user_id) {
    m_encrypt_user_id = encrypt_user_id;
    m_encrypt_user_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_encrypt_user_id_Set() const{
    return m_encrypt_user_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_encrypt_user_id_Valid() const{
    return m_encrypt_user_id_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner::getInsiteForwardCount() const {
    return m_insite_forward_count;
}
void MDGetUserDynamic_200_response_events_inner::setInsiteForwardCount(const qint32 &insite_forward_count) {
    m_insite_forward_count = insite_forward_count;
    m_insite_forward_count_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_insite_forward_count_Set() const{
    return m_insite_forward_count_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_insite_forward_count_Valid() const{
    return m_insite_forward_count_isValid;
}

MDGetUserDynamic_200_response_events_inner_info MDGetUserDynamic_200_response_events_inner::getInfo() const {
    return m_info;
}
void MDGetUserDynamic_200_response_events_inner::setInfo(const MDGetUserDynamic_200_response_events_inner_info &info) {
    m_info = info;
    m_info_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_info_Set() const{
    return m_info_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_info_Valid() const{
    return m_info_isValid;
}

bool MDGetUserDynamic_200_response_events_inner::isTopEvent() const {
    return m_top_event;
}
void MDGetUserDynamic_200_response_events_inner::setTopEvent(const bool &top_event) {
    m_top_event = top_event;
    m_top_event_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_top_event_Set() const{
    return m_top_event_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_top_event_Valid() const{
    return m_top_event_isValid;
}

QString MDGetUserDynamic_200_response_events_inner::getThreadId() const {
    return m_thread_id;
}
void MDGetUserDynamic_200_response_events_inner::setThreadId(const QString &thread_id) {
    m_thread_id = thread_id;
    m_thread_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_thread_id_Set() const{
    return m_thread_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_thread_id_Valid() const{
    return m_thread_id_isValid;
}

MDGetUserDynamic_200_response_events_inner_tailMark MDGetUserDynamic_200_response_events_inner::getTailMark() const {
    return m_tail_mark;
}
void MDGetUserDynamic_200_response_events_inner::setTailMark(const MDGetUserDynamic_200_response_events_inner_tailMark &tail_mark) {
    m_tail_mark = tail_mark;
    m_tail_mark_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_tail_mark_Set() const{
    return m_tail_mark_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_tail_mark_Valid() const{
    return m_tail_mark_isValid;
}

QString MDGetUserDynamic_200_response_events_inner::getTypeDesc() const {
    return m_type_desc;
}
void MDGetUserDynamic_200_response_events_inner::setTypeDesc(const QString &type_desc) {
    m_type_desc = type_desc;
    m_type_desc_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_type_desc_Set() const{
    return m_type_desc_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_type_desc_Valid() const{
    return m_type_desc_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner::getPrivacySetting() const {
    return m_privacy_setting;
}
void MDGetUserDynamic_200_response_events_inner::setPrivacySetting(const qint32 &privacy_setting) {
    m_privacy_setting = privacy_setting;
    m_privacy_setting_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_privacy_setting_Set() const{
    return m_privacy_setting_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_privacy_setting_Valid() const{
    return m_privacy_setting_isValid;
}

MDGetUserDynamic_200_response_events_inner_privacySettingInfo MDGetUserDynamic_200_response_events_inner::getPrivacySettingInfo() const {
    return m_privacy_setting_info;
}
void MDGetUserDynamic_200_response_events_inner::setPrivacySettingInfo(const MDGetUserDynamic_200_response_events_inner_privacySettingInfo &privacy_setting_info) {
    m_privacy_setting_info = privacy_setting_info;
    m_privacy_setting_info_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_privacy_setting_info_Set() const{
    return m_privacy_setting_info_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_privacy_setting_info_Valid() const{
    return m_privacy_setting_info_isValid;
}

QList<QString> MDGetUserDynamic_200_response_events_inner::getTopActivityInfos() const {
    return m_top_activity_infos;
}
void MDGetUserDynamic_200_response_events_inner::setTopActivityInfos(const QList<QString> &top_activity_infos) {
    m_top_activity_infos = top_activity_infos;
    m_top_activity_infos_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_top_activity_infos_Set() const{
    return m_top_activity_infos_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_top_activity_infos_Valid() const{
    return m_top_activity_infos_isValid;
}

QList<MDGetUserDynamic_200_response_events_inner_bottomActivityInfos_inner> MDGetUserDynamic_200_response_events_inner::getBottomActivityInfos() const {
    return m_bottom_activity_infos;
}
void MDGetUserDynamic_200_response_events_inner::setBottomActivityInfos(const QList<MDGetUserDynamic_200_response_events_inner_bottomActivityInfos_inner> &bottom_activity_infos) {
    m_bottom_activity_infos = bottom_activity_infos;
    m_bottom_activity_infos_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_bottom_activity_infos_Set() const{
    return m_bottom_activity_infos_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_bottom_activity_infos_Valid() const{
    return m_bottom_activity_infos_isValid;
}

bool MDGetUserDynamic_200_response_events_inner::isMore() const {
    return m_more;
}
void MDGetUserDynamic_200_response_events_inner::setMore(const bool &more) {
    m_more = more;
    m_more_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_more_Set() const{
    return m_more_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_more_Valid() const{
    return m_more_isValid;
}

bool MDGetUserDynamic_200_response_events_inner::isRelationTopic() const {
    return m_relation_topic;
}
void MDGetUserDynamic_200_response_events_inner::setRelationTopic(const bool &relation_topic) {
    m_relation_topic = relation_topic;
    m_relation_topic_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_relation_topic_Set() const{
    return m_relation_topic_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_relation_topic_Valid() const{
    return m_relation_topic_isValid;
}

QString MDGetUserDynamic_200_response_events_inner::getExtType() const {
    return m_ext_type;
}
void MDGetUserDynamic_200_response_events_inner::setExtType(const QString &ext_type) {
    m_ext_type = ext_type;
    m_ext_type_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_ext_type_Set() const{
    return m_ext_type_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_ext_type_Valid() const{
    return m_ext_type_isValid;
}

MDGetUserDynamic_200_response_events_inner_ipLocation MDGetUserDynamic_200_response_events_inner::getIpLocation() const {
    return m_ip_location;
}
void MDGetUserDynamic_200_response_events_inner::setIpLocation(const MDGetUserDynamic_200_response_events_inner_ipLocation &ip_location) {
    m_ip_location = ip_location;
    m_ip_location_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_ip_location_Set() const{
    return m_ip_location_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_ip_location_Valid() const{
    return m_ip_location_isValid;
}

MDGetUserDynamic_200_response_events_inner_anonymityInfo MDGetUserDynamic_200_response_events_inner::getAnonymityInfo() const {
    return m_anonymity_info;
}
void MDGetUserDynamic_200_response_events_inner::setAnonymityInfo(const MDGetUserDynamic_200_response_events_inner_anonymityInfo &anonymity_info) {
    m_anonymity_info = anonymity_info;
    m_anonymity_info_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_anonymity_info_Set() const{
    return m_anonymity_info_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_anonymity_info_Valid() const{
    return m_anonymity_info_isValid;
}

MDObject MDGetUserDynamic_200_response_events_inner::getPointTopicInfo() const {
    return m_point_topic_info;
}
void MDGetUserDynamic_200_response_events_inner::setPointTopicInfo(const MDObject &point_topic_info) {
    m_point_topic_info = point_topic_info;
    m_point_topic_info_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_point_topic_info_Set() const{
    return m_point_topic_info_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_point_topic_info_Valid() const{
    return m_point_topic_info_isValid;
}

bool MDGetUserDynamic_200_response_events_inner::isOwner() const {
    return m_owner;
}
void MDGetUserDynamic_200_response_events_inner::setOwner(const bool &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_owner_Set() const{
    return m_owner_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_owner_Valid() const{
    return m_owner_isValid;
}

QString MDGetUserDynamic_200_response_events_inner::getResourceUniqueId() const {
    return m_resource_unique_id;
}
void MDGetUserDynamic_200_response_events_inner::setResourceUniqueId(const QString &resource_unique_id) {
    m_resource_unique_id = resource_unique_id;
    m_resource_unique_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_resource_unique_id_Set() const{
    return m_resource_unique_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_resource_unique_id_Valid() const{
    return m_resource_unique_id_isValid;
}

bool MDGetUserDynamic_200_response_events_inner::isShowFollowButton() const {
    return m_show_follow_button;
}
void MDGetUserDynamic_200_response_events_inner::setShowFollowButton(const bool &show_follow_button) {
    m_show_follow_button = show_follow_button;
    m_show_follow_button_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_show_follow_button_Set() const{
    return m_show_follow_button_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_show_follow_button_Valid() const{
    return m_show_follow_button_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner::getTmplId() const {
    return m_tmpl_id;
}
void MDGetUserDynamic_200_response_events_inner::setTmplId(const qint32 &tmpl_id) {
    m_tmpl_id = tmpl_id;
    m_tmpl_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_tmpl_id_Set() const{
    return m_tmpl_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_tmpl_id_Valid() const{
    return m_tmpl_id_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner::getExpireTime() const {
    return m_expire_time;
}
void MDGetUserDynamic_200_response_events_inner::setExpireTime(const qint32 &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QList<MDGetUserDynamic_200_response_events_inner_pics_inner> MDGetUserDynamic_200_response_events_inner::getPics() const {
    return m_pics;
}
void MDGetUserDynamic_200_response_events_inner::setPics(const QList<MDGetUserDynamic_200_response_events_inner_pics_inner> &pics) {
    m_pics = pics;
    m_pics_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_pics_Set() const{
    return m_pics_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_pics_Valid() const{
    return m_pics_isValid;
}

QString MDGetUserDynamic_200_response_events_inner::getJson() const {
    return m_json;
}
void MDGetUserDynamic_200_response_events_inner::setJson(const QString &json) {
    m_json = json;
    m_json_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_json_Set() const{
    return m_json_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_json_Valid() const{
    return m_json_isValid;
}

MDGetUserDynamic_200_response_events_inner_user MDGetUserDynamic_200_response_events_inner::getUser() const {
    return m_user;
}
void MDGetUserDynamic_200_response_events_inner::setUser(const MDGetUserDynamic_200_response_events_inner_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_user_Set() const{
    return m_user_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_user_Valid() const{
    return m_user_isValid;
}

double MDGetUserDynamic_200_response_events_inner::getEventTime() const {
    return m_event_time;
}
void MDGetUserDynamic_200_response_events_inner::setEventTime(const double &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_event_time_Valid() const{
    return m_event_time_isValid;
}

QString MDGetUserDynamic_200_response_events_inner::getUuid() const {
    return m_uuid;
}
void MDGetUserDynamic_200_response_events_inner::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_uuid_Valid() const{
    return m_uuid_isValid;
}

MDGetUserDynamic_200_response_events_inner_extJsonInfo MDGetUserDynamic_200_response_events_inner::getExtJsonInfo() const {
    return m_ext_json_info;
}
void MDGetUserDynamic_200_response_events_inner::setExtJsonInfo(const MDGetUserDynamic_200_response_events_inner_extJsonInfo &ext_json_info) {
    m_ext_json_info = ext_json_info;
    m_ext_json_info_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_ext_json_info_Set() const{
    return m_ext_json_info_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_ext_json_info_Valid() const{
    return m_ext_json_info_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner::getActId() const {
    return m_act_id;
}
void MDGetUserDynamic_200_response_events_inner::setActId(const qint32 &act_id) {
    m_act_id = act_id;
    m_act_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_act_id_Set() const{
    return m_act_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_act_id_Valid() const{
    return m_act_id_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner::getShowTime() const {
    return m_show_time;
}
void MDGetUserDynamic_200_response_events_inner::setShowTime(const qint32 &show_time) {
    m_show_time = show_time;
    m_show_time_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_show_time_Set() const{
    return m_show_time_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_show_time_Valid() const{
    return m_show_time_isValid;
}

MDGetUserDynamic_200_response_events_inner_xInfo MDGetUserDynamic_200_response_events_inner::getXInfo() const {
    return m_x_info;
}
void MDGetUserDynamic_200_response_events_inner::setXInfo(const MDGetUserDynamic_200_response_events_inner_xInfo &x_info) {
    m_x_info = x_info;
    m_x_info_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_x_info_Set() const{
    return m_x_info_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_x_info_Valid() const{
    return m_x_info_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner::getId() const {
    return m_id;
}
void MDGetUserDynamic_200_response_events_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_id_Valid() const{
    return m_id_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner::getType() const {
    return m_type;
}
void MDGetUserDynamic_200_response_events_inner::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner::is_type_Set() const{
    return m_type_isSet;
}

bool MDGetUserDynamic_200_response_events_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool MDGetUserDynamic_200_response_events_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_musician_say_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_act_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pendant_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discuss_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypt_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insite_forward_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tail_mark.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_setting_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_activity_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bottom_activity_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anonymity_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_topic_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_follow_button_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tmpl_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_json_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_act_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDynamic_200_response_events_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_musician_say_isValid && m_act_name_isValid && m_pendant_data_isValid && m_forward_count_isValid && m_discuss_id_isValid && m_encrypt_user_id_isValid && m_insite_forward_count_isValid && m_info_isValid && m_top_event_isValid && m_thread_id_isValid && m_tail_mark_isValid && m_type_desc_isValid && m_privacy_setting_isValid && m_privacy_setting_info_isValid && m_top_activity_infos_isValid && m_bottom_activity_infos_isValid && m_more_isValid && m_relation_topic_isValid && m_ext_type_isValid && m_ip_location_isValid && m_anonymity_info_isValid && m_point_topic_info_isValid && m_owner_isValid && m_resource_unique_id_isValid && m_show_follow_button_isValid && m_tmpl_id_isValid && m_expire_time_isValid && m_pics_isValid && m_json_isValid && m_user_isValid && m_event_time_isValid && m_uuid_isValid && m_ext_json_info_isValid && m_act_id_isValid && m_show_time_isValid && m_x_info_isValid && m_id_isValid && m_type_isValid && true;
}

} // namespace MelodixAPI
