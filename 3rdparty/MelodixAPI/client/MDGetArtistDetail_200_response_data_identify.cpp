/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetArtistDetail_200_response_data_identify.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetArtistDetail_200_response_data_identify::MDGetArtistDetail_200_response_data_identify(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetArtistDetail_200_response_data_identify::MDGetArtistDetail_200_response_data_identify() {
    this->initializeModel();
}

MDGetArtistDetail_200_response_data_identify::~MDGetArtistDetail_200_response_data_identify() {}

void MDGetArtistDetail_200_response_data_identify::initializeModel() {

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_image_desc_isSet = false;
    m_image_desc_isValid = false;

    m_action_url_isSet = false;
    m_action_url_isValid = false;
}

void MDGetArtistDetail_200_response_data_identify::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetArtistDetail_200_response_data_identify::fromJsonObject(QJsonObject json) {

    m_image_url_isValid = ::MelodixAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_image_desc_isValid = ::MelodixAPI::fromJsonValue(m_image_desc, json[QString("imageDesc")]);
    m_image_desc_isSet = !json[QString("imageDesc")].isNull() && m_image_desc_isValid;

    m_action_url_isValid = ::MelodixAPI::fromJsonValue(m_action_url, json[QString("actionUrl")]);
    m_action_url_isSet = !json[QString("actionUrl")].isNull() && m_action_url_isValid;
}

QString MDGetArtistDetail_200_response_data_identify::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetArtistDetail_200_response_data_identify::asJsonObject() const {
    QJsonObject obj;
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::MelodixAPI::toJsonValue(m_image_url));
    }
    if (m_image_desc_isSet) {
        obj.insert(QString("imageDesc"), ::MelodixAPI::toJsonValue(m_image_desc));
    }
    if (m_action_url_isSet) {
        obj.insert(QString("actionUrl"), ::MelodixAPI::toJsonValue(m_action_url));
    }
    return obj;
}

QString MDGetArtistDetail_200_response_data_identify::getImageUrl() const {
    return m_image_url;
}
void MDGetArtistDetail_200_response_data_identify::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool MDGetArtistDetail_200_response_data_identify::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool MDGetArtistDetail_200_response_data_identify::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString MDGetArtistDetail_200_response_data_identify::getImageDesc() const {
    return m_image_desc;
}
void MDGetArtistDetail_200_response_data_identify::setImageDesc(const QString &image_desc) {
    m_image_desc = image_desc;
    m_image_desc_isSet = true;
}

bool MDGetArtistDetail_200_response_data_identify::is_image_desc_Set() const{
    return m_image_desc_isSet;
}

bool MDGetArtistDetail_200_response_data_identify::is_image_desc_Valid() const{
    return m_image_desc_isValid;
}

QString MDGetArtistDetail_200_response_data_identify::getActionUrl() const {
    return m_action_url;
}
void MDGetArtistDetail_200_response_data_identify::setActionUrl(const QString &action_url) {
    m_action_url = action_url;
    m_action_url_isSet = true;
}

bool MDGetArtistDetail_200_response_data_identify::is_action_url_Set() const{
    return m_action_url_isSet;
}

bool MDGetArtistDetail_200_response_data_identify::is_action_url_Valid() const{
    return m_action_url_isValid;
}

bool MDGetArtistDetail_200_response_data_identify::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetArtistDetail_200_response_data_identify::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_url_isValid && m_image_desc_isValid && m_action_url_isValid && true;
}

} // namespace MelodixAPI
