/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetSimiMv_200_response_mvs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetSimiMv_200_response_mvs_inner::MDGetSimiMv_200_response_mvs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetSimiMv_200_response_mvs_inner::MDGetSimiMv_200_response_mvs_inner() {
    this->initializeModel();
}

MDGetSimiMv_200_response_mvs_inner::~MDGetSimiMv_200_response_mvs_inner() {}

void MDGetSimiMv_200_response_mvs_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_cover_isSet = false;
    m_cover_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_play_count_isSet = false;
    m_play_count_isValid = false;

    m_brief_desc_isSet = false;
    m_brief_desc_isValid = false;

    m_artist_name_isSet = false;
    m_artist_name_isValid = false;

    m_artist_id_isSet = false;
    m_artist_id_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_mark_isSet = false;
    m_mark_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_alg_isSet = false;
    m_alg_isValid = false;
}

void MDGetSimiMv_200_response_mvs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetSimiMv_200_response_mvs_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_cover_isValid = ::MelodixAPI::fromJsonValue(m_cover, json[QString("cover")]);
    m_cover_isSet = !json[QString("cover")].isNull() && m_cover_isValid;

    m_name_isValid = ::MelodixAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_play_count_isValid = ::MelodixAPI::fromJsonValue(m_play_count, json[QString("playCount")]);
    m_play_count_isSet = !json[QString("playCount")].isNull() && m_play_count_isValid;

    m_brief_desc_isValid = ::MelodixAPI::fromJsonValue(m_brief_desc, json[QString("briefDesc")]);
    m_brief_desc_isSet = !json[QString("briefDesc")].isNull() && m_brief_desc_isValid;

    m_artist_name_isValid = ::MelodixAPI::fromJsonValue(m_artist_name, json[QString("artistName")]);
    m_artist_name_isSet = !json[QString("artistName")].isNull() && m_artist_name_isValid;

    m_artist_id_isValid = ::MelodixAPI::fromJsonValue(m_artist_id, json[QString("artistId")]);
    m_artist_id_isSet = !json[QString("artistId")].isNull() && m_artist_id_isValid;

    m_duration_isValid = ::MelodixAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_mark_isValid = ::MelodixAPI::fromJsonValue(m_mark, json[QString("mark")]);
    m_mark_isSet = !json[QString("mark")].isNull() && m_mark_isValid;

    m_artists_isValid = ::MelodixAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_alg_isValid = ::MelodixAPI::fromJsonValue(m_alg, json[QString("alg")]);
    m_alg_isSet = !json[QString("alg")].isNull() && m_alg_isValid;
}

QString MDGetSimiMv_200_response_mvs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetSimiMv_200_response_mvs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_cover_isSet) {
        obj.insert(QString("cover"), ::MelodixAPI::toJsonValue(m_cover));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::MelodixAPI::toJsonValue(m_name));
    }
    if (m_play_count_isSet) {
        obj.insert(QString("playCount"), ::MelodixAPI::toJsonValue(m_play_count));
    }
    if (m_brief_desc_isSet) {
        obj.insert(QString("briefDesc"), ::MelodixAPI::toJsonValue(m_brief_desc));
    }
    if (m_artist_name_isSet) {
        obj.insert(QString("artistName"), ::MelodixAPI::toJsonValue(m_artist_name));
    }
    if (m_artist_id_isSet) {
        obj.insert(QString("artistId"), ::MelodixAPI::toJsonValue(m_artist_id));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::MelodixAPI::toJsonValue(m_duration));
    }
    if (m_mark_isSet) {
        obj.insert(QString("mark"), ::MelodixAPI::toJsonValue(m_mark));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::MelodixAPI::toJsonValue(m_artists));
    }
    if (m_alg_isSet) {
        obj.insert(QString("alg"), ::MelodixAPI::toJsonValue(m_alg));
    }
    return obj;
}

qint32 MDGetSimiMv_200_response_mvs_inner::getId() const {
    return m_id;
}
void MDGetSimiMv_200_response_mvs_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetSimiMv_200_response_mvs_inner::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetSimiMv_200_response_mvs_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString MDGetSimiMv_200_response_mvs_inner::getCover() const {
    return m_cover;
}
void MDGetSimiMv_200_response_mvs_inner::setCover(const QString &cover) {
    m_cover = cover;
    m_cover_isSet = true;
}

bool MDGetSimiMv_200_response_mvs_inner::is_cover_Set() const{
    return m_cover_isSet;
}

bool MDGetSimiMv_200_response_mvs_inner::is_cover_Valid() const{
    return m_cover_isValid;
}

QString MDGetSimiMv_200_response_mvs_inner::getName() const {
    return m_name;
}
void MDGetSimiMv_200_response_mvs_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool MDGetSimiMv_200_response_mvs_inner::is_name_Set() const{
    return m_name_isSet;
}

bool MDGetSimiMv_200_response_mvs_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 MDGetSimiMv_200_response_mvs_inner::getPlayCount() const {
    return m_play_count;
}
void MDGetSimiMv_200_response_mvs_inner::setPlayCount(const qint32 &play_count) {
    m_play_count = play_count;
    m_play_count_isSet = true;
}

bool MDGetSimiMv_200_response_mvs_inner::is_play_count_Set() const{
    return m_play_count_isSet;
}

bool MDGetSimiMv_200_response_mvs_inner::is_play_count_Valid() const{
    return m_play_count_isValid;
}

QString MDGetSimiMv_200_response_mvs_inner::getBriefDesc() const {
    return m_brief_desc;
}
void MDGetSimiMv_200_response_mvs_inner::setBriefDesc(const QString &brief_desc) {
    m_brief_desc = brief_desc;
    m_brief_desc_isSet = true;
}

bool MDGetSimiMv_200_response_mvs_inner::is_brief_desc_Set() const{
    return m_brief_desc_isSet;
}

bool MDGetSimiMv_200_response_mvs_inner::is_brief_desc_Valid() const{
    return m_brief_desc_isValid;
}

QString MDGetSimiMv_200_response_mvs_inner::getArtistName() const {
    return m_artist_name;
}
void MDGetSimiMv_200_response_mvs_inner::setArtistName(const QString &artist_name) {
    m_artist_name = artist_name;
    m_artist_name_isSet = true;
}

bool MDGetSimiMv_200_response_mvs_inner::is_artist_name_Set() const{
    return m_artist_name_isSet;
}

bool MDGetSimiMv_200_response_mvs_inner::is_artist_name_Valid() const{
    return m_artist_name_isValid;
}

qint32 MDGetSimiMv_200_response_mvs_inner::getArtistId() const {
    return m_artist_id;
}
void MDGetSimiMv_200_response_mvs_inner::setArtistId(const qint32 &artist_id) {
    m_artist_id = artist_id;
    m_artist_id_isSet = true;
}

bool MDGetSimiMv_200_response_mvs_inner::is_artist_id_Set() const{
    return m_artist_id_isSet;
}

bool MDGetSimiMv_200_response_mvs_inner::is_artist_id_Valid() const{
    return m_artist_id_isValid;
}

qint32 MDGetSimiMv_200_response_mvs_inner::getDuration() const {
    return m_duration;
}
void MDGetSimiMv_200_response_mvs_inner::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool MDGetSimiMv_200_response_mvs_inner::is_duration_Set() const{
    return m_duration_isSet;
}

bool MDGetSimiMv_200_response_mvs_inner::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 MDGetSimiMv_200_response_mvs_inner::getMark() const {
    return m_mark;
}
void MDGetSimiMv_200_response_mvs_inner::setMark(const qint32 &mark) {
    m_mark = mark;
    m_mark_isSet = true;
}

bool MDGetSimiMv_200_response_mvs_inner::is_mark_Set() const{
    return m_mark_isSet;
}

bool MDGetSimiMv_200_response_mvs_inner::is_mark_Valid() const{
    return m_mark_isValid;
}

QList<MDGetSimiMv_200_response_mvs_inner_artists_inner> MDGetSimiMv_200_response_mvs_inner::getArtists() const {
    return m_artists;
}
void MDGetSimiMv_200_response_mvs_inner::setArtists(const QList<MDGetSimiMv_200_response_mvs_inner_artists_inner> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool MDGetSimiMv_200_response_mvs_inner::is_artists_Set() const{
    return m_artists_isSet;
}

bool MDGetSimiMv_200_response_mvs_inner::is_artists_Valid() const{
    return m_artists_isValid;
}

QString MDGetSimiMv_200_response_mvs_inner::getAlg() const {
    return m_alg;
}
void MDGetSimiMv_200_response_mvs_inner::setAlg(const QString &alg) {
    m_alg = alg;
    m_alg_isSet = true;
}

bool MDGetSimiMv_200_response_mvs_inner::is_alg_Set() const{
    return m_alg_isSet;
}

bool MDGetSimiMv_200_response_mvs_inner::is_alg_Valid() const{
    return m_alg_isValid;
}

bool MDGetSimiMv_200_response_mvs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brief_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alg_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetSimiMv_200_response_mvs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_cover_isValid && m_name_isValid && m_play_count_isValid && m_brief_desc_isValid && m_artist_name_isValid && m_artist_id_isValid && m_duration_isValid && m_mark_isValid && m_artists_isValid && m_alg_isValid && true;
}

} // namespace MelodixAPI
