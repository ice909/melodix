/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetMvUrl_200_response_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetMvUrl_200_response_data::MDGetMvUrl_200_response_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetMvUrl_200_response_data::MDGetMvUrl_200_response_data() {
    this->initializeModel();
}

MDGetMvUrl_200_response_data::~MDGetMvUrl_200_response_data() {}

void MDGetMvUrl_200_response_data::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_r_isSet = false;
    m_r_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_md5_isSet = false;
    m_md5_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_expi_isSet = false;
    m_expi_isValid = false;

    m_fee_isSet = false;
    m_fee_isValid = false;

    m_mv_fee_isSet = false;
    m_mv_fee_isValid = false;

    m_st_isSet = false;
    m_st_isValid = false;

    m_msg_isSet = false;
    m_msg_isValid = false;
}

void MDGetMvUrl_200_response_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetMvUrl_200_response_data::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_url_isValid = ::MelodixAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_r_isValid = ::MelodixAPI::fromJsonValue(m_r, json[QString("r")]);
    m_r_isSet = !json[QString("r")].isNull() && m_r_isValid;

    m_size_isValid = ::MelodixAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_md5_isValid = ::MelodixAPI::fromJsonValue(m_md5, json[QString("md5")]);
    m_md5_isSet = !json[QString("md5")].isNull() && m_md5_isValid;

    m_code_isValid = ::MelodixAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_expi_isValid = ::MelodixAPI::fromJsonValue(m_expi, json[QString("expi")]);
    m_expi_isSet = !json[QString("expi")].isNull() && m_expi_isValid;

    m_fee_isValid = ::MelodixAPI::fromJsonValue(m_fee, json[QString("fee")]);
    m_fee_isSet = !json[QString("fee")].isNull() && m_fee_isValid;

    m_mv_fee_isValid = ::MelodixAPI::fromJsonValue(m_mv_fee, json[QString("mvFee")]);
    m_mv_fee_isSet = !json[QString("mvFee")].isNull() && m_mv_fee_isValid;

    m_st_isValid = ::MelodixAPI::fromJsonValue(m_st, json[QString("st")]);
    m_st_isSet = !json[QString("st")].isNull() && m_st_isValid;

    m_msg_isValid = ::MelodixAPI::fromJsonValue(m_msg, json[QString("msg")]);
    m_msg_isSet = !json[QString("msg")].isNull() && m_msg_isValid;
}

QString MDGetMvUrl_200_response_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetMvUrl_200_response_data::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::MelodixAPI::toJsonValue(m_url));
    }
    if (m_r_isSet) {
        obj.insert(QString("r"), ::MelodixAPI::toJsonValue(m_r));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::MelodixAPI::toJsonValue(m_size));
    }
    if (m_md5_isSet) {
        obj.insert(QString("md5"), ::MelodixAPI::toJsonValue(m_md5));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::MelodixAPI::toJsonValue(m_code));
    }
    if (m_expi_isSet) {
        obj.insert(QString("expi"), ::MelodixAPI::toJsonValue(m_expi));
    }
    if (m_fee_isSet) {
        obj.insert(QString("fee"), ::MelodixAPI::toJsonValue(m_fee));
    }
    if (m_mv_fee_isSet) {
        obj.insert(QString("mvFee"), ::MelodixAPI::toJsonValue(m_mv_fee));
    }
    if (m_st_isSet) {
        obj.insert(QString("st"), ::MelodixAPI::toJsonValue(m_st));
    }
    if (m_msg_isSet) {
        obj.insert(QString("msg"), ::MelodixAPI::toJsonValue(m_msg));
    }
    return obj;
}

qint32 MDGetMvUrl_200_response_data::getId() const {
    return m_id;
}
void MDGetMvUrl_200_response_data::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetMvUrl_200_response_data::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetMvUrl_200_response_data::is_id_Valid() const{
    return m_id_isValid;
}

QString MDGetMvUrl_200_response_data::getUrl() const {
    return m_url;
}
void MDGetMvUrl_200_response_data::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool MDGetMvUrl_200_response_data::is_url_Set() const{
    return m_url_isSet;
}

bool MDGetMvUrl_200_response_data::is_url_Valid() const{
    return m_url_isValid;
}

qint32 MDGetMvUrl_200_response_data::getR() const {
    return m_r;
}
void MDGetMvUrl_200_response_data::setR(const qint32 &r) {
    m_r = r;
    m_r_isSet = true;
}

bool MDGetMvUrl_200_response_data::is_r_Set() const{
    return m_r_isSet;
}

bool MDGetMvUrl_200_response_data::is_r_Valid() const{
    return m_r_isValid;
}

qint32 MDGetMvUrl_200_response_data::getSize() const {
    return m_size;
}
void MDGetMvUrl_200_response_data::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool MDGetMvUrl_200_response_data::is_size_Set() const{
    return m_size_isSet;
}

bool MDGetMvUrl_200_response_data::is_size_Valid() const{
    return m_size_isValid;
}

QString MDGetMvUrl_200_response_data::getMd5() const {
    return m_md5;
}
void MDGetMvUrl_200_response_data::setMd5(const QString &md5) {
    m_md5 = md5;
    m_md5_isSet = true;
}

bool MDGetMvUrl_200_response_data::is_md5_Set() const{
    return m_md5_isSet;
}

bool MDGetMvUrl_200_response_data::is_md5_Valid() const{
    return m_md5_isValid;
}

qint32 MDGetMvUrl_200_response_data::getCode() const {
    return m_code;
}
void MDGetMvUrl_200_response_data::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool MDGetMvUrl_200_response_data::is_code_Set() const{
    return m_code_isSet;
}

bool MDGetMvUrl_200_response_data::is_code_Valid() const{
    return m_code_isValid;
}

qint32 MDGetMvUrl_200_response_data::getExpi() const {
    return m_expi;
}
void MDGetMvUrl_200_response_data::setExpi(const qint32 &expi) {
    m_expi = expi;
    m_expi_isSet = true;
}

bool MDGetMvUrl_200_response_data::is_expi_Set() const{
    return m_expi_isSet;
}

bool MDGetMvUrl_200_response_data::is_expi_Valid() const{
    return m_expi_isValid;
}

qint32 MDGetMvUrl_200_response_data::getFee() const {
    return m_fee;
}
void MDGetMvUrl_200_response_data::setFee(const qint32 &fee) {
    m_fee = fee;
    m_fee_isSet = true;
}

bool MDGetMvUrl_200_response_data::is_fee_Set() const{
    return m_fee_isSet;
}

bool MDGetMvUrl_200_response_data::is_fee_Valid() const{
    return m_fee_isValid;
}

qint32 MDGetMvUrl_200_response_data::getMvFee() const {
    return m_mv_fee;
}
void MDGetMvUrl_200_response_data::setMvFee(const qint32 &mv_fee) {
    m_mv_fee = mv_fee;
    m_mv_fee_isSet = true;
}

bool MDGetMvUrl_200_response_data::is_mv_fee_Set() const{
    return m_mv_fee_isSet;
}

bool MDGetMvUrl_200_response_data::is_mv_fee_Valid() const{
    return m_mv_fee_isValid;
}

qint32 MDGetMvUrl_200_response_data::getSt() const {
    return m_st;
}
void MDGetMvUrl_200_response_data::setSt(const qint32 &st) {
    m_st = st;
    m_st_isSet = true;
}

bool MDGetMvUrl_200_response_data::is_st_Set() const{
    return m_st_isSet;
}

bool MDGetMvUrl_200_response_data::is_st_Valid() const{
    return m_st_isValid;
}

QString MDGetMvUrl_200_response_data::getMsg() const {
    return m_msg;
}
void MDGetMvUrl_200_response_data::setMsg(const QString &msg) {
    m_msg = msg;
    m_msg_isSet = true;
}

bool MDGetMvUrl_200_response_data::is_msg_Set() const{
    return m_msg_isSet;
}

bool MDGetMvUrl_200_response_data::is_msg_Valid() const{
    return m_msg_isValid;
}

bool MDGetMvUrl_200_response_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mv_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_st_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msg_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetMvUrl_200_response_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_url_isValid && m_r_isValid && m_size_isValid && m_md5_isValid && m_code_isValid && m_expi_isValid && m_fee_isValid && m_mv_fee_isValid && m_st_isValid && m_msg_isValid && true;
}

} // namespace MelodixAPI
