/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserPlaylist_200_response_playlist_inner_creator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserPlaylist_200_response_playlist_inner_creator::MDGetUserPlaylist_200_response_playlist_inner_creator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserPlaylist_200_response_playlist_inner_creator::MDGetUserPlaylist_200_response_playlist_inner_creator() {
    this->initializeModel();
}

MDGetUserPlaylist_200_response_playlist_inner_creator::~MDGetUserPlaylist_200_response_playlist_inner_creator() {}

void MDGetUserPlaylist_200_response_playlist_inner_creator::initializeModel() {

    m_default_avatar_isSet = false;
    m_default_avatar_isValid = false;

    m_province_isSet = false;
    m_province_isValid = false;

    m_followed_isSet = false;
    m_followed_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_background_url_isSet = false;
    m_background_url_isValid = false;
}

void MDGetUserPlaylist_200_response_playlist_inner_creator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserPlaylist_200_response_playlist_inner_creator::fromJsonObject(QJsonObject json) {

    m_default_avatar_isValid = ::MelodixAPI::fromJsonValue(m_default_avatar, json[QString("defaultAvatar")]);
    m_default_avatar_isSet = !json[QString("defaultAvatar")].isNull() && m_default_avatar_isValid;

    m_province_isValid = ::MelodixAPI::fromJsonValue(m_province, json[QString("province")]);
    m_province_isSet = !json[QString("province")].isNull() && m_province_isValid;

    m_followed_isValid = ::MelodixAPI::fromJsonValue(m_followed, json[QString("followed")]);
    m_followed_isSet = !json[QString("followed")].isNull() && m_followed_isValid;

    m_avatar_url_isValid = ::MelodixAPI::fromJsonValue(m_avatar_url, json[QString("avatarUrl")]);
    m_avatar_url_isSet = !json[QString("avatarUrl")].isNull() && m_avatar_url_isValid;

    m_user_id_isValid = ::MelodixAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_user_type_isValid = ::MelodixAPI::fromJsonValue(m_user_type, json[QString("userType")]);
    m_user_type_isSet = !json[QString("userType")].isNull() && m_user_type_isValid;

    m_nickname_isValid = ::MelodixAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_background_url_isValid = ::MelodixAPI::fromJsonValue(m_background_url, json[QString("backgroundUrl")]);
    m_background_url_isSet = !json[QString("backgroundUrl")].isNull() && m_background_url_isValid;
}

QString MDGetUserPlaylist_200_response_playlist_inner_creator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserPlaylist_200_response_playlist_inner_creator::asJsonObject() const {
    QJsonObject obj;
    if (m_default_avatar_isSet) {
        obj.insert(QString("defaultAvatar"), ::MelodixAPI::toJsonValue(m_default_avatar));
    }
    if (m_province_isSet) {
        obj.insert(QString("province"), ::MelodixAPI::toJsonValue(m_province));
    }
    if (m_followed_isSet) {
        obj.insert(QString("followed"), ::MelodixAPI::toJsonValue(m_followed));
    }
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatarUrl"), ::MelodixAPI::toJsonValue(m_avatar_url));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::MelodixAPI::toJsonValue(m_user_id));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("userType"), ::MelodixAPI::toJsonValue(m_user_type));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::MelodixAPI::toJsonValue(m_nickname));
    }
    if (m_background_url_isSet) {
        obj.insert(QString("backgroundUrl"), ::MelodixAPI::toJsonValue(m_background_url));
    }
    return obj;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::isDefaultAvatar() const {
    return m_default_avatar;
}
void MDGetUserPlaylist_200_response_playlist_inner_creator::setDefaultAvatar(const bool &default_avatar) {
    m_default_avatar = default_avatar;
    m_default_avatar_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_default_avatar_Set() const{
    return m_default_avatar_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_default_avatar_Valid() const{
    return m_default_avatar_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner_creator::getProvince() const {
    return m_province;
}
void MDGetUserPlaylist_200_response_playlist_inner_creator::setProvince(const qint32 &province) {
    m_province = province;
    m_province_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_province_Set() const{
    return m_province_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_province_Valid() const{
    return m_province_isValid;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::isFollowed() const {
    return m_followed;
}
void MDGetUserPlaylist_200_response_playlist_inner_creator::setFollowed(const bool &followed) {
    m_followed = followed;
    m_followed_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_followed_Set() const{
    return m_followed_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_followed_Valid() const{
    return m_followed_isValid;
}

QString MDGetUserPlaylist_200_response_playlist_inner_creator::getAvatarUrl() const {
    return m_avatar_url;
}
void MDGetUserPlaylist_200_response_playlist_inner_creator::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner_creator::getUserId() const {
    return m_user_id;
}
void MDGetUserPlaylist_200_response_playlist_inner_creator::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_user_id_Valid() const{
    return m_user_id_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner_creator::getUserType() const {
    return m_user_type;
}
void MDGetUserPlaylist_200_response_playlist_inner_creator::setUserType(const qint32 &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_user_type_Valid() const{
    return m_user_type_isValid;
}

QString MDGetUserPlaylist_200_response_playlist_inner_creator::getNickname() const {
    return m_nickname;
}
void MDGetUserPlaylist_200_response_playlist_inner_creator::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString MDGetUserPlaylist_200_response_playlist_inner_creator::getBackgroundUrl() const {
    return m_background_url;
}
void MDGetUserPlaylist_200_response_playlist_inner_creator::setBackgroundUrl(const QString &background_url) {
    m_background_url = background_url;
    m_background_url_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_background_url_Set() const{
    return m_background_url_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::is_background_url_Valid() const{
    return m_background_url_isValid;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_followed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserPlaylist_200_response_playlist_inner_creator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_avatar_isValid && m_province_isValid && m_followed_isValid && m_avatar_url_isValid && m_user_id_isValid && m_user_type_isValid && m_nickname_isValid && m_background_url_isValid && true;
}

} // namespace MelodixAPI
