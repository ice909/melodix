/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetMvSublist_200_response_data_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetMvSublist_200_response_data_inner::MDGetMvSublist_200_response_data_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetMvSublist_200_response_data_inner::MDGetMvSublist_200_response_data_inner() {
    this->initializeModel();
}

MDGetMvSublist_200_response_data_inner::~MDGetMvSublist_200_response_data_inner() {}

void MDGetMvSublist_200_response_data_inner::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_durationms_isSet = false;
    m_durationms_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_play_time_isSet = false;
    m_play_time_isValid = false;

    m_cover_url_isSet = false;
    m_cover_url_isValid = false;

    m_vid_isSet = false;
    m_vid_isValid = false;

    m_alia_name_isSet = false;
    m_alia_name_isValid = false;

    m_trans_name_isSet = false;
    m_trans_name_isValid = false;

    m_mark_types_isSet = false;
    m_mark_types_isValid = false;
}

void MDGetMvSublist_200_response_data_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetMvSublist_200_response_data_inner::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::MelodixAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_title_isValid = ::MelodixAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_durationms_isValid = ::MelodixAPI::fromJsonValue(m_durationms, json[QString("durationms")]);
    m_durationms_isSet = !json[QString("durationms")].isNull() && m_durationms_isValid;

    m_creator_isValid = ::MelodixAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_play_time_isValid = ::MelodixAPI::fromJsonValue(m_play_time, json[QString("playTime")]);
    m_play_time_isSet = !json[QString("playTime")].isNull() && m_play_time_isValid;

    m_cover_url_isValid = ::MelodixAPI::fromJsonValue(m_cover_url, json[QString("coverUrl")]);
    m_cover_url_isSet = !json[QString("coverUrl")].isNull() && m_cover_url_isValid;

    m_vid_isValid = ::MelodixAPI::fromJsonValue(m_vid, json[QString("vid")]);
    m_vid_isSet = !json[QString("vid")].isNull() && m_vid_isValid;

    m_alia_name_isValid = ::MelodixAPI::fromJsonValue(m_alia_name, json[QString("aliaName")]);
    m_alia_name_isSet = !json[QString("aliaName")].isNull() && m_alia_name_isValid;

    m_trans_name_isValid = ::MelodixAPI::fromJsonValue(m_trans_name, json[QString("transName")]);
    m_trans_name_isSet = !json[QString("transName")].isNull() && m_trans_name_isValid;

    m_mark_types_isValid = ::MelodixAPI::fromJsonValue(m_mark_types, json[QString("markTypes")]);
    m_mark_types_isSet = !json[QString("markTypes")].isNull() && m_mark_types_isValid;
}

QString MDGetMvSublist_200_response_data_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetMvSublist_200_response_data_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::MelodixAPI::toJsonValue(m_type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::MelodixAPI::toJsonValue(m_title));
    }
    if (m_durationms_isSet) {
        obj.insert(QString("durationms"), ::MelodixAPI::toJsonValue(m_durationms));
    }
    if (m_creator.size() > 0) {
        obj.insert(QString("creator"), ::MelodixAPI::toJsonValue(m_creator));
    }
    if (m_play_time_isSet) {
        obj.insert(QString("playTime"), ::MelodixAPI::toJsonValue(m_play_time));
    }
    if (m_cover_url_isSet) {
        obj.insert(QString("coverUrl"), ::MelodixAPI::toJsonValue(m_cover_url));
    }
    if (m_vid_isSet) {
        obj.insert(QString("vid"), ::MelodixAPI::toJsonValue(m_vid));
    }
    if (m_alia_name_isSet) {
        obj.insert(QString("aliaName"), ::MelodixAPI::toJsonValue(m_alia_name));
    }
    if (m_trans_name_isSet) {
        obj.insert(QString("transName"), ::MelodixAPI::toJsonValue(m_trans_name));
    }
    if (m_mark_types.size() > 0) {
        obj.insert(QString("markTypes"), ::MelodixAPI::toJsonValue(m_mark_types));
    }
    return obj;
}

qint32 MDGetMvSublist_200_response_data_inner::getType() const {
    return m_type;
}
void MDGetMvSublist_200_response_data_inner::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool MDGetMvSublist_200_response_data_inner::is_type_Set() const{
    return m_type_isSet;
}

bool MDGetMvSublist_200_response_data_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString MDGetMvSublist_200_response_data_inner::getTitle() const {
    return m_title;
}
void MDGetMvSublist_200_response_data_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool MDGetMvSublist_200_response_data_inner::is_title_Set() const{
    return m_title_isSet;
}

bool MDGetMvSublist_200_response_data_inner::is_title_Valid() const{
    return m_title_isValid;
}

qint32 MDGetMvSublist_200_response_data_inner::getDurationms() const {
    return m_durationms;
}
void MDGetMvSublist_200_response_data_inner::setDurationms(const qint32 &durationms) {
    m_durationms = durationms;
    m_durationms_isSet = true;
}

bool MDGetMvSublist_200_response_data_inner::is_durationms_Set() const{
    return m_durationms_isSet;
}

bool MDGetMvSublist_200_response_data_inner::is_durationms_Valid() const{
    return m_durationms_isValid;
}

QList<MDGetMvSublist_200_response_data_inner_creator_inner> MDGetMvSublist_200_response_data_inner::getCreator() const {
    return m_creator;
}
void MDGetMvSublist_200_response_data_inner::setCreator(const QList<MDGetMvSublist_200_response_data_inner_creator_inner> &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool MDGetMvSublist_200_response_data_inner::is_creator_Set() const{
    return m_creator_isSet;
}

bool MDGetMvSublist_200_response_data_inner::is_creator_Valid() const{
    return m_creator_isValid;
}

qint32 MDGetMvSublist_200_response_data_inner::getPlayTime() const {
    return m_play_time;
}
void MDGetMvSublist_200_response_data_inner::setPlayTime(const qint32 &play_time) {
    m_play_time = play_time;
    m_play_time_isSet = true;
}

bool MDGetMvSublist_200_response_data_inner::is_play_time_Set() const{
    return m_play_time_isSet;
}

bool MDGetMvSublist_200_response_data_inner::is_play_time_Valid() const{
    return m_play_time_isValid;
}

QString MDGetMvSublist_200_response_data_inner::getCoverUrl() const {
    return m_cover_url;
}
void MDGetMvSublist_200_response_data_inner::setCoverUrl(const QString &cover_url) {
    m_cover_url = cover_url;
    m_cover_url_isSet = true;
}

bool MDGetMvSublist_200_response_data_inner::is_cover_url_Set() const{
    return m_cover_url_isSet;
}

bool MDGetMvSublist_200_response_data_inner::is_cover_url_Valid() const{
    return m_cover_url_isValid;
}

QString MDGetMvSublist_200_response_data_inner::getVid() const {
    return m_vid;
}
void MDGetMvSublist_200_response_data_inner::setVid(const QString &vid) {
    m_vid = vid;
    m_vid_isSet = true;
}

bool MDGetMvSublist_200_response_data_inner::is_vid_Set() const{
    return m_vid_isSet;
}

bool MDGetMvSublist_200_response_data_inner::is_vid_Valid() const{
    return m_vid_isValid;
}

QString MDGetMvSublist_200_response_data_inner::getAliaName() const {
    return m_alia_name;
}
void MDGetMvSublist_200_response_data_inner::setAliaName(const QString &alia_name) {
    m_alia_name = alia_name;
    m_alia_name_isSet = true;
}

bool MDGetMvSublist_200_response_data_inner::is_alia_name_Set() const{
    return m_alia_name_isSet;
}

bool MDGetMvSublist_200_response_data_inner::is_alia_name_Valid() const{
    return m_alia_name_isValid;
}

QString MDGetMvSublist_200_response_data_inner::getTransName() const {
    return m_trans_name;
}
void MDGetMvSublist_200_response_data_inner::setTransName(const QString &trans_name) {
    m_trans_name = trans_name;
    m_trans_name_isSet = true;
}

bool MDGetMvSublist_200_response_data_inner::is_trans_name_Set() const{
    return m_trans_name_isSet;
}

bool MDGetMvSublist_200_response_data_inner::is_trans_name_Valid() const{
    return m_trans_name_isValid;
}

QList<QString> MDGetMvSublist_200_response_data_inner::getMarkTypes() const {
    return m_mark_types;
}
void MDGetMvSublist_200_response_data_inner::setMarkTypes(const QList<QString> &mark_types) {
    m_mark_types = mark_types;
    m_mark_types_isSet = true;
}

bool MDGetMvSublist_200_response_data_inner::is_mark_types_Set() const{
    return m_mark_types_isSet;
}

bool MDGetMvSublist_200_response_data_inner::is_mark_types_Valid() const{
    return m_mark_types_isValid;
}

bool MDGetMvSublist_200_response_data_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_durationms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alia_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trans_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetMvSublist_200_response_data_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_title_isValid && m_durationms_isValid && m_creator_isValid && m_play_time_isValid && m_cover_url_isValid && m_vid_isValid && m_alia_name_isValid && m_trans_name_isValid && m_mark_types_isValid && true;
}

} // namespace MelodixAPI
