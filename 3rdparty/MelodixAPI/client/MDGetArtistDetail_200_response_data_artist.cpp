/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetArtistDetail_200_response_data_artist.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetArtistDetail_200_response_data_artist::MDGetArtistDetail_200_response_data_artist(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetArtistDetail_200_response_data_artist::MDGetArtistDetail_200_response_data_artist() {
    this->initializeModel();
}

MDGetArtistDetail_200_response_data_artist::~MDGetArtistDetail_200_response_data_artist() {}

void MDGetArtistDetail_200_response_data_artist::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_cover_isSet = false;
    m_cover_isValid = false;

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_trans_names_isSet = false;
    m_trans_names_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_identities_isSet = false;
    m_identities_isValid = false;

    m_identify_tag_isSet = false;
    m_identify_tag_isValid = false;

    m_brief_desc_isSet = false;
    m_brief_desc_isValid = false;

    m_album_size_isSet = false;
    m_album_size_isValid = false;

    m_music_size_isSet = false;
    m_music_size_isValid = false;

    m_mv_size_isSet = false;
    m_mv_size_isValid = false;
}

void MDGetArtistDetail_200_response_data_artist::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetArtistDetail_200_response_data_artist::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_cover_isValid = ::MelodixAPI::fromJsonValue(m_cover, json[QString("cover")]);
    m_cover_isSet = !json[QString("cover")].isNull() && m_cover_isValid;

    m_avatar_isValid = ::MelodixAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_name_isValid = ::MelodixAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_trans_names_isValid = ::MelodixAPI::fromJsonValue(m_trans_names, json[QString("transNames")]);
    m_trans_names_isSet = !json[QString("transNames")].isNull() && m_trans_names_isValid;

    m_alias_isValid = ::MelodixAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_identities_isValid = ::MelodixAPI::fromJsonValue(m_identities, json[QString("identities")]);
    m_identities_isSet = !json[QString("identities")].isNull() && m_identities_isValid;

    m_identify_tag_isValid = ::MelodixAPI::fromJsonValue(m_identify_tag, json[QString("identifyTag")]);
    m_identify_tag_isSet = !json[QString("identifyTag")].isNull() && m_identify_tag_isValid;

    m_brief_desc_isValid = ::MelodixAPI::fromJsonValue(m_brief_desc, json[QString("briefDesc")]);
    m_brief_desc_isSet = !json[QString("briefDesc")].isNull() && m_brief_desc_isValid;

    m_album_size_isValid = ::MelodixAPI::fromJsonValue(m_album_size, json[QString("albumSize")]);
    m_album_size_isSet = !json[QString("albumSize")].isNull() && m_album_size_isValid;

    m_music_size_isValid = ::MelodixAPI::fromJsonValue(m_music_size, json[QString("musicSize")]);
    m_music_size_isSet = !json[QString("musicSize")].isNull() && m_music_size_isValid;

    m_mv_size_isValid = ::MelodixAPI::fromJsonValue(m_mv_size, json[QString("mvSize")]);
    m_mv_size_isSet = !json[QString("mvSize")].isNull() && m_mv_size_isValid;
}

QString MDGetArtistDetail_200_response_data_artist::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetArtistDetail_200_response_data_artist::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_cover_isSet) {
        obj.insert(QString("cover"), ::MelodixAPI::toJsonValue(m_cover));
    }
    if (m_avatar_isSet) {
        obj.insert(QString("avatar"), ::MelodixAPI::toJsonValue(m_avatar));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::MelodixAPI::toJsonValue(m_name));
    }
    if (m_trans_names.size() > 0) {
        obj.insert(QString("transNames"), ::MelodixAPI::toJsonValue(m_trans_names));
    }
    if (m_alias.size() > 0) {
        obj.insert(QString("alias"), ::MelodixAPI::toJsonValue(m_alias));
    }
    if (m_identities.size() > 0) {
        obj.insert(QString("identities"), ::MelodixAPI::toJsonValue(m_identities));
    }
    if (m_identify_tag.size() > 0) {
        obj.insert(QString("identifyTag"), ::MelodixAPI::toJsonValue(m_identify_tag));
    }
    if (m_brief_desc_isSet) {
        obj.insert(QString("briefDesc"), ::MelodixAPI::toJsonValue(m_brief_desc));
    }
    if (m_album_size_isSet) {
        obj.insert(QString("albumSize"), ::MelodixAPI::toJsonValue(m_album_size));
    }
    if (m_music_size_isSet) {
        obj.insert(QString("musicSize"), ::MelodixAPI::toJsonValue(m_music_size));
    }
    if (m_mv_size_isSet) {
        obj.insert(QString("mvSize"), ::MelodixAPI::toJsonValue(m_mv_size));
    }
    return obj;
}

qint32 MDGetArtistDetail_200_response_data_artist::getId() const {
    return m_id;
}
void MDGetArtistDetail_200_response_data_artist::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetArtistDetail_200_response_data_artist::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetArtistDetail_200_response_data_artist::is_id_Valid() const{
    return m_id_isValid;
}

QString MDGetArtistDetail_200_response_data_artist::getCover() const {
    return m_cover;
}
void MDGetArtistDetail_200_response_data_artist::setCover(const QString &cover) {
    m_cover = cover;
    m_cover_isSet = true;
}

bool MDGetArtistDetail_200_response_data_artist::is_cover_Set() const{
    return m_cover_isSet;
}

bool MDGetArtistDetail_200_response_data_artist::is_cover_Valid() const{
    return m_cover_isValid;
}

QString MDGetArtistDetail_200_response_data_artist::getAvatar() const {
    return m_avatar;
}
void MDGetArtistDetail_200_response_data_artist::setAvatar(const QString &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool MDGetArtistDetail_200_response_data_artist::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool MDGetArtistDetail_200_response_data_artist::is_avatar_Valid() const{
    return m_avatar_isValid;
}

QString MDGetArtistDetail_200_response_data_artist::getName() const {
    return m_name;
}
void MDGetArtistDetail_200_response_data_artist::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool MDGetArtistDetail_200_response_data_artist::is_name_Set() const{
    return m_name_isSet;
}

bool MDGetArtistDetail_200_response_data_artist::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> MDGetArtistDetail_200_response_data_artist::getTransNames() const {
    return m_trans_names;
}
void MDGetArtistDetail_200_response_data_artist::setTransNames(const QList<QString> &trans_names) {
    m_trans_names = trans_names;
    m_trans_names_isSet = true;
}

bool MDGetArtistDetail_200_response_data_artist::is_trans_names_Set() const{
    return m_trans_names_isSet;
}

bool MDGetArtistDetail_200_response_data_artist::is_trans_names_Valid() const{
    return m_trans_names_isValid;
}

QList<QString> MDGetArtistDetail_200_response_data_artist::getAlias() const {
    return m_alias;
}
void MDGetArtistDetail_200_response_data_artist::setAlias(const QList<QString> &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool MDGetArtistDetail_200_response_data_artist::is_alias_Set() const{
    return m_alias_isSet;
}

bool MDGetArtistDetail_200_response_data_artist::is_alias_Valid() const{
    return m_alias_isValid;
}

QList<QString> MDGetArtistDetail_200_response_data_artist::getIdentities() const {
    return m_identities;
}
void MDGetArtistDetail_200_response_data_artist::setIdentities(const QList<QString> &identities) {
    m_identities = identities;
    m_identities_isSet = true;
}

bool MDGetArtistDetail_200_response_data_artist::is_identities_Set() const{
    return m_identities_isSet;
}

bool MDGetArtistDetail_200_response_data_artist::is_identities_Valid() const{
    return m_identities_isValid;
}

QList<QString> MDGetArtistDetail_200_response_data_artist::getIdentifyTag() const {
    return m_identify_tag;
}
void MDGetArtistDetail_200_response_data_artist::setIdentifyTag(const QList<QString> &identify_tag) {
    m_identify_tag = identify_tag;
    m_identify_tag_isSet = true;
}

bool MDGetArtistDetail_200_response_data_artist::is_identify_tag_Set() const{
    return m_identify_tag_isSet;
}

bool MDGetArtistDetail_200_response_data_artist::is_identify_tag_Valid() const{
    return m_identify_tag_isValid;
}

QString MDGetArtistDetail_200_response_data_artist::getBriefDesc() const {
    return m_brief_desc;
}
void MDGetArtistDetail_200_response_data_artist::setBriefDesc(const QString &brief_desc) {
    m_brief_desc = brief_desc;
    m_brief_desc_isSet = true;
}

bool MDGetArtistDetail_200_response_data_artist::is_brief_desc_Set() const{
    return m_brief_desc_isSet;
}

bool MDGetArtistDetail_200_response_data_artist::is_brief_desc_Valid() const{
    return m_brief_desc_isValid;
}

qint32 MDGetArtistDetail_200_response_data_artist::getAlbumSize() const {
    return m_album_size;
}
void MDGetArtistDetail_200_response_data_artist::setAlbumSize(const qint32 &album_size) {
    m_album_size = album_size;
    m_album_size_isSet = true;
}

bool MDGetArtistDetail_200_response_data_artist::is_album_size_Set() const{
    return m_album_size_isSet;
}

bool MDGetArtistDetail_200_response_data_artist::is_album_size_Valid() const{
    return m_album_size_isValid;
}

qint32 MDGetArtistDetail_200_response_data_artist::getMusicSize() const {
    return m_music_size;
}
void MDGetArtistDetail_200_response_data_artist::setMusicSize(const qint32 &music_size) {
    m_music_size = music_size;
    m_music_size_isSet = true;
}

bool MDGetArtistDetail_200_response_data_artist::is_music_size_Set() const{
    return m_music_size_isSet;
}

bool MDGetArtistDetail_200_response_data_artist::is_music_size_Valid() const{
    return m_music_size_isValid;
}

qint32 MDGetArtistDetail_200_response_data_artist::getMvSize() const {
    return m_mv_size;
}
void MDGetArtistDetail_200_response_data_artist::setMvSize(const qint32 &mv_size) {
    m_mv_size = mv_size;
    m_mv_size_isSet = true;
}

bool MDGetArtistDetail_200_response_data_artist::is_mv_size_Set() const{
    return m_mv_size_isSet;
}

bool MDGetArtistDetail_200_response_data_artist::is_mv_size_Valid() const{
    return m_mv_size_isValid;
}

bool MDGetArtistDetail_200_response_data_artist::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trans_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identify_tag.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brief_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_music_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mv_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetArtistDetail_200_response_data_artist::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_cover_isValid && m_avatar_isValid && m_name_isValid && m_trans_names_isValid && m_alias_isValid && m_identities_isValid && m_identify_tag_isValid && m_brief_desc_isValid && m_album_size_isValid && m_music_size_isValid && m_mv_size_isValid && true;
}

} // namespace MelodixAPI
