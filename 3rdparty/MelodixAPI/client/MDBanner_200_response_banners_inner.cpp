/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDBanner_200_response_banners_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDBanner_200_response_banners_inner::MDBanner_200_response_banners_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDBanner_200_response_banners_inner::MDBanner_200_response_banners_inner() {
    this->initializeModel();
}

MDBanner_200_response_banners_inner::~MDBanner_200_response_banners_inner() {}

void MDBanner_200_response_banners_inner::initializeModel() {

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_banner_biz_type_isSet = false;
    m_banner_biz_type_isValid = false;
}

void MDBanner_200_response_banners_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDBanner_200_response_banners_inner::fromJsonObject(QJsonObject json) {

    m_image_url_isValid = ::MelodixAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_url_isValid = ::MelodixAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_banner_biz_type_isValid = ::MelodixAPI::fromJsonValue(m_banner_biz_type, json[QString("bannerBizType")]);
    m_banner_biz_type_isSet = !json[QString("bannerBizType")].isNull() && m_banner_biz_type_isValid;
}

QString MDBanner_200_response_banners_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDBanner_200_response_banners_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::MelodixAPI::toJsonValue(m_image_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::MelodixAPI::toJsonValue(m_url));
    }
    if (m_banner_biz_type_isSet) {
        obj.insert(QString("bannerBizType"), ::MelodixAPI::toJsonValue(m_banner_biz_type));
    }
    return obj;
}

QString MDBanner_200_response_banners_inner::getImageUrl() const {
    return m_image_url;
}
void MDBanner_200_response_banners_inner::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool MDBanner_200_response_banners_inner::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool MDBanner_200_response_banners_inner::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString MDBanner_200_response_banners_inner::getUrl() const {
    return m_url;
}
void MDBanner_200_response_banners_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool MDBanner_200_response_banners_inner::is_url_Set() const{
    return m_url_isSet;
}

bool MDBanner_200_response_banners_inner::is_url_Valid() const{
    return m_url_isValid;
}

QString MDBanner_200_response_banners_inner::getBannerBizType() const {
    return m_banner_biz_type;
}
void MDBanner_200_response_banners_inner::setBannerBizType(const QString &banner_biz_type) {
    m_banner_biz_type = banner_biz_type;
    m_banner_biz_type_isSet = true;
}

bool MDBanner_200_response_banners_inner::is_banner_biz_type_Set() const{
    return m_banner_biz_type_isSet;
}

bool MDBanner_200_response_banners_inner::is_banner_biz_type_Valid() const{
    return m_banner_biz_type_isValid;
}

bool MDBanner_200_response_banners_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_banner_biz_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDBanner_200_response_banners_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_url_isValid && m_url_isValid && m_banner_biz_type_isValid && true;
}

} // namespace MelodixAPI
