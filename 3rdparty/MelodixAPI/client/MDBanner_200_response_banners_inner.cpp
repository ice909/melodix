/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDBanner_200_response_banners_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDBanner_200_response_banners_inner::MDBanner_200_response_banners_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDBanner_200_response_banners_inner::MDBanner_200_response_banners_inner() {
    this->initializeModel();
}

MDBanner_200_response_banners_inner::~MDBanner_200_response_banners_inner() {}

void MDBanner_200_response_banners_inner::initializeModel() {

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_target_type_isSet = false;
    m_target_type_isValid = false;

    m_title_color_isSet = false;
    m_title_color_isValid = false;

    m_type_title_isSet = false;
    m_type_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_exclusive_isSet = false;
    m_exclusive_isValid = false;

    m_encode_id_isSet = false;
    m_encode_id_isValid = false;

    m_scm_isSet = false;
    m_scm_isValid = false;

    m_banner_biz_type_isSet = false;
    m_banner_biz_type_isValid = false;
}

void MDBanner_200_response_banners_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDBanner_200_response_banners_inner::fromJsonObject(QJsonObject json) {

    m_image_url_isValid = ::MelodixAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_target_id_isValid = ::MelodixAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;

    m_target_type_isValid = ::MelodixAPI::fromJsonValue(m_target_type, json[QString("targetType")]);
    m_target_type_isSet = !json[QString("targetType")].isNull() && m_target_type_isValid;

    m_title_color_isValid = ::MelodixAPI::fromJsonValue(m_title_color, json[QString("titleColor")]);
    m_title_color_isSet = !json[QString("titleColor")].isNull() && m_title_color_isValid;

    m_type_title_isValid = ::MelodixAPI::fromJsonValue(m_type_title, json[QString("typeTitle")]);
    m_type_title_isSet = !json[QString("typeTitle")].isNull() && m_type_title_isValid;

    m_url_isValid = ::MelodixAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_exclusive_isValid = ::MelodixAPI::fromJsonValue(m_exclusive, json[QString("exclusive")]);
    m_exclusive_isSet = !json[QString("exclusive")].isNull() && m_exclusive_isValid;

    m_encode_id_isValid = ::MelodixAPI::fromJsonValue(m_encode_id, json[QString("encodeId")]);
    m_encode_id_isSet = !json[QString("encodeId")].isNull() && m_encode_id_isValid;

    m_scm_isValid = ::MelodixAPI::fromJsonValue(m_scm, json[QString("scm")]);
    m_scm_isSet = !json[QString("scm")].isNull() && m_scm_isValid;

    m_banner_biz_type_isValid = ::MelodixAPI::fromJsonValue(m_banner_biz_type, json[QString("bannerBizType")]);
    m_banner_biz_type_isSet = !json[QString("bannerBizType")].isNull() && m_banner_biz_type_isValid;
}

QString MDBanner_200_response_banners_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDBanner_200_response_banners_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::MelodixAPI::toJsonValue(m_image_url));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::MelodixAPI::toJsonValue(m_target_id));
    }
    if (m_target_type_isSet) {
        obj.insert(QString("targetType"), ::MelodixAPI::toJsonValue(m_target_type));
    }
    if (m_title_color_isSet) {
        obj.insert(QString("titleColor"), ::MelodixAPI::toJsonValue(m_title_color));
    }
    if (m_type_title_isSet) {
        obj.insert(QString("typeTitle"), ::MelodixAPI::toJsonValue(m_type_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::MelodixAPI::toJsonValue(m_url));
    }
    if (m_exclusive_isSet) {
        obj.insert(QString("exclusive"), ::MelodixAPI::toJsonValue(m_exclusive));
    }
    if (m_encode_id_isSet) {
        obj.insert(QString("encodeId"), ::MelodixAPI::toJsonValue(m_encode_id));
    }
    if (m_scm_isSet) {
        obj.insert(QString("scm"), ::MelodixAPI::toJsonValue(m_scm));
    }
    if (m_banner_biz_type_isSet) {
        obj.insert(QString("bannerBizType"), ::MelodixAPI::toJsonValue(m_banner_biz_type));
    }
    return obj;
}

QString MDBanner_200_response_banners_inner::getImageUrl() const {
    return m_image_url;
}
void MDBanner_200_response_banners_inner::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool MDBanner_200_response_banners_inner::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool MDBanner_200_response_banners_inner::is_image_url_Valid() const{
    return m_image_url_isValid;
}

qint32 MDBanner_200_response_banners_inner::getTargetId() const {
    return m_target_id;
}
void MDBanner_200_response_banners_inner::setTargetId(const qint32 &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool MDBanner_200_response_banners_inner::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool MDBanner_200_response_banners_inner::is_target_id_Valid() const{
    return m_target_id_isValid;
}

qint32 MDBanner_200_response_banners_inner::getTargetType() const {
    return m_target_type;
}
void MDBanner_200_response_banners_inner::setTargetType(const qint32 &target_type) {
    m_target_type = target_type;
    m_target_type_isSet = true;
}

bool MDBanner_200_response_banners_inner::is_target_type_Set() const{
    return m_target_type_isSet;
}

bool MDBanner_200_response_banners_inner::is_target_type_Valid() const{
    return m_target_type_isValid;
}

QString MDBanner_200_response_banners_inner::getTitleColor() const {
    return m_title_color;
}
void MDBanner_200_response_banners_inner::setTitleColor(const QString &title_color) {
    m_title_color = title_color;
    m_title_color_isSet = true;
}

bool MDBanner_200_response_banners_inner::is_title_color_Set() const{
    return m_title_color_isSet;
}

bool MDBanner_200_response_banners_inner::is_title_color_Valid() const{
    return m_title_color_isValid;
}

QString MDBanner_200_response_banners_inner::getTypeTitle() const {
    return m_type_title;
}
void MDBanner_200_response_banners_inner::setTypeTitle(const QString &type_title) {
    m_type_title = type_title;
    m_type_title_isSet = true;
}

bool MDBanner_200_response_banners_inner::is_type_title_Set() const{
    return m_type_title_isSet;
}

bool MDBanner_200_response_banners_inner::is_type_title_Valid() const{
    return m_type_title_isValid;
}

QString MDBanner_200_response_banners_inner::getUrl() const {
    return m_url;
}
void MDBanner_200_response_banners_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool MDBanner_200_response_banners_inner::is_url_Set() const{
    return m_url_isSet;
}

bool MDBanner_200_response_banners_inner::is_url_Valid() const{
    return m_url_isValid;
}

bool MDBanner_200_response_banners_inner::isExclusive() const {
    return m_exclusive;
}
void MDBanner_200_response_banners_inner::setExclusive(const bool &exclusive) {
    m_exclusive = exclusive;
    m_exclusive_isSet = true;
}

bool MDBanner_200_response_banners_inner::is_exclusive_Set() const{
    return m_exclusive_isSet;
}

bool MDBanner_200_response_banners_inner::is_exclusive_Valid() const{
    return m_exclusive_isValid;
}

QString MDBanner_200_response_banners_inner::getEncodeId() const {
    return m_encode_id;
}
void MDBanner_200_response_banners_inner::setEncodeId(const QString &encode_id) {
    m_encode_id = encode_id;
    m_encode_id_isSet = true;
}

bool MDBanner_200_response_banners_inner::is_encode_id_Set() const{
    return m_encode_id_isSet;
}

bool MDBanner_200_response_banners_inner::is_encode_id_Valid() const{
    return m_encode_id_isValid;
}

QString MDBanner_200_response_banners_inner::getScm() const {
    return m_scm;
}
void MDBanner_200_response_banners_inner::setScm(const QString &scm) {
    m_scm = scm;
    m_scm_isSet = true;
}

bool MDBanner_200_response_banners_inner::is_scm_Set() const{
    return m_scm_isSet;
}

bool MDBanner_200_response_banners_inner::is_scm_Valid() const{
    return m_scm_isValid;
}

QString MDBanner_200_response_banners_inner::getBannerBizType() const {
    return m_banner_biz_type;
}
void MDBanner_200_response_banners_inner::setBannerBizType(const QString &banner_biz_type) {
    m_banner_biz_type = banner_biz_type;
    m_banner_biz_type_isSet = true;
}

bool MDBanner_200_response_banners_inner::is_banner_biz_type_Set() const{
    return m_banner_biz_type_isSet;
}

bool MDBanner_200_response_banners_inner::is_banner_biz_type_Valid() const{
    return m_banner_biz_type_isValid;
}

bool MDBanner_200_response_banners_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encode_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_banner_biz_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDBanner_200_response_banners_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_url_isValid && m_target_id_isValid && m_target_type_isValid && m_title_color_isValid && m_type_title_isValid && m_url_isValid && m_exclusive_isValid && m_encode_id_isValid && m_scm_isValid && m_banner_biz_type_isValid && true;
}

} // namespace MelodixAPI
