/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetSongUrl_200_response_data_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetSongUrl_200_response_data_inner::MDGetSongUrl_200_response_data_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetSongUrl_200_response_data_inner::MDGetSongUrl_200_response_data_inner() {
    this->initializeModel();
}

MDGetSongUrl_200_response_data_inner::~MDGetSongUrl_200_response_data_inner() {}

void MDGetSongUrl_200_response_data_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_br_isSet = false;
    m_br_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_md5_isSet = false;
    m_md5_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void MDGetSongUrl_200_response_data_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetSongUrl_200_response_data_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_url_isValid = ::MelodixAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_br_isValid = ::MelodixAPI::fromJsonValue(m_br, json[QString("br")]);
    m_br_isSet = !json[QString("br")].isNull() && m_br_isValid;

    m_size_isValid = ::MelodixAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_md5_isValid = ::MelodixAPI::fromJsonValue(m_md5, json[QString("md5")]);
    m_md5_isSet = !json[QString("md5")].isNull() && m_md5_isValid;

    m_code_isValid = ::MelodixAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_type_isValid = ::MelodixAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_time_isValid = ::MelodixAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString MDGetSongUrl_200_response_data_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetSongUrl_200_response_data_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::MelodixAPI::toJsonValue(m_url));
    }
    if (m_br_isSet) {
        obj.insert(QString("br"), ::MelodixAPI::toJsonValue(m_br));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::MelodixAPI::toJsonValue(m_size));
    }
    if (m_md5_isSet) {
        obj.insert(QString("md5"), ::MelodixAPI::toJsonValue(m_md5));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::MelodixAPI::toJsonValue(m_code));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::MelodixAPI::toJsonValue(m_type));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::MelodixAPI::toJsonValue(m_time));
    }
    return obj;
}

qint32 MDGetSongUrl_200_response_data_inner::getId() const {
    return m_id;
}
void MDGetSongUrl_200_response_data_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetSongUrl_200_response_data_inner::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetSongUrl_200_response_data_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString MDGetSongUrl_200_response_data_inner::getUrl() const {
    return m_url;
}
void MDGetSongUrl_200_response_data_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool MDGetSongUrl_200_response_data_inner::is_url_Set() const{
    return m_url_isSet;
}

bool MDGetSongUrl_200_response_data_inner::is_url_Valid() const{
    return m_url_isValid;
}

qint32 MDGetSongUrl_200_response_data_inner::getBr() const {
    return m_br;
}
void MDGetSongUrl_200_response_data_inner::setBr(const qint32 &br) {
    m_br = br;
    m_br_isSet = true;
}

bool MDGetSongUrl_200_response_data_inner::is_br_Set() const{
    return m_br_isSet;
}

bool MDGetSongUrl_200_response_data_inner::is_br_Valid() const{
    return m_br_isValid;
}

qint32 MDGetSongUrl_200_response_data_inner::getSize() const {
    return m_size;
}
void MDGetSongUrl_200_response_data_inner::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool MDGetSongUrl_200_response_data_inner::is_size_Set() const{
    return m_size_isSet;
}

bool MDGetSongUrl_200_response_data_inner::is_size_Valid() const{
    return m_size_isValid;
}

QString MDGetSongUrl_200_response_data_inner::getMd5() const {
    return m_md5;
}
void MDGetSongUrl_200_response_data_inner::setMd5(const QString &md5) {
    m_md5 = md5;
    m_md5_isSet = true;
}

bool MDGetSongUrl_200_response_data_inner::is_md5_Set() const{
    return m_md5_isSet;
}

bool MDGetSongUrl_200_response_data_inner::is_md5_Valid() const{
    return m_md5_isValid;
}

qint32 MDGetSongUrl_200_response_data_inner::getCode() const {
    return m_code;
}
void MDGetSongUrl_200_response_data_inner::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool MDGetSongUrl_200_response_data_inner::is_code_Set() const{
    return m_code_isSet;
}

bool MDGetSongUrl_200_response_data_inner::is_code_Valid() const{
    return m_code_isValid;
}

QString MDGetSongUrl_200_response_data_inner::getType() const {
    return m_type;
}
void MDGetSongUrl_200_response_data_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool MDGetSongUrl_200_response_data_inner::is_type_Set() const{
    return m_type_isSet;
}

bool MDGetSongUrl_200_response_data_inner::is_type_Valid() const{
    return m_type_isValid;
}

qint32 MDGetSongUrl_200_response_data_inner::getTime() const {
    return m_time;
}
void MDGetSongUrl_200_response_data_inner::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool MDGetSongUrl_200_response_data_inner::is_time_Set() const{
    return m_time_isSet;
}

bool MDGetSongUrl_200_response_data_inner::is_time_Valid() const{
    return m_time_isValid;
}

bool MDGetSongUrl_200_response_data_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_br_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetSongUrl_200_response_data_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace MelodixAPI
