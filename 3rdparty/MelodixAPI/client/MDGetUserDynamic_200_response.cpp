/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDynamic_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDynamic_200_response::MDGetUserDynamic_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDynamic_200_response::MDGetUserDynamic_200_response() {
    this->initializeModel();
}

MDGetUserDynamic_200_response::~MDGetUserDynamic_200_response() {}

void MDGetUserDynamic_200_response::initializeModel() {

    m_lasttime_isSet = false;
    m_lasttime_isValid = false;

    m_more_isSet = false;
    m_more_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;
}

void MDGetUserDynamic_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDynamic_200_response::fromJsonObject(QJsonObject json) {

    m_lasttime_isValid = ::MelodixAPI::fromJsonValue(m_lasttime, json[QString("lasttime")]);
    m_lasttime_isSet = !json[QString("lasttime")].isNull() && m_lasttime_isValid;

    m_more_isValid = ::MelodixAPI::fromJsonValue(m_more, json[QString("more")]);
    m_more_isSet = !json[QString("more")].isNull() && m_more_isValid;

    m_size_isValid = ::MelodixAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_events_isValid = ::MelodixAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_code_isValid = ::MelodixAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;
}

QString MDGetUserDynamic_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDynamic_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_lasttime_isSet) {
        obj.insert(QString("lasttime"), ::MelodixAPI::toJsonValue(m_lasttime));
    }
    if (m_more_isSet) {
        obj.insert(QString("more"), ::MelodixAPI::toJsonValue(m_more));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::MelodixAPI::toJsonValue(m_size));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::MelodixAPI::toJsonValue(m_events));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::MelodixAPI::toJsonValue(m_code));
    }
    return obj;
}

qint32 MDGetUserDynamic_200_response::getLasttime() const {
    return m_lasttime;
}
void MDGetUserDynamic_200_response::setLasttime(const qint32 &lasttime) {
    m_lasttime = lasttime;
    m_lasttime_isSet = true;
}

bool MDGetUserDynamic_200_response::is_lasttime_Set() const{
    return m_lasttime_isSet;
}

bool MDGetUserDynamic_200_response::is_lasttime_Valid() const{
    return m_lasttime_isValid;
}

bool MDGetUserDynamic_200_response::isMore() const {
    return m_more;
}
void MDGetUserDynamic_200_response::setMore(const bool &more) {
    m_more = more;
    m_more_isSet = true;
}

bool MDGetUserDynamic_200_response::is_more_Set() const{
    return m_more_isSet;
}

bool MDGetUserDynamic_200_response::is_more_Valid() const{
    return m_more_isValid;
}

qint32 MDGetUserDynamic_200_response::getSize() const {
    return m_size;
}
void MDGetUserDynamic_200_response::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool MDGetUserDynamic_200_response::is_size_Set() const{
    return m_size_isSet;
}

bool MDGetUserDynamic_200_response::is_size_Valid() const{
    return m_size_isValid;
}

QList<MDGetUserDynamic_200_response_events_inner> MDGetUserDynamic_200_response::getEvents() const {
    return m_events;
}
void MDGetUserDynamic_200_response::setEvents(const QList<MDGetUserDynamic_200_response_events_inner> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool MDGetUserDynamic_200_response::is_events_Set() const{
    return m_events_isSet;
}

bool MDGetUserDynamic_200_response::is_events_Valid() const{
    return m_events_isValid;
}

qint32 MDGetUserDynamic_200_response::getCode() const {
    return m_code;
}
void MDGetUserDynamic_200_response::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool MDGetUserDynamic_200_response::is_code_Set() const{
    return m_code_isSet;
}

bool MDGetUserDynamic_200_response::is_code_Valid() const{
    return m_code_isValid;
}

bool MDGetUserDynamic_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lasttime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDynamic_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lasttime_isValid && m_more_isValid && m_size_isValid && m_events_isValid && m_code_isValid && true;
}

} // namespace MelodixAPI
