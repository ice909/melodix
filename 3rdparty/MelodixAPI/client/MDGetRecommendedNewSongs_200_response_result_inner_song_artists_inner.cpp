/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner() {
    this->initializeModel();
}

MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::~MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner() {}

void MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_pic_url_isSet = false;
    m_pic_url_isValid = false;

    m_img1v1_url_isSet = false;
    m_img1v1_url_isValid = false;
}

void MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::MelodixAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_pic_url_isValid = ::MelodixAPI::fromJsonValue(m_pic_url, json[QString("picUrl")]);
    m_pic_url_isSet = !json[QString("picUrl")].isNull() && m_pic_url_isValid;

    m_img1v1_url_isValid = ::MelodixAPI::fromJsonValue(m_img1v1_url, json[QString("img1v1Url")]);
    m_img1v1_url_isSet = !json[QString("img1v1Url")].isNull() && m_img1v1_url_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::MelodixAPI::toJsonValue(m_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_pic_url_isSet) {
        obj.insert(QString("picUrl"), ::MelodixAPI::toJsonValue(m_pic_url));
    }
    if (m_img1v1_url_isSet) {
        obj.insert(QString("img1v1Url"), ::MelodixAPI::toJsonValue(m_img1v1_url));
    }
    return obj;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::getName() const {
    return m_name;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::is_name_Set() const{
    return m_name_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::getId() const {
    return m_id;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::getPicUrl() const {
    return m_pic_url;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::setPicUrl(const QString &pic_url) {
    m_pic_url = pic_url;
    m_pic_url_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::is_pic_url_Set() const{
    return m_pic_url_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::is_pic_url_Valid() const{
    return m_pic_url_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::getImg1v1Url() const {
    return m_img1v1_url;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::setImg1v1Url(const QString &img1v1_url) {
    m_img1v1_url = img1v1_url;
    m_img1v1_url_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::is_img1v1_url_Set() const{
    return m_img1v1_url_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::is_img1v1_url_Valid() const{
    return m_img1v1_url_isValid;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pic_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_img1v1_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_id_isValid && m_pic_url_isValid && m_img1v1_url_isValid && true;
}

} // namespace MelodixAPI
