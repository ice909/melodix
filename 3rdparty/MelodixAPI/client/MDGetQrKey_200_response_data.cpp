/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetQrKey_200_response_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetQrKey_200_response_data::MDGetQrKey_200_response_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetQrKey_200_response_data::MDGetQrKey_200_response_data() {
    this->initializeModel();
}

MDGetQrKey_200_response_data::~MDGetQrKey_200_response_data() {}

void MDGetQrKey_200_response_data::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_unikey_isSet = false;
    m_unikey_isValid = false;
}

void MDGetQrKey_200_response_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetQrKey_200_response_data::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::MelodixAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_unikey_isValid = ::MelodixAPI::fromJsonValue(m_unikey, json[QString("unikey")]);
    m_unikey_isSet = !json[QString("unikey")].isNull() && m_unikey_isValid;
}

QString MDGetQrKey_200_response_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetQrKey_200_response_data::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::MelodixAPI::toJsonValue(m_code));
    }
    if (m_unikey_isSet) {
        obj.insert(QString("unikey"), ::MelodixAPI::toJsonValue(m_unikey));
    }
    return obj;
}

qint32 MDGetQrKey_200_response_data::getCode() const {
    return m_code;
}
void MDGetQrKey_200_response_data::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool MDGetQrKey_200_response_data::is_code_Set() const{
    return m_code_isSet;
}

bool MDGetQrKey_200_response_data::is_code_Valid() const{
    return m_code_isValid;
}

QString MDGetQrKey_200_response_data::getUnikey() const {
    return m_unikey;
}
void MDGetQrKey_200_response_data::setUnikey(const QString &unikey) {
    m_unikey = unikey;
    m_unikey_isSet = true;
}

bool MDGetQrKey_200_response_data::is_unikey_Set() const{
    return m_unikey_isSet;
}

bool MDGetQrKey_200_response_data::is_unikey_Valid() const{
    return m_unikey_isValid;
}

bool MDGetQrKey_200_response_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unikey_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetQrKey_200_response_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_unikey_isValid && true;
}

} // namespace MelodixAPI
