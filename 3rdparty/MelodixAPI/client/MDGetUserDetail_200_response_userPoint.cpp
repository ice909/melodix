/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDetail_200_response_userPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDetail_200_response_userPoint::MDGetUserDetail_200_response_userPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDetail_200_response_userPoint::MDGetUserDetail_200_response_userPoint() {
    this->initializeModel();
}

MDGetUserDetail_200_response_userPoint::~MDGetUserDetail_200_response_userPoint() {}

void MDGetUserDetail_200_response_userPoint::initializeModel() {

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_block_balance_isSet = false;
    m_block_balance_isValid = false;
}

void MDGetUserDetail_200_response_userPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDetail_200_response_userPoint::fromJsonObject(QJsonObject json) {

    m_user_id_isValid = ::MelodixAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_balance_isValid = ::MelodixAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_update_time_isValid = ::MelodixAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_version_isValid = ::MelodixAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_status_isValid = ::MelodixAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_block_balance_isValid = ::MelodixAPI::fromJsonValue(m_block_balance, json[QString("blockBalance")]);
    m_block_balance_isSet = !json[QString("blockBalance")].isNull() && m_block_balance_isValid;
}

QString MDGetUserDetail_200_response_userPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDetail_200_response_userPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::MelodixAPI::toJsonValue(m_user_id));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::MelodixAPI::toJsonValue(m_balance));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::MelodixAPI::toJsonValue(m_update_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::MelodixAPI::toJsonValue(m_version));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::MelodixAPI::toJsonValue(m_status));
    }
    if (m_block_balance_isSet) {
        obj.insert(QString("blockBalance"), ::MelodixAPI::toJsonValue(m_block_balance));
    }
    return obj;
}

qint32 MDGetUserDetail_200_response_userPoint::getUserId() const {
    return m_user_id;
}
void MDGetUserDetail_200_response_userPoint::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool MDGetUserDetail_200_response_userPoint::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool MDGetUserDetail_200_response_userPoint::is_user_id_Valid() const{
    return m_user_id_isValid;
}

qint32 MDGetUserDetail_200_response_userPoint::getBalance() const {
    return m_balance;
}
void MDGetUserDetail_200_response_userPoint::setBalance(const qint32 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool MDGetUserDetail_200_response_userPoint::is_balance_Set() const{
    return m_balance_isSet;
}

bool MDGetUserDetail_200_response_userPoint::is_balance_Valid() const{
    return m_balance_isValid;
}

qint32 MDGetUserDetail_200_response_userPoint::getUpdateTime() const {
    return m_update_time;
}
void MDGetUserDetail_200_response_userPoint::setUpdateTime(const qint32 &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool MDGetUserDetail_200_response_userPoint::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool MDGetUserDetail_200_response_userPoint::is_update_time_Valid() const{
    return m_update_time_isValid;
}

qint32 MDGetUserDetail_200_response_userPoint::getVersion() const {
    return m_version;
}
void MDGetUserDetail_200_response_userPoint::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool MDGetUserDetail_200_response_userPoint::is_version_Set() const{
    return m_version_isSet;
}

bool MDGetUserDetail_200_response_userPoint::is_version_Valid() const{
    return m_version_isValid;
}

qint32 MDGetUserDetail_200_response_userPoint::getStatus() const {
    return m_status;
}
void MDGetUserDetail_200_response_userPoint::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool MDGetUserDetail_200_response_userPoint::is_status_Set() const{
    return m_status_isSet;
}

bool MDGetUserDetail_200_response_userPoint::is_status_Valid() const{
    return m_status_isValid;
}

qint32 MDGetUserDetail_200_response_userPoint::getBlockBalance() const {
    return m_block_balance;
}
void MDGetUserDetail_200_response_userPoint::setBlockBalance(const qint32 &block_balance) {
    m_block_balance = block_balance;
    m_block_balance_isSet = true;
}

bool MDGetUserDetail_200_response_userPoint::is_block_balance_Set() const{
    return m_block_balance_isSet;
}

bool MDGetUserDetail_200_response_userPoint::is_block_balance_Valid() const{
    return m_block_balance_isValid;
}

bool MDGetUserDetail_200_response_userPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_balance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDetail_200_response_userPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_id_isValid && m_balance_isValid && m_update_time_isValid && m_version_isValid && m_status_isValid && m_block_balance_isValid && true;
}

} // namespace MelodixAPI
