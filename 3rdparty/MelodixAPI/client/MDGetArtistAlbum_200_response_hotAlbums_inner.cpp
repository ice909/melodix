/**
 * MelodixAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetArtistAlbum_200_response_hotAlbums_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetArtistAlbum_200_response_hotAlbums_inner::MDGetArtistAlbum_200_response_hotAlbums_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetArtistAlbum_200_response_hotAlbums_inner::MDGetArtistAlbum_200_response_hotAlbums_inner() {
    this->initializeModel();
}

MDGetArtistAlbum_200_response_hotAlbums_inner::~MDGetArtistAlbum_200_response_hotAlbums_inner() {}

void MDGetArtistAlbum_200_response_hotAlbums_inner::initializeModel() {

    m_songs_isSet = false;
    m_songs_isValid = false;

    m_paid_isSet = false;
    m_paid_isValid = false;

    m_on_sale_isSet = false;
    m_on_sale_isValid = false;

    m_mark_isSet = false;
    m_mark_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_blur_pic_url_isSet = false;
    m_blur_pic_url_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_copyright_id_isSet = false;
    m_copyright_id_isValid = false;

    m_pic_id_isSet = false;
    m_pic_id_isValid = false;

    m_artist_isSet = false;
    m_artist_isValid = false;

    m_brief_desc_isSet = false;
    m_brief_desc_isValid = false;

    m_publish_time_isSet = false;
    m_publish_time_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_pic_url_isSet = false;
    m_pic_url_isValid = false;

    m_comment_thread_id_isSet = false;
    m_comment_thread_id_isValid = false;

    m_pic_isSet = false;
    m_pic_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_pic_id_str_isSet = false;
    m_pic_id_str_isValid = false;

    m_is_sub_isSet = false;
    m_is_sub_isValid = false;

    m_trans_names_isSet = false;
    m_trans_names_isValid = false;
}

void MDGetArtistAlbum_200_response_hotAlbums_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetArtistAlbum_200_response_hotAlbums_inner::fromJsonObject(QJsonObject json) {

    m_songs_isValid = ::MelodixAPI::fromJsonValue(m_songs, json[QString("songs")]);
    m_songs_isSet = !json[QString("songs")].isNull() && m_songs_isValid;

    m_paid_isValid = ::MelodixAPI::fromJsonValue(m_paid, json[QString("paid")]);
    m_paid_isSet = !json[QString("paid")].isNull() && m_paid_isValid;

    m_on_sale_isValid = ::MelodixAPI::fromJsonValue(m_on_sale, json[QString("onSale")]);
    m_on_sale_isSet = !json[QString("onSale")].isNull() && m_on_sale_isValid;

    m_mark_isValid = ::MelodixAPI::fromJsonValue(m_mark, json[QString("mark")]);
    m_mark_isSet = !json[QString("mark")].isNull() && m_mark_isValid;

    m_company_id_isValid = ::MelodixAPI::fromJsonValue(m_company_id, json[QString("companyId")]);
    m_company_id_isSet = !json[QString("companyId")].isNull() && m_company_id_isValid;

    m_blur_pic_url_isValid = ::MelodixAPI::fromJsonValue(m_blur_pic_url, json[QString("blurPicUrl")]);
    m_blur_pic_url_isSet = !json[QString("blurPicUrl")].isNull() && m_blur_pic_url_isValid;

    m_alias_isValid = ::MelodixAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_artists_isValid = ::MelodixAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_copyright_id_isValid = ::MelodixAPI::fromJsonValue(m_copyright_id, json[QString("copyrightId")]);
    m_copyright_id_isSet = !json[QString("copyrightId")].isNull() && m_copyright_id_isValid;

    m_pic_id_isValid = ::MelodixAPI::fromJsonValue(m_pic_id, json[QString("picId")]);
    m_pic_id_isSet = !json[QString("picId")].isNull() && m_pic_id_isValid;

    m_artist_isValid = ::MelodixAPI::fromJsonValue(m_artist, json[QString("artist")]);
    m_artist_isSet = !json[QString("artist")].isNull() && m_artist_isValid;

    m_brief_desc_isValid = ::MelodixAPI::fromJsonValue(m_brief_desc, json[QString("briefDesc")]);
    m_brief_desc_isSet = !json[QString("briefDesc")].isNull() && m_brief_desc_isValid;

    m_publish_time_isValid = ::MelodixAPI::fromJsonValue(m_publish_time, json[QString("publishTime")]);
    m_publish_time_isSet = !json[QString("publishTime")].isNull() && m_publish_time_isValid;

    m_company_isValid = ::MelodixAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_pic_url_isValid = ::MelodixAPI::fromJsonValue(m_pic_url, json[QString("picUrl")]);
    m_pic_url_isSet = !json[QString("picUrl")].isNull() && m_pic_url_isValid;

    m_comment_thread_id_isValid = ::MelodixAPI::fromJsonValue(m_comment_thread_id, json[QString("commentThreadId")]);
    m_comment_thread_id_isSet = !json[QString("commentThreadId")].isNull() && m_comment_thread_id_isValid;

    m_pic_isValid = ::MelodixAPI::fromJsonValue(m_pic, json[QString("pic")]);
    m_pic_isSet = !json[QString("pic")].isNull() && m_pic_isValid;

    m_tags_isValid = ::MelodixAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_description_isValid = ::MelodixAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_status_isValid = ::MelodixAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_sub_type_isValid = ::MelodixAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;

    m_name_isValid = ::MelodixAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::MelodixAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_size_isValid = ::MelodixAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_pic_id_str_isValid = ::MelodixAPI::fromJsonValue(m_pic_id_str, json[QString("picId_str")]);
    m_pic_id_str_isSet = !json[QString("picId_str")].isNull() && m_pic_id_str_isValid;

    m_is_sub_isValid = ::MelodixAPI::fromJsonValue(m_is_sub, json[QString("isSub")]);
    m_is_sub_isSet = !json[QString("isSub")].isNull() && m_is_sub_isValid;

    m_trans_names_isValid = ::MelodixAPI::fromJsonValue(m_trans_names, json[QString("transNames")]);
    m_trans_names_isSet = !json[QString("transNames")].isNull() && m_trans_names_isValid;
}

QString MDGetArtistAlbum_200_response_hotAlbums_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetArtistAlbum_200_response_hotAlbums_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_songs.size() > 0) {
        obj.insert(QString("songs"), ::MelodixAPI::toJsonValue(m_songs));
    }
    if (m_paid_isSet) {
        obj.insert(QString("paid"), ::MelodixAPI::toJsonValue(m_paid));
    }
    if (m_on_sale_isSet) {
        obj.insert(QString("onSale"), ::MelodixAPI::toJsonValue(m_on_sale));
    }
    if (m_mark_isSet) {
        obj.insert(QString("mark"), ::MelodixAPI::toJsonValue(m_mark));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("companyId"), ::MelodixAPI::toJsonValue(m_company_id));
    }
    if (m_blur_pic_url_isSet) {
        obj.insert(QString("blurPicUrl"), ::MelodixAPI::toJsonValue(m_blur_pic_url));
    }
    if (m_alias.size() > 0) {
        obj.insert(QString("alias"), ::MelodixAPI::toJsonValue(m_alias));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::MelodixAPI::toJsonValue(m_artists));
    }
    if (m_copyright_id_isSet) {
        obj.insert(QString("copyrightId"), ::MelodixAPI::toJsonValue(m_copyright_id));
    }
    if (m_pic_id_isSet) {
        obj.insert(QString("picId"), ::MelodixAPI::toJsonValue(m_pic_id));
    }
    if (m_artist.isSet()) {
        obj.insert(QString("artist"), ::MelodixAPI::toJsonValue(m_artist));
    }
    if (m_brief_desc_isSet) {
        obj.insert(QString("briefDesc"), ::MelodixAPI::toJsonValue(m_brief_desc));
    }
    if (m_publish_time_isSet) {
        obj.insert(QString("publishTime"), ::MelodixAPI::toJsonValue(m_publish_time));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::MelodixAPI::toJsonValue(m_company));
    }
    if (m_pic_url_isSet) {
        obj.insert(QString("picUrl"), ::MelodixAPI::toJsonValue(m_pic_url));
    }
    if (m_comment_thread_id_isSet) {
        obj.insert(QString("commentThreadId"), ::MelodixAPI::toJsonValue(m_comment_thread_id));
    }
    if (m_pic_isSet) {
        obj.insert(QString("pic"), ::MelodixAPI::toJsonValue(m_pic));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::MelodixAPI::toJsonValue(m_tags));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::MelodixAPI::toJsonValue(m_description));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::MelodixAPI::toJsonValue(m_status));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("subType"), ::MelodixAPI::toJsonValue(m_sub_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::MelodixAPI::toJsonValue(m_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::MelodixAPI::toJsonValue(m_type));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::MelodixAPI::toJsonValue(m_size));
    }
    if (m_pic_id_str_isSet) {
        obj.insert(QString("picId_str"), ::MelodixAPI::toJsonValue(m_pic_id_str));
    }
    if (m_is_sub_isSet) {
        obj.insert(QString("isSub"), ::MelodixAPI::toJsonValue(m_is_sub));
    }
    if (m_trans_names.size() > 0) {
        obj.insert(QString("transNames"), ::MelodixAPI::toJsonValue(m_trans_names));
    }
    return obj;
}

QList<QString> MDGetArtistAlbum_200_response_hotAlbums_inner::getSongs() const {
    return m_songs;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setSongs(const QList<QString> &songs) {
    m_songs = songs;
    m_songs_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_songs_Set() const{
    return m_songs_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_songs_Valid() const{
    return m_songs_isValid;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::isPaid() const {
    return m_paid;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setPaid(const bool &paid) {
    m_paid = paid;
    m_paid_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_paid_Set() const{
    return m_paid_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_paid_Valid() const{
    return m_paid_isValid;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::isOnSale() const {
    return m_on_sale;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setOnSale(const bool &on_sale) {
    m_on_sale = on_sale;
    m_on_sale_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_on_sale_Set() const{
    return m_on_sale_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_on_sale_Valid() const{
    return m_on_sale_isValid;
}

qint32 MDGetArtistAlbum_200_response_hotAlbums_inner::getMark() const {
    return m_mark;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setMark(const qint32 &mark) {
    m_mark = mark;
    m_mark_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_mark_Set() const{
    return m_mark_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_mark_Valid() const{
    return m_mark_isValid;
}

qint32 MDGetArtistAlbum_200_response_hotAlbums_inner::getCompanyId() const {
    return m_company_id;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setCompanyId(const qint32 &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_company_id_Valid() const{
    return m_company_id_isValid;
}

QString MDGetArtistAlbum_200_response_hotAlbums_inner::getBlurPicUrl() const {
    return m_blur_pic_url;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setBlurPicUrl(const QString &blur_pic_url) {
    m_blur_pic_url = blur_pic_url;
    m_blur_pic_url_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_blur_pic_url_Set() const{
    return m_blur_pic_url_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_blur_pic_url_Valid() const{
    return m_blur_pic_url_isValid;
}

QList<QString> MDGetArtistAlbum_200_response_hotAlbums_inner::getAlias() const {
    return m_alias;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setAlias(const QList<QString> &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_alias_Set() const{
    return m_alias_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_alias_Valid() const{
    return m_alias_isValid;
}

QList<MDGetArtistAlbum_200_response_hotAlbums_inner_artists_inner> MDGetArtistAlbum_200_response_hotAlbums_inner::getArtists() const {
    return m_artists;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setArtists(const QList<MDGetArtistAlbum_200_response_hotAlbums_inner_artists_inner> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_artists_Set() const{
    return m_artists_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_artists_Valid() const{
    return m_artists_isValid;
}

qint32 MDGetArtistAlbum_200_response_hotAlbums_inner::getCopyrightId() const {
    return m_copyright_id;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setCopyrightId(const qint32 &copyright_id) {
    m_copyright_id = copyright_id;
    m_copyright_id_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_copyright_id_Set() const{
    return m_copyright_id_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_copyright_id_Valid() const{
    return m_copyright_id_isValid;
}

qint32 MDGetArtistAlbum_200_response_hotAlbums_inner::getPicId() const {
    return m_pic_id;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setPicId(const qint32 &pic_id) {
    m_pic_id = pic_id;
    m_pic_id_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_pic_id_Set() const{
    return m_pic_id_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_pic_id_Valid() const{
    return m_pic_id_isValid;
}

MDGetArtistAlbum_200_response_hotAlbums_inner_artist MDGetArtistAlbum_200_response_hotAlbums_inner::getArtist() const {
    return m_artist;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setArtist(const MDGetArtistAlbum_200_response_hotAlbums_inner_artist &artist) {
    m_artist = artist;
    m_artist_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_artist_Set() const{
    return m_artist_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_artist_Valid() const{
    return m_artist_isValid;
}

QString MDGetArtistAlbum_200_response_hotAlbums_inner::getBriefDesc() const {
    return m_brief_desc;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setBriefDesc(const QString &brief_desc) {
    m_brief_desc = brief_desc;
    m_brief_desc_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_brief_desc_Set() const{
    return m_brief_desc_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_brief_desc_Valid() const{
    return m_brief_desc_isValid;
}

qint32 MDGetArtistAlbum_200_response_hotAlbums_inner::getPublishTime() const {
    return m_publish_time;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setPublishTime(const qint32 &publish_time) {
    m_publish_time = publish_time;
    m_publish_time_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_publish_time_Set() const{
    return m_publish_time_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_publish_time_Valid() const{
    return m_publish_time_isValid;
}

QString MDGetArtistAlbum_200_response_hotAlbums_inner::getCompany() const {
    return m_company;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_company_Set() const{
    return m_company_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_company_Valid() const{
    return m_company_isValid;
}

QString MDGetArtistAlbum_200_response_hotAlbums_inner::getPicUrl() const {
    return m_pic_url;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setPicUrl(const QString &pic_url) {
    m_pic_url = pic_url;
    m_pic_url_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_pic_url_Set() const{
    return m_pic_url_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_pic_url_Valid() const{
    return m_pic_url_isValid;
}

QString MDGetArtistAlbum_200_response_hotAlbums_inner::getCommentThreadId() const {
    return m_comment_thread_id;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setCommentThreadId(const QString &comment_thread_id) {
    m_comment_thread_id = comment_thread_id;
    m_comment_thread_id_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_comment_thread_id_Set() const{
    return m_comment_thread_id_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_comment_thread_id_Valid() const{
    return m_comment_thread_id_isValid;
}

qint32 MDGetArtistAlbum_200_response_hotAlbums_inner::getPic() const {
    return m_pic;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setPic(const qint32 &pic) {
    m_pic = pic;
    m_pic_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_pic_Set() const{
    return m_pic_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_pic_Valid() const{
    return m_pic_isValid;
}

QString MDGetArtistAlbum_200_response_hotAlbums_inner::getTags() const {
    return m_tags;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

QString MDGetArtistAlbum_200_response_hotAlbums_inner::getDescription() const {
    return m_description;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_description_Set() const{
    return m_description_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_description_Valid() const{
    return m_description_isValid;
}

qint32 MDGetArtistAlbum_200_response_hotAlbums_inner::getStatus() const {
    return m_status;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_status_Set() const{
    return m_status_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString MDGetArtistAlbum_200_response_hotAlbums_inner::getSubType() const {
    return m_sub_type;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

QString MDGetArtistAlbum_200_response_hotAlbums_inner::getName() const {
    return m_name;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_name_Set() const{
    return m_name_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 MDGetArtistAlbum_200_response_hotAlbums_inner::getId() const {
    return m_id;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString MDGetArtistAlbum_200_response_hotAlbums_inner::getType() const {
    return m_type;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_type_Set() const{
    return m_type_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_type_Valid() const{
    return m_type_isValid;
}

qint32 MDGetArtistAlbum_200_response_hotAlbums_inner::getSize() const {
    return m_size;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_size_Set() const{
    return m_size_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_size_Valid() const{
    return m_size_isValid;
}

QString MDGetArtistAlbum_200_response_hotAlbums_inner::getPicIdStr() const {
    return m_pic_id_str;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setPicIdStr(const QString &pic_id_str) {
    m_pic_id_str = pic_id_str;
    m_pic_id_str_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_pic_id_str_Set() const{
    return m_pic_id_str_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_pic_id_str_Valid() const{
    return m_pic_id_str_isValid;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::isIsSub() const {
    return m_is_sub;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setIsSub(const bool &is_sub) {
    m_is_sub = is_sub;
    m_is_sub_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_is_sub_Set() const{
    return m_is_sub_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_is_sub_Valid() const{
    return m_is_sub_isValid;
}

QList<QString> MDGetArtistAlbum_200_response_hotAlbums_inner::getTransNames() const {
    return m_trans_names;
}
void MDGetArtistAlbum_200_response_hotAlbums_inner::setTransNames(const QList<QString> &trans_names) {
    m_trans_names = trans_names;
    m_trans_names_isSet = true;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_trans_names_Set() const{
    return m_trans_names_isSet;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::is_trans_names_Valid() const{
    return m_trans_names_isValid;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_songs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_sale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blur_pic_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brief_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pic_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_thread_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pic_id_str_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trans_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetArtistAlbum_200_response_hotAlbums_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_songs_isValid && m_paid_isValid && m_on_sale_isValid && m_mark_isValid && m_company_id_isValid && m_blur_pic_url_isValid && m_alias_isValid && m_artists_isValid && m_copyright_id_isValid && m_pic_id_isValid && m_artist_isValid && m_brief_desc_isValid && m_publish_time_isValid && m_company_isValid && m_pic_url_isValid && m_comment_thread_id_isValid && m_pic_isValid && m_tags_isValid && m_description_isValid && m_status_isValid && m_sub_type_isValid && m_name_isValid && m_id_isValid && m_type_isValid && m_size_isValid && m_pic_id_str_isValid && m_is_sub_isValid && true;
}

} // namespace MelodixAPI
