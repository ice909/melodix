/**
 * MelodixAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDCellphoneLogin_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDCellphoneLogin_200_response::MDCellphoneLogin_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDCellphoneLogin_200_response::MDCellphoneLogin_200_response() {
    this->initializeModel();
}

MDCellphoneLogin_200_response::~MDCellphoneLogin_200_response() {}

void MDCellphoneLogin_200_response::initializeModel() {

    m_login_type_isSet = false;
    m_login_type_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_account_isSet = false;
    m_account_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_bindings_isSet = false;
    m_bindings_isValid = false;

    m_cookie_isSet = false;
    m_cookie_isValid = false;
}

void MDCellphoneLogin_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDCellphoneLogin_200_response::fromJsonObject(QJsonObject json) {

    m_login_type_isValid = ::MelodixAPI::fromJsonValue(m_login_type, json[QString("loginType")]);
    m_login_type_isSet = !json[QString("loginType")].isNull() && m_login_type_isValid;

    m_code_isValid = ::MelodixAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_account_isValid = ::MelodixAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_token_isValid = ::MelodixAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_profile_isValid = ::MelodixAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_bindings_isValid = ::MelodixAPI::fromJsonValue(m_bindings, json[QString("bindings")]);
    m_bindings_isSet = !json[QString("bindings")].isNull() && m_bindings_isValid;

    m_cookie_isValid = ::MelodixAPI::fromJsonValue(m_cookie, json[QString("cookie")]);
    m_cookie_isSet = !json[QString("cookie")].isNull() && m_cookie_isValid;
}

QString MDCellphoneLogin_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDCellphoneLogin_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_login_type_isSet) {
        obj.insert(QString("loginType"), ::MelodixAPI::toJsonValue(m_login_type));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::MelodixAPI::toJsonValue(m_code));
    }
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::MelodixAPI::toJsonValue(m_account));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::MelodixAPI::toJsonValue(m_token));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("profile"), ::MelodixAPI::toJsonValue(m_profile));
    }
    if (m_bindings.size() > 0) {
        obj.insert(QString("bindings"), ::MelodixAPI::toJsonValue(m_bindings));
    }
    if (m_cookie_isSet) {
        obj.insert(QString("cookie"), ::MelodixAPI::toJsonValue(m_cookie));
    }
    return obj;
}

qint32 MDCellphoneLogin_200_response::getLoginType() const {
    return m_login_type;
}
void MDCellphoneLogin_200_response::setLoginType(const qint32 &login_type) {
    m_login_type = login_type;
    m_login_type_isSet = true;
}

bool MDCellphoneLogin_200_response::is_login_type_Set() const{
    return m_login_type_isSet;
}

bool MDCellphoneLogin_200_response::is_login_type_Valid() const{
    return m_login_type_isValid;
}

qint32 MDCellphoneLogin_200_response::getCode() const {
    return m_code;
}
void MDCellphoneLogin_200_response::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool MDCellphoneLogin_200_response::is_code_Set() const{
    return m_code_isSet;
}

bool MDCellphoneLogin_200_response::is_code_Valid() const{
    return m_code_isValid;
}

MDCellphoneLogin_200_response_account MDCellphoneLogin_200_response::getAccount() const {
    return m_account;
}
void MDCellphoneLogin_200_response::setAccount(const MDCellphoneLogin_200_response_account &account) {
    m_account = account;
    m_account_isSet = true;
}

bool MDCellphoneLogin_200_response::is_account_Set() const{
    return m_account_isSet;
}

bool MDCellphoneLogin_200_response::is_account_Valid() const{
    return m_account_isValid;
}

QString MDCellphoneLogin_200_response::getToken() const {
    return m_token;
}
void MDCellphoneLogin_200_response::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool MDCellphoneLogin_200_response::is_token_Set() const{
    return m_token_isSet;
}

bool MDCellphoneLogin_200_response::is_token_Valid() const{
    return m_token_isValid;
}

MDCellphoneLogin_200_response_profile MDCellphoneLogin_200_response::getProfile() const {
    return m_profile;
}
void MDCellphoneLogin_200_response::setProfile(const MDCellphoneLogin_200_response_profile &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool MDCellphoneLogin_200_response::is_profile_Set() const{
    return m_profile_isSet;
}

bool MDCellphoneLogin_200_response::is_profile_Valid() const{
    return m_profile_isValid;
}

QList<MDCellphoneLogin_200_response_bindings_inner> MDCellphoneLogin_200_response::getBindings() const {
    return m_bindings;
}
void MDCellphoneLogin_200_response::setBindings(const QList<MDCellphoneLogin_200_response_bindings_inner> &bindings) {
    m_bindings = bindings;
    m_bindings_isSet = true;
}

bool MDCellphoneLogin_200_response::is_bindings_Set() const{
    return m_bindings_isSet;
}

bool MDCellphoneLogin_200_response::is_bindings_Valid() const{
    return m_bindings_isValid;
}

QString MDCellphoneLogin_200_response::getCookie() const {
    return m_cookie;
}
void MDCellphoneLogin_200_response::setCookie(const QString &cookie) {
    m_cookie = cookie;
    m_cookie_isSet = true;
}

bool MDCellphoneLogin_200_response::is_cookie_Set() const{
    return m_cookie_isSet;
}

bool MDCellphoneLogin_200_response::is_cookie_Valid() const{
    return m_cookie_isValid;
}

bool MDCellphoneLogin_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_login_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bindings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookie_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDCellphoneLogin_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_login_type_isValid && m_code_isValid && m_account_isValid && m_token_isValid && m_profile_isValid && m_bindings_isValid && m_cookie_isValid && true;
}

} // namespace MelodixAPI
