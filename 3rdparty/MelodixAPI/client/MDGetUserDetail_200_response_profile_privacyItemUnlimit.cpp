/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDetail_200_response_profile_privacyItemUnlimit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDetail_200_response_profile_privacyItemUnlimit::MDGetUserDetail_200_response_profile_privacyItemUnlimit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDetail_200_response_profile_privacyItemUnlimit::MDGetUserDetail_200_response_profile_privacyItemUnlimit() {
    this->initializeModel();
}

MDGetUserDetail_200_response_profile_privacyItemUnlimit::~MDGetUserDetail_200_response_profile_privacyItemUnlimit() {}

void MDGetUserDetail_200_response_profile_privacyItemUnlimit::initializeModel() {

    m_area_isSet = false;
    m_area_isValid = false;

    m_college_isSet = false;
    m_college_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_age_isSet = false;
    m_age_isValid = false;

    m_village_age_isSet = false;
    m_village_age_isValid = false;
}

void MDGetUserDetail_200_response_profile_privacyItemUnlimit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDetail_200_response_profile_privacyItemUnlimit::fromJsonObject(QJsonObject json) {

    m_area_isValid = ::MelodixAPI::fromJsonValue(m_area, json[QString("area")]);
    m_area_isSet = !json[QString("area")].isNull() && m_area_isValid;

    m_college_isValid = ::MelodixAPI::fromJsonValue(m_college, json[QString("college")]);
    m_college_isSet = !json[QString("college")].isNull() && m_college_isValid;

    m_gender_isValid = ::MelodixAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_age_isValid = ::MelodixAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_village_age_isValid = ::MelodixAPI::fromJsonValue(m_village_age, json[QString("villageAge")]);
    m_village_age_isSet = !json[QString("villageAge")].isNull() && m_village_age_isValid;
}

QString MDGetUserDetail_200_response_profile_privacyItemUnlimit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDetail_200_response_profile_privacyItemUnlimit::asJsonObject() const {
    QJsonObject obj;
    if (m_area_isSet) {
        obj.insert(QString("area"), ::MelodixAPI::toJsonValue(m_area));
    }
    if (m_college_isSet) {
        obj.insert(QString("college"), ::MelodixAPI::toJsonValue(m_college));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::MelodixAPI::toJsonValue(m_gender));
    }
    if (m_age_isSet) {
        obj.insert(QString("age"), ::MelodixAPI::toJsonValue(m_age));
    }
    if (m_village_age_isSet) {
        obj.insert(QString("villageAge"), ::MelodixAPI::toJsonValue(m_village_age));
    }
    return obj;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::isArea() const {
    return m_area;
}
void MDGetUserDetail_200_response_profile_privacyItemUnlimit::setArea(const bool &area) {
    m_area = area;
    m_area_isSet = true;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::is_area_Set() const{
    return m_area_isSet;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::is_area_Valid() const{
    return m_area_isValid;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::isCollege() const {
    return m_college;
}
void MDGetUserDetail_200_response_profile_privacyItemUnlimit::setCollege(const bool &college) {
    m_college = college;
    m_college_isSet = true;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::is_college_Set() const{
    return m_college_isSet;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::is_college_Valid() const{
    return m_college_isValid;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::isGender() const {
    return m_gender;
}
void MDGetUserDetail_200_response_profile_privacyItemUnlimit::setGender(const bool &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::is_gender_Set() const{
    return m_gender_isSet;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::is_gender_Valid() const{
    return m_gender_isValid;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::isAge() const {
    return m_age;
}
void MDGetUserDetail_200_response_profile_privacyItemUnlimit::setAge(const bool &age) {
    m_age = age;
    m_age_isSet = true;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::is_age_Set() const{
    return m_age_isSet;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::is_age_Valid() const{
    return m_age_isValid;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::isVillageAge() const {
    return m_village_age;
}
void MDGetUserDetail_200_response_profile_privacyItemUnlimit::setVillageAge(const bool &village_age) {
    m_village_age = village_age;
    m_village_age_isSet = true;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::is_village_age_Set() const{
    return m_village_age_isSet;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::is_village_age_Valid() const{
    return m_village_age_isValid;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_college_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_village_age_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDetail_200_response_profile_privacyItemUnlimit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_area_isValid && m_college_isValid && m_gender_isValid && m_age_isValid && m_village_age_isValid && true;
}

} // namespace MelodixAPI
