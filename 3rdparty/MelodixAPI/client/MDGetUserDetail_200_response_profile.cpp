/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDetail_200_response_profile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDetail_200_response_profile::MDGetUserDetail_200_response_profile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDetail_200_response_profile::MDGetUserDetail_200_response_profile() {
    this->initializeModel();
}

MDGetUserDetail_200_response_profile::~MDGetUserDetail_200_response_profile() {}

void MDGetUserDetail_200_response_profile::initializeModel() {

    m_privacy_item_unlimit_isSet = false;
    m_privacy_item_unlimit_isValid = false;

    m_avatar_detail_isSet = false;
    m_avatar_detail_isValid = false;

    m_avatar_img_id_isSet = false;
    m_avatar_img_id_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_birthday_isSet = false;
    m_birthday_isValid = false;

    m_auth_status_isSet = false;
    m_auth_status_isValid = false;

    m_detail_description_isSet = false;
    m_detail_description_isValid = false;

    m_experts_isSet = false;
    m_experts_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_mutual_isSet = false;
    m_mutual_isValid = false;

    m_vip_type_isSet = false;
    m_vip_type_isValid = false;

    m_background_img_id_str_isSet = false;
    m_background_img_id_str_isValid = false;

    m_avatar_img_id_str_isSet = false;
    m_avatar_img_id_str_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_background_img_id_isSet = false;
    m_background_img_id_isValid = false;

    m_background_url_isSet = false;
    m_background_url_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;

    m_account_status_isSet = false;
    m_account_status_isValid = false;

    m_province_isSet = false;
    m_province_isValid = false;

    m_dj_status_isSet = false;
    m_dj_status_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_default_avatar_isSet = false;
    m_default_avatar_isValid = false;

    m_followed_isSet = false;
    m_followed_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_authority_isSet = false;
    m_authority_isValid = false;

    m_all_auth_types_isSet = false;
    m_all_auth_types_isValid = false;

    m_followeds_isSet = false;
    m_followeds_isValid = false;

    m_follows_isSet = false;
    m_follows_isValid = false;

    m_blacklist_isSet = false;
    m_blacklist_isValid = false;

    m_artist_id_isSet = false;
    m_artist_id_isValid = false;

    m_event_count_isSet = false;
    m_event_count_isValid = false;

    m_all_subscribed_count_isSet = false;
    m_all_subscribed_count_isValid = false;

    m_playlist_be_subscribed_count_isSet = false;
    m_playlist_be_subscribed_count_isValid = false;

    m_main_auth_type_isSet = false;
    m_main_auth_type_isValid = false;

    m_follow_me_isSet = false;
    m_follow_me_isValid = false;

    m_artist_identity_isSet = false;
    m_artist_identity_isValid = false;

    m_c_count_isSet = false;
    m_c_count_isValid = false;

    m_in_blacklist_isSet = false;
    m_in_blacklist_isValid = false;

    m_s_djp_count_isSet = false;
    m_s_djp_count_isValid = false;

    m_artist_name_isSet = false;
    m_artist_name_isValid = false;

    m_playlist_count_isSet = false;
    m_playlist_count_isValid = false;

    m_s_count_isSet = false;
    m_s_count_isValid = false;

    m_new_follows_isSet = false;
    m_new_follows_isValid = false;
}

void MDGetUserDetail_200_response_profile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDetail_200_response_profile::fromJsonObject(QJsonObject json) {

    m_privacy_item_unlimit_isValid = ::MelodixAPI::fromJsonValue(m_privacy_item_unlimit, json[QString("privacyItemUnlimit")]);
    m_privacy_item_unlimit_isSet = !json[QString("privacyItemUnlimit")].isNull() && m_privacy_item_unlimit_isValid;

    m_avatar_detail_isValid = ::MelodixAPI::fromJsonValue(m_avatar_detail, json[QString("avatarDetail")]);
    m_avatar_detail_isSet = !json[QString("avatarDetail")].isNull() && m_avatar_detail_isValid;

    m_avatar_img_id_isValid = ::MelodixAPI::fromJsonValue(m_avatar_img_id, json[QString("avatarImgId")]);
    m_avatar_img_id_isSet = !json[QString("avatarImgId")].isNull() && m_avatar_img_id_isValid;

    m_gender_isValid = ::MelodixAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_nickname_isValid = ::MelodixAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_birthday_isValid = ::MelodixAPI::fromJsonValue(m_birthday, json[QString("birthday")]);
    m_birthday_isSet = !json[QString("birthday")].isNull() && m_birthday_isValid;

    m_auth_status_isValid = ::MelodixAPI::fromJsonValue(m_auth_status, json[QString("authStatus")]);
    m_auth_status_isSet = !json[QString("authStatus")].isNull() && m_auth_status_isValid;

    m_detail_description_isValid = ::MelodixAPI::fromJsonValue(m_detail_description, json[QString("detailDescription")]);
    m_detail_description_isSet = !json[QString("detailDescription")].isNull() && m_detail_description_isValid;

    m_experts_isValid = ::MelodixAPI::fromJsonValue(m_experts, json[QString("experts")]);
    m_experts_isSet = !json[QString("experts")].isNull() && m_experts_isValid;

    m_create_time_isValid = ::MelodixAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_mutual_isValid = ::MelodixAPI::fromJsonValue(m_mutual, json[QString("mutual")]);
    m_mutual_isSet = !json[QString("mutual")].isNull() && m_mutual_isValid;

    m_vip_type_isValid = ::MelodixAPI::fromJsonValue(m_vip_type, json[QString("vipType")]);
    m_vip_type_isSet = !json[QString("vipType")].isNull() && m_vip_type_isValid;

    m_background_img_id_str_isValid = ::MelodixAPI::fromJsonValue(m_background_img_id_str, json[QString("backgroundImgIdStr")]);
    m_background_img_id_str_isSet = !json[QString("backgroundImgIdStr")].isNull() && m_background_img_id_str_isValid;

    m_avatar_img_id_str_isValid = ::MelodixAPI::fromJsonValue(m_avatar_img_id_str, json[QString("avatarImgIdStr")]);
    m_avatar_img_id_str_isSet = !json[QString("avatarImgIdStr")].isNull() && m_avatar_img_id_str_isValid;

    m_description_isValid = ::MelodixAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_user_id_isValid = ::MelodixAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_avatar_url_isValid = ::MelodixAPI::fromJsonValue(m_avatar_url, json[QString("avatarUrl")]);
    m_avatar_url_isSet = !json[QString("avatarUrl")].isNull() && m_avatar_url_isValid;

    m_background_img_id_isValid = ::MelodixAPI::fromJsonValue(m_background_img_id, json[QString("backgroundImgId")]);
    m_background_img_id_isSet = !json[QString("backgroundImgId")].isNull() && m_background_img_id_isValid;

    m_background_url_isValid = ::MelodixAPI::fromJsonValue(m_background_url, json[QString("backgroundUrl")]);
    m_background_url_isSet = !json[QString("backgroundUrl")].isNull() && m_background_url_isValid;

    m_user_type_isValid = ::MelodixAPI::fromJsonValue(m_user_type, json[QString("userType")]);
    m_user_type_isSet = !json[QString("userType")].isNull() && m_user_type_isValid;

    m_account_status_isValid = ::MelodixAPI::fromJsonValue(m_account_status, json[QString("accountStatus")]);
    m_account_status_isSet = !json[QString("accountStatus")].isNull() && m_account_status_isValid;

    m_province_isValid = ::MelodixAPI::fromJsonValue(m_province, json[QString("province")]);
    m_province_isSet = !json[QString("province")].isNull() && m_province_isValid;

    m_dj_status_isValid = ::MelodixAPI::fromJsonValue(m_dj_status, json[QString("djStatus")]);
    m_dj_status_isSet = !json[QString("djStatus")].isNull() && m_dj_status_isValid;

    m_city_isValid = ::MelodixAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_default_avatar_isValid = ::MelodixAPI::fromJsonValue(m_default_avatar, json[QString("defaultAvatar")]);
    m_default_avatar_isSet = !json[QString("defaultAvatar")].isNull() && m_default_avatar_isValid;

    m_followed_isValid = ::MelodixAPI::fromJsonValue(m_followed, json[QString("followed")]);
    m_followed_isSet = !json[QString("followed")].isNull() && m_followed_isValid;

    m_signature_isValid = ::MelodixAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_authority_isValid = ::MelodixAPI::fromJsonValue(m_authority, json[QString("authority")]);
    m_authority_isSet = !json[QString("authority")].isNull() && m_authority_isValid;

    m_all_auth_types_isValid = ::MelodixAPI::fromJsonValue(m_all_auth_types, json[QString("allAuthTypes")]);
    m_all_auth_types_isSet = !json[QString("allAuthTypes")].isNull() && m_all_auth_types_isValid;

    m_followeds_isValid = ::MelodixAPI::fromJsonValue(m_followeds, json[QString("followeds")]);
    m_followeds_isSet = !json[QString("followeds")].isNull() && m_followeds_isValid;

    m_follows_isValid = ::MelodixAPI::fromJsonValue(m_follows, json[QString("follows")]);
    m_follows_isSet = !json[QString("follows")].isNull() && m_follows_isValid;

    m_blacklist_isValid = ::MelodixAPI::fromJsonValue(m_blacklist, json[QString("blacklist")]);
    m_blacklist_isSet = !json[QString("blacklist")].isNull() && m_blacklist_isValid;

    m_artist_id_isValid = ::MelodixAPI::fromJsonValue(m_artist_id, json[QString("artistId")]);
    m_artist_id_isSet = !json[QString("artistId")].isNull() && m_artist_id_isValid;

    m_event_count_isValid = ::MelodixAPI::fromJsonValue(m_event_count, json[QString("eventCount")]);
    m_event_count_isSet = !json[QString("eventCount")].isNull() && m_event_count_isValid;

    m_all_subscribed_count_isValid = ::MelodixAPI::fromJsonValue(m_all_subscribed_count, json[QString("allSubscribedCount")]);
    m_all_subscribed_count_isSet = !json[QString("allSubscribedCount")].isNull() && m_all_subscribed_count_isValid;

    m_playlist_be_subscribed_count_isValid = ::MelodixAPI::fromJsonValue(m_playlist_be_subscribed_count, json[QString("playlistBeSubscribedCount")]);
    m_playlist_be_subscribed_count_isSet = !json[QString("playlistBeSubscribedCount")].isNull() && m_playlist_be_subscribed_count_isValid;

    m_main_auth_type_isValid = ::MelodixAPI::fromJsonValue(m_main_auth_type, json[QString("mainAuthType")]);
    m_main_auth_type_isSet = !json[QString("mainAuthType")].isNull() && m_main_auth_type_isValid;

    m_follow_me_isValid = ::MelodixAPI::fromJsonValue(m_follow_me, json[QString("followMe")]);
    m_follow_me_isSet = !json[QString("followMe")].isNull() && m_follow_me_isValid;

    m_artist_identity_isValid = ::MelodixAPI::fromJsonValue(m_artist_identity, json[QString("artistIdentity")]);
    m_artist_identity_isSet = !json[QString("artistIdentity")].isNull() && m_artist_identity_isValid;

    m_c_count_isValid = ::MelodixAPI::fromJsonValue(m_c_count, json[QString("cCount")]);
    m_c_count_isSet = !json[QString("cCount")].isNull() && m_c_count_isValid;

    m_in_blacklist_isValid = ::MelodixAPI::fromJsonValue(m_in_blacklist, json[QString("inBlacklist")]);
    m_in_blacklist_isSet = !json[QString("inBlacklist")].isNull() && m_in_blacklist_isValid;

    m_s_djp_count_isValid = ::MelodixAPI::fromJsonValue(m_s_djp_count, json[QString("sDJPCount")]);
    m_s_djp_count_isSet = !json[QString("sDJPCount")].isNull() && m_s_djp_count_isValid;

    m_artist_name_isValid = ::MelodixAPI::fromJsonValue(m_artist_name, json[QString("artistName")]);
    m_artist_name_isSet = !json[QString("artistName")].isNull() && m_artist_name_isValid;

    m_playlist_count_isValid = ::MelodixAPI::fromJsonValue(m_playlist_count, json[QString("playlistCount")]);
    m_playlist_count_isSet = !json[QString("playlistCount")].isNull() && m_playlist_count_isValid;

    m_s_count_isValid = ::MelodixAPI::fromJsonValue(m_s_count, json[QString("sCount")]);
    m_s_count_isSet = !json[QString("sCount")].isNull() && m_s_count_isValid;

    m_new_follows_isValid = ::MelodixAPI::fromJsonValue(m_new_follows, json[QString("newFollows")]);
    m_new_follows_isSet = !json[QString("newFollows")].isNull() && m_new_follows_isValid;
}

QString MDGetUserDetail_200_response_profile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDetail_200_response_profile::asJsonObject() const {
    QJsonObject obj;
    if (m_privacy_item_unlimit.isSet()) {
        obj.insert(QString("privacyItemUnlimit"), ::MelodixAPI::toJsonValue(m_privacy_item_unlimit));
    }
    if (m_avatar_detail.isSet()) {
        obj.insert(QString("avatarDetail"), ::MelodixAPI::toJsonValue(m_avatar_detail));
    }
    if (m_avatar_img_id_isSet) {
        obj.insert(QString("avatarImgId"), ::MelodixAPI::toJsonValue(m_avatar_img_id));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::MelodixAPI::toJsonValue(m_gender));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::MelodixAPI::toJsonValue(m_nickname));
    }
    if (m_birthday_isSet) {
        obj.insert(QString("birthday"), ::MelodixAPI::toJsonValue(m_birthday));
    }
    if (m_auth_status_isSet) {
        obj.insert(QString("authStatus"), ::MelodixAPI::toJsonValue(m_auth_status));
    }
    if (m_detail_description_isSet) {
        obj.insert(QString("detailDescription"), ::MelodixAPI::toJsonValue(m_detail_description));
    }
    if (m_experts_isSet) {
        obj.insert(QString("experts"), ::MelodixAPI::toJsonValue(m_experts));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::MelodixAPI::toJsonValue(m_create_time));
    }
    if (m_mutual_isSet) {
        obj.insert(QString("mutual"), ::MelodixAPI::toJsonValue(m_mutual));
    }
    if (m_vip_type_isSet) {
        obj.insert(QString("vipType"), ::MelodixAPI::toJsonValue(m_vip_type));
    }
    if (m_background_img_id_str_isSet) {
        obj.insert(QString("backgroundImgIdStr"), ::MelodixAPI::toJsonValue(m_background_img_id_str));
    }
    if (m_avatar_img_id_str_isSet) {
        obj.insert(QString("avatarImgIdStr"), ::MelodixAPI::toJsonValue(m_avatar_img_id_str));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::MelodixAPI::toJsonValue(m_description));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::MelodixAPI::toJsonValue(m_user_id));
    }
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatarUrl"), ::MelodixAPI::toJsonValue(m_avatar_url));
    }
    if (m_background_img_id_isSet) {
        obj.insert(QString("backgroundImgId"), ::MelodixAPI::toJsonValue(m_background_img_id));
    }
    if (m_background_url_isSet) {
        obj.insert(QString("backgroundUrl"), ::MelodixAPI::toJsonValue(m_background_url));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("userType"), ::MelodixAPI::toJsonValue(m_user_type));
    }
    if (m_account_status_isSet) {
        obj.insert(QString("accountStatus"), ::MelodixAPI::toJsonValue(m_account_status));
    }
    if (m_province_isSet) {
        obj.insert(QString("province"), ::MelodixAPI::toJsonValue(m_province));
    }
    if (m_dj_status_isSet) {
        obj.insert(QString("djStatus"), ::MelodixAPI::toJsonValue(m_dj_status));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::MelodixAPI::toJsonValue(m_city));
    }
    if (m_default_avatar_isSet) {
        obj.insert(QString("defaultAvatar"), ::MelodixAPI::toJsonValue(m_default_avatar));
    }
    if (m_followed_isSet) {
        obj.insert(QString("followed"), ::MelodixAPI::toJsonValue(m_followed));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::MelodixAPI::toJsonValue(m_signature));
    }
    if (m_authority_isSet) {
        obj.insert(QString("authority"), ::MelodixAPI::toJsonValue(m_authority));
    }
    if (m_all_auth_types.size() > 0) {
        obj.insert(QString("allAuthTypes"), ::MelodixAPI::toJsonValue(m_all_auth_types));
    }
    if (m_followeds_isSet) {
        obj.insert(QString("followeds"), ::MelodixAPI::toJsonValue(m_followeds));
    }
    if (m_follows_isSet) {
        obj.insert(QString("follows"), ::MelodixAPI::toJsonValue(m_follows));
    }
    if (m_blacklist_isSet) {
        obj.insert(QString("blacklist"), ::MelodixAPI::toJsonValue(m_blacklist));
    }
    if (m_artist_id_isSet) {
        obj.insert(QString("artistId"), ::MelodixAPI::toJsonValue(m_artist_id));
    }
    if (m_event_count_isSet) {
        obj.insert(QString("eventCount"), ::MelodixAPI::toJsonValue(m_event_count));
    }
    if (m_all_subscribed_count_isSet) {
        obj.insert(QString("allSubscribedCount"), ::MelodixAPI::toJsonValue(m_all_subscribed_count));
    }
    if (m_playlist_be_subscribed_count_isSet) {
        obj.insert(QString("playlistBeSubscribedCount"), ::MelodixAPI::toJsonValue(m_playlist_be_subscribed_count));
    }
    if (m_main_auth_type.isSet()) {
        obj.insert(QString("mainAuthType"), ::MelodixAPI::toJsonValue(m_main_auth_type));
    }
    if (m_follow_me_isSet) {
        obj.insert(QString("followMe"), ::MelodixAPI::toJsonValue(m_follow_me));
    }
    if (m_artist_identity.size() > 0) {
        obj.insert(QString("artistIdentity"), ::MelodixAPI::toJsonValue(m_artist_identity));
    }
    if (m_c_count_isSet) {
        obj.insert(QString("cCount"), ::MelodixAPI::toJsonValue(m_c_count));
    }
    if (m_in_blacklist_isSet) {
        obj.insert(QString("inBlacklist"), ::MelodixAPI::toJsonValue(m_in_blacklist));
    }
    if (m_s_djp_count_isSet) {
        obj.insert(QString("sDJPCount"), ::MelodixAPI::toJsonValue(m_s_djp_count));
    }
    if (m_artist_name_isSet) {
        obj.insert(QString("artistName"), ::MelodixAPI::toJsonValue(m_artist_name));
    }
    if (m_playlist_count_isSet) {
        obj.insert(QString("playlistCount"), ::MelodixAPI::toJsonValue(m_playlist_count));
    }
    if (m_s_count_isSet) {
        obj.insert(QString("sCount"), ::MelodixAPI::toJsonValue(m_s_count));
    }
    if (m_new_follows_isSet) {
        obj.insert(QString("newFollows"), ::MelodixAPI::toJsonValue(m_new_follows));
    }
    return obj;
}

MDGetUserDetail_200_response_profile_privacyItemUnlimit MDGetUserDetail_200_response_profile::getPrivacyItemUnlimit() const {
    return m_privacy_item_unlimit;
}
void MDGetUserDetail_200_response_profile::setPrivacyItemUnlimit(const MDGetUserDetail_200_response_profile_privacyItemUnlimit &privacy_item_unlimit) {
    m_privacy_item_unlimit = privacy_item_unlimit;
    m_privacy_item_unlimit_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_privacy_item_unlimit_Set() const{
    return m_privacy_item_unlimit_isSet;
}

bool MDGetUserDetail_200_response_profile::is_privacy_item_unlimit_Valid() const{
    return m_privacy_item_unlimit_isValid;
}

MDGetUserDetail_200_response_profile_avatarDetail MDGetUserDetail_200_response_profile::getAvatarDetail() const {
    return m_avatar_detail;
}
void MDGetUserDetail_200_response_profile::setAvatarDetail(const MDGetUserDetail_200_response_profile_avatarDetail &avatar_detail) {
    m_avatar_detail = avatar_detail;
    m_avatar_detail_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_avatar_detail_Set() const{
    return m_avatar_detail_isSet;
}

bool MDGetUserDetail_200_response_profile::is_avatar_detail_Valid() const{
    return m_avatar_detail_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getAvatarImgId() const {
    return m_avatar_img_id;
}
void MDGetUserDetail_200_response_profile::setAvatarImgId(const qint32 &avatar_img_id) {
    m_avatar_img_id = avatar_img_id;
    m_avatar_img_id_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_avatar_img_id_Set() const{
    return m_avatar_img_id_isSet;
}

bool MDGetUserDetail_200_response_profile::is_avatar_img_id_Valid() const{
    return m_avatar_img_id_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getGender() const {
    return m_gender;
}
void MDGetUserDetail_200_response_profile::setGender(const qint32 &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_gender_Set() const{
    return m_gender_isSet;
}

bool MDGetUserDetail_200_response_profile::is_gender_Valid() const{
    return m_gender_isValid;
}

QString MDGetUserDetail_200_response_profile::getNickname() const {
    return m_nickname;
}
void MDGetUserDetail_200_response_profile::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool MDGetUserDetail_200_response_profile::is_nickname_Valid() const{
    return m_nickname_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getBirthday() const {
    return m_birthday;
}
void MDGetUserDetail_200_response_profile::setBirthday(const qint32 &birthday) {
    m_birthday = birthday;
    m_birthday_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_birthday_Set() const{
    return m_birthday_isSet;
}

bool MDGetUserDetail_200_response_profile::is_birthday_Valid() const{
    return m_birthday_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getAuthStatus() const {
    return m_auth_status;
}
void MDGetUserDetail_200_response_profile::setAuthStatus(const qint32 &auth_status) {
    m_auth_status = auth_status;
    m_auth_status_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_auth_status_Set() const{
    return m_auth_status_isSet;
}

bool MDGetUserDetail_200_response_profile::is_auth_status_Valid() const{
    return m_auth_status_isValid;
}

QString MDGetUserDetail_200_response_profile::getDetailDescription() const {
    return m_detail_description;
}
void MDGetUserDetail_200_response_profile::setDetailDescription(const QString &detail_description) {
    m_detail_description = detail_description;
    m_detail_description_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_detail_description_Set() const{
    return m_detail_description_isSet;
}

bool MDGetUserDetail_200_response_profile::is_detail_description_Valid() const{
    return m_detail_description_isValid;
}

MDObject MDGetUserDetail_200_response_profile::getExperts() const {
    return m_experts;
}
void MDGetUserDetail_200_response_profile::setExperts(const MDObject &experts) {
    m_experts = experts;
    m_experts_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_experts_Set() const{
    return m_experts_isSet;
}

bool MDGetUserDetail_200_response_profile::is_experts_Valid() const{
    return m_experts_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getCreateTime() const {
    return m_create_time;
}
void MDGetUserDetail_200_response_profile::setCreateTime(const qint32 &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool MDGetUserDetail_200_response_profile::is_create_time_Valid() const{
    return m_create_time_isValid;
}

bool MDGetUserDetail_200_response_profile::isMutual() const {
    return m_mutual;
}
void MDGetUserDetail_200_response_profile::setMutual(const bool &mutual) {
    m_mutual = mutual;
    m_mutual_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_mutual_Set() const{
    return m_mutual_isSet;
}

bool MDGetUserDetail_200_response_profile::is_mutual_Valid() const{
    return m_mutual_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getVipType() const {
    return m_vip_type;
}
void MDGetUserDetail_200_response_profile::setVipType(const qint32 &vip_type) {
    m_vip_type = vip_type;
    m_vip_type_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_vip_type_Set() const{
    return m_vip_type_isSet;
}

bool MDGetUserDetail_200_response_profile::is_vip_type_Valid() const{
    return m_vip_type_isValid;
}

QString MDGetUserDetail_200_response_profile::getBackgroundImgIdStr() const {
    return m_background_img_id_str;
}
void MDGetUserDetail_200_response_profile::setBackgroundImgIdStr(const QString &background_img_id_str) {
    m_background_img_id_str = background_img_id_str;
    m_background_img_id_str_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_background_img_id_str_Set() const{
    return m_background_img_id_str_isSet;
}

bool MDGetUserDetail_200_response_profile::is_background_img_id_str_Valid() const{
    return m_background_img_id_str_isValid;
}

QString MDGetUserDetail_200_response_profile::getAvatarImgIdStr() const {
    return m_avatar_img_id_str;
}
void MDGetUserDetail_200_response_profile::setAvatarImgIdStr(const QString &avatar_img_id_str) {
    m_avatar_img_id_str = avatar_img_id_str;
    m_avatar_img_id_str_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_avatar_img_id_str_Set() const{
    return m_avatar_img_id_str_isSet;
}

bool MDGetUserDetail_200_response_profile::is_avatar_img_id_str_Valid() const{
    return m_avatar_img_id_str_isValid;
}

QString MDGetUserDetail_200_response_profile::getDescription() const {
    return m_description;
}
void MDGetUserDetail_200_response_profile::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_description_Set() const{
    return m_description_isSet;
}

bool MDGetUserDetail_200_response_profile::is_description_Valid() const{
    return m_description_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getUserId() const {
    return m_user_id;
}
void MDGetUserDetail_200_response_profile::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool MDGetUserDetail_200_response_profile::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString MDGetUserDetail_200_response_profile::getAvatarUrl() const {
    return m_avatar_url;
}
void MDGetUserDetail_200_response_profile::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool MDGetUserDetail_200_response_profile::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getBackgroundImgId() const {
    return m_background_img_id;
}
void MDGetUserDetail_200_response_profile::setBackgroundImgId(const qint32 &background_img_id) {
    m_background_img_id = background_img_id;
    m_background_img_id_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_background_img_id_Set() const{
    return m_background_img_id_isSet;
}

bool MDGetUserDetail_200_response_profile::is_background_img_id_Valid() const{
    return m_background_img_id_isValid;
}

QString MDGetUserDetail_200_response_profile::getBackgroundUrl() const {
    return m_background_url;
}
void MDGetUserDetail_200_response_profile::setBackgroundUrl(const QString &background_url) {
    m_background_url = background_url;
    m_background_url_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_background_url_Set() const{
    return m_background_url_isSet;
}

bool MDGetUserDetail_200_response_profile::is_background_url_Valid() const{
    return m_background_url_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getUserType() const {
    return m_user_type;
}
void MDGetUserDetail_200_response_profile::setUserType(const qint32 &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool MDGetUserDetail_200_response_profile::is_user_type_Valid() const{
    return m_user_type_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getAccountStatus() const {
    return m_account_status;
}
void MDGetUserDetail_200_response_profile::setAccountStatus(const qint32 &account_status) {
    m_account_status = account_status;
    m_account_status_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_account_status_Set() const{
    return m_account_status_isSet;
}

bool MDGetUserDetail_200_response_profile::is_account_status_Valid() const{
    return m_account_status_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getProvince() const {
    return m_province;
}
void MDGetUserDetail_200_response_profile::setProvince(const qint32 &province) {
    m_province = province;
    m_province_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_province_Set() const{
    return m_province_isSet;
}

bool MDGetUserDetail_200_response_profile::is_province_Valid() const{
    return m_province_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getDjStatus() const {
    return m_dj_status;
}
void MDGetUserDetail_200_response_profile::setDjStatus(const qint32 &dj_status) {
    m_dj_status = dj_status;
    m_dj_status_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_dj_status_Set() const{
    return m_dj_status_isSet;
}

bool MDGetUserDetail_200_response_profile::is_dj_status_Valid() const{
    return m_dj_status_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getCity() const {
    return m_city;
}
void MDGetUserDetail_200_response_profile::setCity(const qint32 &city) {
    m_city = city;
    m_city_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_city_Set() const{
    return m_city_isSet;
}

bool MDGetUserDetail_200_response_profile::is_city_Valid() const{
    return m_city_isValid;
}

bool MDGetUserDetail_200_response_profile::isDefaultAvatar() const {
    return m_default_avatar;
}
void MDGetUserDetail_200_response_profile::setDefaultAvatar(const bool &default_avatar) {
    m_default_avatar = default_avatar;
    m_default_avatar_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_default_avatar_Set() const{
    return m_default_avatar_isSet;
}

bool MDGetUserDetail_200_response_profile::is_default_avatar_Valid() const{
    return m_default_avatar_isValid;
}

bool MDGetUserDetail_200_response_profile::isFollowed() const {
    return m_followed;
}
void MDGetUserDetail_200_response_profile::setFollowed(const bool &followed) {
    m_followed = followed;
    m_followed_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_followed_Set() const{
    return m_followed_isSet;
}

bool MDGetUserDetail_200_response_profile::is_followed_Valid() const{
    return m_followed_isValid;
}

QString MDGetUserDetail_200_response_profile::getSignature() const {
    return m_signature;
}
void MDGetUserDetail_200_response_profile::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_signature_Set() const{
    return m_signature_isSet;
}

bool MDGetUserDetail_200_response_profile::is_signature_Valid() const{
    return m_signature_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getAuthority() const {
    return m_authority;
}
void MDGetUserDetail_200_response_profile::setAuthority(const qint32 &authority) {
    m_authority = authority;
    m_authority_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_authority_Set() const{
    return m_authority_isSet;
}

bool MDGetUserDetail_200_response_profile::is_authority_Valid() const{
    return m_authority_isValid;
}

QList<MDGetUserDetail_200_response_profile_allAuthTypes_inner> MDGetUserDetail_200_response_profile::getAllAuthTypes() const {
    return m_all_auth_types;
}
void MDGetUserDetail_200_response_profile::setAllAuthTypes(const QList<MDGetUserDetail_200_response_profile_allAuthTypes_inner> &all_auth_types) {
    m_all_auth_types = all_auth_types;
    m_all_auth_types_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_all_auth_types_Set() const{
    return m_all_auth_types_isSet;
}

bool MDGetUserDetail_200_response_profile::is_all_auth_types_Valid() const{
    return m_all_auth_types_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getFolloweds() const {
    return m_followeds;
}
void MDGetUserDetail_200_response_profile::setFolloweds(const qint32 &followeds) {
    m_followeds = followeds;
    m_followeds_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_followeds_Set() const{
    return m_followeds_isSet;
}

bool MDGetUserDetail_200_response_profile::is_followeds_Valid() const{
    return m_followeds_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getFollows() const {
    return m_follows;
}
void MDGetUserDetail_200_response_profile::setFollows(const qint32 &follows) {
    m_follows = follows;
    m_follows_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_follows_Set() const{
    return m_follows_isSet;
}

bool MDGetUserDetail_200_response_profile::is_follows_Valid() const{
    return m_follows_isValid;
}

bool MDGetUserDetail_200_response_profile::isBlacklist() const {
    return m_blacklist;
}
void MDGetUserDetail_200_response_profile::setBlacklist(const bool &blacklist) {
    m_blacklist = blacklist;
    m_blacklist_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_blacklist_Set() const{
    return m_blacklist_isSet;
}

bool MDGetUserDetail_200_response_profile::is_blacklist_Valid() const{
    return m_blacklist_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getArtistId() const {
    return m_artist_id;
}
void MDGetUserDetail_200_response_profile::setArtistId(const qint32 &artist_id) {
    m_artist_id = artist_id;
    m_artist_id_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_artist_id_Set() const{
    return m_artist_id_isSet;
}

bool MDGetUserDetail_200_response_profile::is_artist_id_Valid() const{
    return m_artist_id_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getEventCount() const {
    return m_event_count;
}
void MDGetUserDetail_200_response_profile::setEventCount(const qint32 &event_count) {
    m_event_count = event_count;
    m_event_count_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_event_count_Set() const{
    return m_event_count_isSet;
}

bool MDGetUserDetail_200_response_profile::is_event_count_Valid() const{
    return m_event_count_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getAllSubscribedCount() const {
    return m_all_subscribed_count;
}
void MDGetUserDetail_200_response_profile::setAllSubscribedCount(const qint32 &all_subscribed_count) {
    m_all_subscribed_count = all_subscribed_count;
    m_all_subscribed_count_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_all_subscribed_count_Set() const{
    return m_all_subscribed_count_isSet;
}

bool MDGetUserDetail_200_response_profile::is_all_subscribed_count_Valid() const{
    return m_all_subscribed_count_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getPlaylistBeSubscribedCount() const {
    return m_playlist_be_subscribed_count;
}
void MDGetUserDetail_200_response_profile::setPlaylistBeSubscribedCount(const qint32 &playlist_be_subscribed_count) {
    m_playlist_be_subscribed_count = playlist_be_subscribed_count;
    m_playlist_be_subscribed_count_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_playlist_be_subscribed_count_Set() const{
    return m_playlist_be_subscribed_count_isSet;
}

bool MDGetUserDetail_200_response_profile::is_playlist_be_subscribed_count_Valid() const{
    return m_playlist_be_subscribed_count_isValid;
}

MDGetUserDetail_200_response_profile_mainAuthType MDGetUserDetail_200_response_profile::getMainAuthType() const {
    return m_main_auth_type;
}
void MDGetUserDetail_200_response_profile::setMainAuthType(const MDGetUserDetail_200_response_profile_mainAuthType &main_auth_type) {
    m_main_auth_type = main_auth_type;
    m_main_auth_type_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_main_auth_type_Set() const{
    return m_main_auth_type_isSet;
}

bool MDGetUserDetail_200_response_profile::is_main_auth_type_Valid() const{
    return m_main_auth_type_isValid;
}

bool MDGetUserDetail_200_response_profile::isFollowMe() const {
    return m_follow_me;
}
void MDGetUserDetail_200_response_profile::setFollowMe(const bool &follow_me) {
    m_follow_me = follow_me;
    m_follow_me_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_follow_me_Set() const{
    return m_follow_me_isSet;
}

bool MDGetUserDetail_200_response_profile::is_follow_me_Valid() const{
    return m_follow_me_isValid;
}

QList<qint32> MDGetUserDetail_200_response_profile::getArtistIdentity() const {
    return m_artist_identity;
}
void MDGetUserDetail_200_response_profile::setArtistIdentity(const QList<qint32> &artist_identity) {
    m_artist_identity = artist_identity;
    m_artist_identity_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_artist_identity_Set() const{
    return m_artist_identity_isSet;
}

bool MDGetUserDetail_200_response_profile::is_artist_identity_Valid() const{
    return m_artist_identity_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getCCount() const {
    return m_c_count;
}
void MDGetUserDetail_200_response_profile::setCCount(const qint32 &c_count) {
    m_c_count = c_count;
    m_c_count_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_c_count_Set() const{
    return m_c_count_isSet;
}

bool MDGetUserDetail_200_response_profile::is_c_count_Valid() const{
    return m_c_count_isValid;
}

bool MDGetUserDetail_200_response_profile::isInBlacklist() const {
    return m_in_blacklist;
}
void MDGetUserDetail_200_response_profile::setInBlacklist(const bool &in_blacklist) {
    m_in_blacklist = in_blacklist;
    m_in_blacklist_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_in_blacklist_Set() const{
    return m_in_blacklist_isSet;
}

bool MDGetUserDetail_200_response_profile::is_in_blacklist_Valid() const{
    return m_in_blacklist_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getSDjpCount() const {
    return m_s_djp_count;
}
void MDGetUserDetail_200_response_profile::setSDjpCount(const qint32 &s_djp_count) {
    m_s_djp_count = s_djp_count;
    m_s_djp_count_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_s_djp_count_Set() const{
    return m_s_djp_count_isSet;
}

bool MDGetUserDetail_200_response_profile::is_s_djp_count_Valid() const{
    return m_s_djp_count_isValid;
}

QString MDGetUserDetail_200_response_profile::getArtistName() const {
    return m_artist_name;
}
void MDGetUserDetail_200_response_profile::setArtistName(const QString &artist_name) {
    m_artist_name = artist_name;
    m_artist_name_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_artist_name_Set() const{
    return m_artist_name_isSet;
}

bool MDGetUserDetail_200_response_profile::is_artist_name_Valid() const{
    return m_artist_name_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getPlaylistCount() const {
    return m_playlist_count;
}
void MDGetUserDetail_200_response_profile::setPlaylistCount(const qint32 &playlist_count) {
    m_playlist_count = playlist_count;
    m_playlist_count_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_playlist_count_Set() const{
    return m_playlist_count_isSet;
}

bool MDGetUserDetail_200_response_profile::is_playlist_count_Valid() const{
    return m_playlist_count_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getSCount() const {
    return m_s_count;
}
void MDGetUserDetail_200_response_profile::setSCount(const qint32 &s_count) {
    m_s_count = s_count;
    m_s_count_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_s_count_Set() const{
    return m_s_count_isSet;
}

bool MDGetUserDetail_200_response_profile::is_s_count_Valid() const{
    return m_s_count_isValid;
}

qint32 MDGetUserDetail_200_response_profile::getNewFollows() const {
    return m_new_follows;
}
void MDGetUserDetail_200_response_profile::setNewFollows(const qint32 &new_follows) {
    m_new_follows = new_follows;
    m_new_follows_isSet = true;
}

bool MDGetUserDetail_200_response_profile::is_new_follows_Set() const{
    return m_new_follows_isSet;
}

bool MDGetUserDetail_200_response_profile::is_new_follows_Valid() const{
    return m_new_follows_isValid;
}

bool MDGetUserDetail_200_response_profile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_privacy_item_unlimit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_img_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vip_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_img_id_str_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_img_id_str_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_img_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dj_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_followed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_auth_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_followeds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_follows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blacklist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_subscribed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_be_subscribed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_auth_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_identity.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_c_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_blacklist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_djp_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_follows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDetail_200_response_profile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_privacy_item_unlimit_isValid && m_avatar_detail_isValid && m_avatar_img_id_isValid && m_gender_isValid && m_nickname_isValid && m_birthday_isValid && m_auth_status_isValid && m_detail_description_isValid && m_experts_isValid && m_create_time_isValid && m_mutual_isValid && m_vip_type_isValid && m_background_img_id_str_isValid && m_avatar_img_id_str_isValid && m_description_isValid && m_user_id_isValid && m_avatar_url_isValid && m_background_img_id_isValid && m_background_url_isValid && m_user_type_isValid && m_account_status_isValid && m_province_isValid && m_dj_status_isValid && m_city_isValid && m_default_avatar_isValid && m_followed_isValid && m_signature_isValid && m_authority_isValid && m_all_auth_types_isValid && m_followeds_isValid && m_follows_isValid && m_blacklist_isValid && m_artist_id_isValid && m_event_count_isValid && m_all_subscribed_count_isValid && m_playlist_be_subscribed_count_isValid && m_main_auth_type_isValid && m_follow_me_isValid && m_artist_identity_isValid && m_c_count_isValid && m_in_blacklist_isValid && m_s_djp_count_isValid && m_artist_name_isValid && m_playlist_count_isValid && m_s_count_isValid && m_new_follows_isValid && true;
}

} // namespace MelodixAPI
