/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserPlaylist_200_response_playlist_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserPlaylist_200_response_playlist_inner::MDGetUserPlaylist_200_response_playlist_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserPlaylist_200_response_playlist_inner::MDGetUserPlaylist_200_response_playlist_inner() {
    this->initializeModel();
}

MDGetUserPlaylist_200_response_playlist_inner::~MDGetUserPlaylist_200_response_playlist_inner() {}

void MDGetUserPlaylist_200_response_playlist_inner::initializeModel() {

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_background_cover_url_isSet = false;
    m_background_cover_url_isValid = false;

    m_title_image_url_isSet = false;
    m_title_image_url_isValid = false;

    m_english_title_isSet = false;
    m_english_title_isValid = false;

    m_cloud_track_count_isSet = false;
    m_cloud_track_count_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_total_duration_isSet = false;
    m_total_duration_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_track_update_time_isSet = false;
    m_track_update_time_isValid = false;

    m_track_count_isSet = false;
    m_track_count_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_cover_img_url_isSet = false;
    m_cover_img_url_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_track_number_update_time_isSet = false;
    m_track_number_update_time_isValid = false;

    m_play_count_isSet = false;
    m_play_count_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void MDGetUserPlaylist_200_response_playlist_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserPlaylist_200_response_playlist_inner::fromJsonObject(QJsonObject json) {

    m_creator_isValid = ::MelodixAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_background_cover_url_isValid = ::MelodixAPI::fromJsonValue(m_background_cover_url, json[QString("backgroundCoverUrl")]);
    m_background_cover_url_isSet = !json[QString("backgroundCoverUrl")].isNull() && m_background_cover_url_isValid;

    m_title_image_url_isValid = ::MelodixAPI::fromJsonValue(m_title_image_url, json[QString("titleImageUrl")]);
    m_title_image_url_isSet = !json[QString("titleImageUrl")].isNull() && m_title_image_url_isValid;

    m_english_title_isValid = ::MelodixAPI::fromJsonValue(m_english_title, json[QString("englishTitle")]);
    m_english_title_isSet = !json[QString("englishTitle")].isNull() && m_english_title_isValid;

    m_cloud_track_count_isValid = ::MelodixAPI::fromJsonValue(m_cloud_track_count, json[QString("cloudTrackCount")]);
    m_cloud_track_count_isSet = !json[QString("cloudTrackCount")].isNull() && m_cloud_track_count_isValid;

    m_user_id_isValid = ::MelodixAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_total_duration_isValid = ::MelodixAPI::fromJsonValue(m_total_duration, json[QString("totalDuration")]);
    m_total_duration_isSet = !json[QString("totalDuration")].isNull() && m_total_duration_isValid;

    m_privacy_isValid = ::MelodixAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_track_update_time_isValid = ::MelodixAPI::fromJsonValue(m_track_update_time, json[QString("trackUpdateTime")]);
    m_track_update_time_isSet = !json[QString("trackUpdateTime")].isNull() && m_track_update_time_isValid;

    m_track_count_isValid = ::MelodixAPI::fromJsonValue(m_track_count, json[QString("trackCount")]);
    m_track_count_isSet = !json[QString("trackCount")].isNull() && m_track_count_isValid;

    m_update_time_isValid = ::MelodixAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_cover_img_url_isValid = ::MelodixAPI::fromJsonValue(m_cover_img_url, json[QString("coverImgUrl")]);
    m_cover_img_url_isSet = !json[QString("coverImgUrl")].isNull() && m_cover_img_url_isValid;

    m_create_time_isValid = ::MelodixAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_track_number_update_time_isValid = ::MelodixAPI::fromJsonValue(m_track_number_update_time, json[QString("trackNumberUpdateTime")]);
    m_track_number_update_time_isSet = !json[QString("trackNumberUpdateTime")].isNull() && m_track_number_update_time_isValid;

    m_play_count_isValid = ::MelodixAPI::fromJsonValue(m_play_count, json[QString("playCount")]);
    m_play_count_isSet = !json[QString("playCount")].isNull() && m_play_count_isValid;

    m_description_isValid = ::MelodixAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_tags_isValid = ::MelodixAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_status_isValid = ::MelodixAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_name_isValid = ::MelodixAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString MDGetUserPlaylist_200_response_playlist_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserPlaylist_200_response_playlist_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_creator.isSet()) {
        obj.insert(QString("creator"), ::MelodixAPI::toJsonValue(m_creator));
    }
    if (m_background_cover_url_isSet) {
        obj.insert(QString("backgroundCoverUrl"), ::MelodixAPI::toJsonValue(m_background_cover_url));
    }
    if (m_title_image_url_isSet) {
        obj.insert(QString("titleImageUrl"), ::MelodixAPI::toJsonValue(m_title_image_url));
    }
    if (m_english_title_isSet) {
        obj.insert(QString("englishTitle"), ::MelodixAPI::toJsonValue(m_english_title));
    }
    if (m_cloud_track_count_isSet) {
        obj.insert(QString("cloudTrackCount"), ::MelodixAPI::toJsonValue(m_cloud_track_count));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::MelodixAPI::toJsonValue(m_user_id));
    }
    if (m_total_duration_isSet) {
        obj.insert(QString("totalDuration"), ::MelodixAPI::toJsonValue(m_total_duration));
    }
    if (m_privacy_isSet) {
        obj.insert(QString("privacy"), ::MelodixAPI::toJsonValue(m_privacy));
    }
    if (m_track_update_time_isSet) {
        obj.insert(QString("trackUpdateTime"), ::MelodixAPI::toJsonValue(m_track_update_time));
    }
    if (m_track_count_isSet) {
        obj.insert(QString("trackCount"), ::MelodixAPI::toJsonValue(m_track_count));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::MelodixAPI::toJsonValue(m_update_time));
    }
    if (m_cover_img_url_isSet) {
        obj.insert(QString("coverImgUrl"), ::MelodixAPI::toJsonValue(m_cover_img_url));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::MelodixAPI::toJsonValue(m_create_time));
    }
    if (m_track_number_update_time_isSet) {
        obj.insert(QString("trackNumberUpdateTime"), ::MelodixAPI::toJsonValue(m_track_number_update_time));
    }
    if (m_play_count_isSet) {
        obj.insert(QString("playCount"), ::MelodixAPI::toJsonValue(m_play_count));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::MelodixAPI::toJsonValue(m_description));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::MelodixAPI::toJsonValue(m_tags));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::MelodixAPI::toJsonValue(m_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::MelodixAPI::toJsonValue(m_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    return obj;
}

MDGetUserPlaylist_200_response_playlist_inner_creator MDGetUserPlaylist_200_response_playlist_inner::getCreator() const {
    return m_creator;
}
void MDGetUserPlaylist_200_response_playlist_inner::setCreator(const MDGetUserPlaylist_200_response_playlist_inner_creator &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_creator_Set() const{
    return m_creator_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_creator_Valid() const{
    return m_creator_isValid;
}

QString MDGetUserPlaylist_200_response_playlist_inner::getBackgroundCoverUrl() const {
    return m_background_cover_url;
}
void MDGetUserPlaylist_200_response_playlist_inner::setBackgroundCoverUrl(const QString &background_cover_url) {
    m_background_cover_url = background_cover_url;
    m_background_cover_url_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_background_cover_url_Set() const{
    return m_background_cover_url_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_background_cover_url_Valid() const{
    return m_background_cover_url_isValid;
}

QString MDGetUserPlaylist_200_response_playlist_inner::getTitleImageUrl() const {
    return m_title_image_url;
}
void MDGetUserPlaylist_200_response_playlist_inner::setTitleImageUrl(const QString &title_image_url) {
    m_title_image_url = title_image_url;
    m_title_image_url_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_title_image_url_Set() const{
    return m_title_image_url_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_title_image_url_Valid() const{
    return m_title_image_url_isValid;
}

QString MDGetUserPlaylist_200_response_playlist_inner::getEnglishTitle() const {
    return m_english_title;
}
void MDGetUserPlaylist_200_response_playlist_inner::setEnglishTitle(const QString &english_title) {
    m_english_title = english_title;
    m_english_title_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_english_title_Set() const{
    return m_english_title_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_english_title_Valid() const{
    return m_english_title_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner::getCloudTrackCount() const {
    return m_cloud_track_count;
}
void MDGetUserPlaylist_200_response_playlist_inner::setCloudTrackCount(const qint32 &cloud_track_count) {
    m_cloud_track_count = cloud_track_count;
    m_cloud_track_count_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_cloud_track_count_Set() const{
    return m_cloud_track_count_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_cloud_track_count_Valid() const{
    return m_cloud_track_count_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner::getUserId() const {
    return m_user_id;
}
void MDGetUserPlaylist_200_response_playlist_inner::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner::getTotalDuration() const {
    return m_total_duration;
}
void MDGetUserPlaylist_200_response_playlist_inner::setTotalDuration(const qint32 &total_duration) {
    m_total_duration = total_duration;
    m_total_duration_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_total_duration_Set() const{
    return m_total_duration_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_total_duration_Valid() const{
    return m_total_duration_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner::getPrivacy() const {
    return m_privacy;
}
void MDGetUserPlaylist_200_response_playlist_inner::setPrivacy(const qint32 &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_privacy_Valid() const{
    return m_privacy_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner::getTrackUpdateTime() const {
    return m_track_update_time;
}
void MDGetUserPlaylist_200_response_playlist_inner::setTrackUpdateTime(const qint32 &track_update_time) {
    m_track_update_time = track_update_time;
    m_track_update_time_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_track_update_time_Set() const{
    return m_track_update_time_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_track_update_time_Valid() const{
    return m_track_update_time_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner::getTrackCount() const {
    return m_track_count;
}
void MDGetUserPlaylist_200_response_playlist_inner::setTrackCount(const qint32 &track_count) {
    m_track_count = track_count;
    m_track_count_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_track_count_Set() const{
    return m_track_count_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_track_count_Valid() const{
    return m_track_count_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner::getUpdateTime() const {
    return m_update_time;
}
void MDGetUserPlaylist_200_response_playlist_inner::setUpdateTime(const qint32 &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString MDGetUserPlaylist_200_response_playlist_inner::getCoverImgUrl() const {
    return m_cover_img_url;
}
void MDGetUserPlaylist_200_response_playlist_inner::setCoverImgUrl(const QString &cover_img_url) {
    m_cover_img_url = cover_img_url;
    m_cover_img_url_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_cover_img_url_Set() const{
    return m_cover_img_url_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_cover_img_url_Valid() const{
    return m_cover_img_url_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner::getCreateTime() const {
    return m_create_time;
}
void MDGetUserPlaylist_200_response_playlist_inner::setCreateTime(const qint32 &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_create_time_Valid() const{
    return m_create_time_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner::getTrackNumberUpdateTime() const {
    return m_track_number_update_time;
}
void MDGetUserPlaylist_200_response_playlist_inner::setTrackNumberUpdateTime(const qint32 &track_number_update_time) {
    m_track_number_update_time = track_number_update_time;
    m_track_number_update_time_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_track_number_update_time_Set() const{
    return m_track_number_update_time_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_track_number_update_time_Valid() const{
    return m_track_number_update_time_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner::getPlayCount() const {
    return m_play_count;
}
void MDGetUserPlaylist_200_response_playlist_inner::setPlayCount(const qint32 &play_count) {
    m_play_count = play_count;
    m_play_count_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_play_count_Set() const{
    return m_play_count_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_play_count_Valid() const{
    return m_play_count_isValid;
}

QString MDGetUserPlaylist_200_response_playlist_inner::getDescription() const {
    return m_description;
}
void MDGetUserPlaylist_200_response_playlist_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_description_Set() const{
    return m_description_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> MDGetUserPlaylist_200_response_playlist_inner::getTags() const {
    return m_tags;
}
void MDGetUserPlaylist_200_response_playlist_inner::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 MDGetUserPlaylist_200_response_playlist_inner::getStatus() const {
    return m_status;
}
void MDGetUserPlaylist_200_response_playlist_inner::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_status_Set() const{
    return m_status_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString MDGetUserPlaylist_200_response_playlist_inner::getName() const {
    return m_name;
}
void MDGetUserPlaylist_200_response_playlist_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_name_Set() const{
    return m_name_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_name_Valid() const{
    return m_name_isValid;
}

double MDGetUserPlaylist_200_response_playlist_inner::getId() const {
    return m_id;
}
void MDGetUserPlaylist_200_response_playlist_inner::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetUserPlaylist_200_response_playlist_inner::is_id_Valid() const{
    return m_id_isValid;
}

bool MDGetUserPlaylist_200_response_playlist_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_cover_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_english_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_track_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_img_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_number_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserPlaylist_200_response_playlist_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creator_isValid && m_background_cover_url_isValid && m_title_image_url_isValid && m_english_title_isValid && m_cloud_track_count_isValid && m_user_id_isValid && m_total_duration_isValid && m_privacy_isValid && m_track_update_time_isValid && m_track_count_isValid && m_update_time_isValid && m_cover_img_url_isValid && m_create_time_isValid && m_track_number_update_time_isValid && m_play_count_isValid && m_description_isValid && m_tags_isValid && m_status_isValid && m_name_isValid && m_id_isValid && true;
}

} // namespace MelodixAPI
