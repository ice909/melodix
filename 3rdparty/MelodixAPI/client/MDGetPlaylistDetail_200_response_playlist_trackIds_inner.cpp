/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetPlaylistDetail_200_response_playlist_trackIds_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetPlaylistDetail_200_response_playlist_trackIds_inner::MDGetPlaylistDetail_200_response_playlist_trackIds_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetPlaylistDetail_200_response_playlist_trackIds_inner::MDGetPlaylistDetail_200_response_playlist_trackIds_inner() {
    this->initializeModel();
}

MDGetPlaylistDetail_200_response_playlist_trackIds_inner::~MDGetPlaylistDetail_200_response_playlist_trackIds_inner() {}

void MDGetPlaylistDetail_200_response_playlist_trackIds_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_v_isSet = false;
    m_v_isValid = false;

    m_t_isSet = false;
    m_t_isValid = false;

    m_at_isSet = false;
    m_at_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_rcmd_reason_isSet = false;
    m_rcmd_reason_isValid = false;
}

void MDGetPlaylistDetail_200_response_playlist_trackIds_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetPlaylistDetail_200_response_playlist_trackIds_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_v_isValid = ::MelodixAPI::fromJsonValue(m_v, json[QString("v")]);
    m_v_isSet = !json[QString("v")].isNull() && m_v_isValid;

    m_t_isValid = ::MelodixAPI::fromJsonValue(m_t, json[QString("t")]);
    m_t_isSet = !json[QString("t")].isNull() && m_t_isValid;

    m_at_isValid = ::MelodixAPI::fromJsonValue(m_at, json[QString("at")]);
    m_at_isSet = !json[QString("at")].isNull() && m_at_isValid;

    m_uid_isValid = ::MelodixAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_rcmd_reason_isValid = ::MelodixAPI::fromJsonValue(m_rcmd_reason, json[QString("rcmdReason")]);
    m_rcmd_reason_isSet = !json[QString("rcmdReason")].isNull() && m_rcmd_reason_isValid;
}

QString MDGetPlaylistDetail_200_response_playlist_trackIds_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetPlaylistDetail_200_response_playlist_trackIds_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_v_isSet) {
        obj.insert(QString("v"), ::MelodixAPI::toJsonValue(m_v));
    }
    if (m_t_isSet) {
        obj.insert(QString("t"), ::MelodixAPI::toJsonValue(m_t));
    }
    if (m_at_isSet) {
        obj.insert(QString("at"), ::MelodixAPI::toJsonValue(m_at));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::MelodixAPI::toJsonValue(m_uid));
    }
    if (m_rcmd_reason_isSet) {
        obj.insert(QString("rcmdReason"), ::MelodixAPI::toJsonValue(m_rcmd_reason));
    }
    return obj;
}

qint32 MDGetPlaylistDetail_200_response_playlist_trackIds_inner::getId() const {
    return m_id;
}
void MDGetPlaylistDetail_200_response_playlist_trackIds_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::is_id_Valid() const{
    return m_id_isValid;
}

qint32 MDGetPlaylistDetail_200_response_playlist_trackIds_inner::getV() const {
    return m_v;
}
void MDGetPlaylistDetail_200_response_playlist_trackIds_inner::setV(const qint32 &v) {
    m_v = v;
    m_v_isSet = true;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::is_v_Set() const{
    return m_v_isSet;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::is_v_Valid() const{
    return m_v_isValid;
}

qint32 MDGetPlaylistDetail_200_response_playlist_trackIds_inner::getT() const {
    return m_t;
}
void MDGetPlaylistDetail_200_response_playlist_trackIds_inner::setT(const qint32 &t) {
    m_t = t;
    m_t_isSet = true;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::is_t_Set() const{
    return m_t_isSet;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::is_t_Valid() const{
    return m_t_isValid;
}

qint32 MDGetPlaylistDetail_200_response_playlist_trackIds_inner::getAt() const {
    return m_at;
}
void MDGetPlaylistDetail_200_response_playlist_trackIds_inner::setAt(const qint32 &at) {
    m_at = at;
    m_at_isSet = true;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::is_at_Set() const{
    return m_at_isSet;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::is_at_Valid() const{
    return m_at_isValid;
}

qint32 MDGetPlaylistDetail_200_response_playlist_trackIds_inner::getUid() const {
    return m_uid;
}
void MDGetPlaylistDetail_200_response_playlist_trackIds_inner::setUid(const qint32 &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::is_uid_Set() const{
    return m_uid_isSet;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::is_uid_Valid() const{
    return m_uid_isValid;
}

QString MDGetPlaylistDetail_200_response_playlist_trackIds_inner::getRcmdReason() const {
    return m_rcmd_reason;
}
void MDGetPlaylistDetail_200_response_playlist_trackIds_inner::setRcmdReason(const QString &rcmd_reason) {
    m_rcmd_reason = rcmd_reason;
    m_rcmd_reason_isSet = true;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::is_rcmd_reason_Set() const{
    return m_rcmd_reason_isSet;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::is_rcmd_reason_Valid() const{
    return m_rcmd_reason_isValid;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcmd_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetPlaylistDetail_200_response_playlist_trackIds_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_v_isValid && m_t_isValid && m_at_isValid && m_uid_isValid && m_rcmd_reason_isValid && true;
}

} // namespace MelodixAPI
