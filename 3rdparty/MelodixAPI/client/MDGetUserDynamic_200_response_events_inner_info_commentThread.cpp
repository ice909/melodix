/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDynamic_200_response_events_inner_info_commentThread.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDynamic_200_response_events_inner_info_commentThread::MDGetUserDynamic_200_response_events_inner_info_commentThread(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDynamic_200_response_events_inner_info_commentThread::MDGetUserDynamic_200_response_events_inner_info_commentThread() {
    this->initializeModel();
}

MDGetUserDynamic_200_response_events_inner_info_commentThread::~MDGetUserDynamic_200_response_events_inner_info_commentThread() {}

void MDGetUserDynamic_200_response_events_inner_info_commentThread::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_resource_info_isSet = false;
    m_resource_info_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_liked_count_isSet = false;
    m_liked_count_isValid = false;

    m_share_count_isSet = false;
    m_share_count_isValid = false;

    m_hot_count_isSet = false;
    m_hot_count_isValid = false;

    m_latest_liked_users_isSet = false;
    m_latest_liked_users_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_owner_id_isSet = false;
    m_resource_owner_id_isValid = false;

    m_resource_title_isSet = false;
    m_resource_title_isValid = false;
}

void MDGetUserDynamic_200_response_events_inner_info_commentThread::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDynamic_200_response_events_inner_info_commentThread::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_resource_info_isValid = ::MelodixAPI::fromJsonValue(m_resource_info, json[QString("resourceInfo")]);
    m_resource_info_isSet = !json[QString("resourceInfo")].isNull() && m_resource_info_isValid;

    m_resource_type_isValid = ::MelodixAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_comment_count_isValid = ::MelodixAPI::fromJsonValue(m_comment_count, json[QString("commentCount")]);
    m_comment_count_isSet = !json[QString("commentCount")].isNull() && m_comment_count_isValid;

    m_liked_count_isValid = ::MelodixAPI::fromJsonValue(m_liked_count, json[QString("likedCount")]);
    m_liked_count_isSet = !json[QString("likedCount")].isNull() && m_liked_count_isValid;

    m_share_count_isValid = ::MelodixAPI::fromJsonValue(m_share_count, json[QString("shareCount")]);
    m_share_count_isSet = !json[QString("shareCount")].isNull() && m_share_count_isValid;

    m_hot_count_isValid = ::MelodixAPI::fromJsonValue(m_hot_count, json[QString("hotCount")]);
    m_hot_count_isSet = !json[QString("hotCount")].isNull() && m_hot_count_isValid;

    m_latest_liked_users_isValid = ::MelodixAPI::fromJsonValue(m_latest_liked_users, json[QString("latestLikedUsers")]);
    m_latest_liked_users_isSet = !json[QString("latestLikedUsers")].isNull() && m_latest_liked_users_isValid;

    m_resource_id_isValid = ::MelodixAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_owner_id_isValid = ::MelodixAPI::fromJsonValue(m_resource_owner_id, json[QString("resourceOwnerId")]);
    m_resource_owner_id_isSet = !json[QString("resourceOwnerId")].isNull() && m_resource_owner_id_isValid;

    m_resource_title_isValid = ::MelodixAPI::fromJsonValue(m_resource_title, json[QString("resourceTitle")]);
    m_resource_title_isSet = !json[QString("resourceTitle")].isNull() && m_resource_title_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_info_commentThread::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDynamic_200_response_events_inner_info_commentThread::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_resource_info.isSet()) {
        obj.insert(QString("resourceInfo"), ::MelodixAPI::toJsonValue(m_resource_info));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::MelodixAPI::toJsonValue(m_resource_type));
    }
    if (m_comment_count_isSet) {
        obj.insert(QString("commentCount"), ::MelodixAPI::toJsonValue(m_comment_count));
    }
    if (m_liked_count_isSet) {
        obj.insert(QString("likedCount"), ::MelodixAPI::toJsonValue(m_liked_count));
    }
    if (m_share_count_isSet) {
        obj.insert(QString("shareCount"), ::MelodixAPI::toJsonValue(m_share_count));
    }
    if (m_hot_count_isSet) {
        obj.insert(QString("hotCount"), ::MelodixAPI::toJsonValue(m_hot_count));
    }
    if (m_latest_liked_users.size() > 0) {
        obj.insert(QString("latestLikedUsers"), ::MelodixAPI::toJsonValue(m_latest_liked_users));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::MelodixAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_owner_id_isSet) {
        obj.insert(QString("resourceOwnerId"), ::MelodixAPI::toJsonValue(m_resource_owner_id));
    }
    if (m_resource_title_isSet) {
        obj.insert(QString("resourceTitle"), ::MelodixAPI::toJsonValue(m_resource_title));
    }
    return obj;
}

QString MDGetUserDynamic_200_response_events_inner_info_commentThread::getId() const {
    return m_id;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_id_Valid() const{
    return m_id_isValid;
}

MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo MDGetUserDynamic_200_response_events_inner_info_commentThread::getResourceInfo() const {
    return m_resource_info;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread::setResourceInfo(const MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo &resource_info) {
    m_resource_info = resource_info;
    m_resource_info_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_resource_info_Set() const{
    return m_resource_info_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_resource_info_Valid() const{
    return m_resource_info_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info_commentThread::getResourceType() const {
    return m_resource_type;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread::setResourceType(const qint32 &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info_commentThread::getCommentCount() const {
    return m_comment_count;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread::setCommentCount(const qint32 &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info_commentThread::getLikedCount() const {
    return m_liked_count;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread::setLikedCount(const qint32 &liked_count) {
    m_liked_count = liked_count;
    m_liked_count_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_liked_count_Set() const{
    return m_liked_count_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_liked_count_Valid() const{
    return m_liked_count_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info_commentThread::getShareCount() const {
    return m_share_count;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread::setShareCount(const qint32 &share_count) {
    m_share_count = share_count;
    m_share_count_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_share_count_Set() const{
    return m_share_count_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_share_count_Valid() const{
    return m_share_count_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info_commentThread::getHotCount() const {
    return m_hot_count;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread::setHotCount(const qint32 &hot_count) {
    m_hot_count = hot_count;
    m_hot_count_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_hot_count_Set() const{
    return m_hot_count_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_hot_count_Valid() const{
    return m_hot_count_isValid;
}

QList<MDGetUserDynamic_200_response_events_inner_info_commentThread_latestLikedUsers_inner> MDGetUserDynamic_200_response_events_inner_info_commentThread::getLatestLikedUsers() const {
    return m_latest_liked_users;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread::setLatestLikedUsers(const QList<MDGetUserDynamic_200_response_events_inner_info_commentThread_latestLikedUsers_inner> &latest_liked_users) {
    m_latest_liked_users = latest_liked_users;
    m_latest_liked_users_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_latest_liked_users_Set() const{
    return m_latest_liked_users_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_latest_liked_users_Valid() const{
    return m_latest_liked_users_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info_commentThread::getResourceId() const {
    return m_resource_id;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread::setResourceId(const qint32 &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info_commentThread::getResourceOwnerId() const {
    return m_resource_owner_id;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread::setResourceOwnerId(const qint32 &resource_owner_id) {
    m_resource_owner_id = resource_owner_id;
    m_resource_owner_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_resource_owner_id_Set() const{
    return m_resource_owner_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_resource_owner_id_Valid() const{
    return m_resource_owner_id_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_info_commentThread::getResourceTitle() const {
    return m_resource_title;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread::setResourceTitle(const QString &resource_title) {
    m_resource_title = resource_title;
    m_resource_title_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_resource_title_Set() const{
    return m_resource_title_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::is_resource_title_Valid() const{
    return m_resource_title_isValid;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liked_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hot_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_liked_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_resource_info_isValid && m_resource_type_isValid && m_comment_count_isValid && m_liked_count_isValid && m_share_count_isValid && m_hot_count_isValid && m_latest_liked_users_isValid && m_resource_id_isValid && m_resource_owner_id_isValid && m_resource_title_isValid && true;
}

} // namespace MelodixAPI
