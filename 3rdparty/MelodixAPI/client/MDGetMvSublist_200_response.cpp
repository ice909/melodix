/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetMvSublist_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetMvSublist_200_response::MDGetMvSublist_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetMvSublist_200_response::MDGetMvSublist_200_response() {
    this->initializeModel();
}

MDGetMvSublist_200_response::~MDGetMvSublist_200_response() {}

void MDGetMvSublist_200_response::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_has_more_isSet = false;
    m_has_more_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;
}

void MDGetMvSublist_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetMvSublist_200_response::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::MelodixAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_data_isValid = ::MelodixAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_has_more_isValid = ::MelodixAPI::fromJsonValue(m_has_more, json[QString("hasMore")]);
    m_has_more_isSet = !json[QString("hasMore")].isNull() && m_has_more_isValid;

    m_count_isValid = ::MelodixAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;
}

QString MDGetMvSublist_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetMvSublist_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::MelodixAPI::toJsonValue(m_code));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::MelodixAPI::toJsonValue(m_data));
    }
    if (m_has_more_isSet) {
        obj.insert(QString("hasMore"), ::MelodixAPI::toJsonValue(m_has_more));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::MelodixAPI::toJsonValue(m_count));
    }
    return obj;
}

qint32 MDGetMvSublist_200_response::getCode() const {
    return m_code;
}
void MDGetMvSublist_200_response::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool MDGetMvSublist_200_response::is_code_Set() const{
    return m_code_isSet;
}

bool MDGetMvSublist_200_response::is_code_Valid() const{
    return m_code_isValid;
}

QList<MDGetMvSublist_200_response_data_inner> MDGetMvSublist_200_response::getData() const {
    return m_data;
}
void MDGetMvSublist_200_response::setData(const QList<MDGetMvSublist_200_response_data_inner> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool MDGetMvSublist_200_response::is_data_Set() const{
    return m_data_isSet;
}

bool MDGetMvSublist_200_response::is_data_Valid() const{
    return m_data_isValid;
}

bool MDGetMvSublist_200_response::isHasMore() const {
    return m_has_more;
}
void MDGetMvSublist_200_response::setHasMore(const bool &has_more) {
    m_has_more = has_more;
    m_has_more_isSet = true;
}

bool MDGetMvSublist_200_response::is_has_more_Set() const{
    return m_has_more_isSet;
}

bool MDGetMvSublist_200_response::is_has_more_Valid() const{
    return m_has_more_isValid;
}

qint32 MDGetMvSublist_200_response::getCount() const {
    return m_count;
}
void MDGetMvSublist_200_response::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool MDGetMvSublist_200_response::is_count_Set() const{
    return m_count_isSet;
}

bool MDGetMvSublist_200_response::is_count_Valid() const{
    return m_count_isValid;
}

bool MDGetMvSublist_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_more_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetMvSublist_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_data_isValid && m_has_more_isValid && m_count_isValid && true;
}

} // namespace MelodixAPI
