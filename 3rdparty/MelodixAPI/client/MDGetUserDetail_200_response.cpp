/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDetail_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDetail_200_response::MDGetUserDetail_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDetail_200_response::MDGetUserDetail_200_response() {
    this->initializeModel();
}

MDGetUserDetail_200_response::~MDGetUserDetail_200_response() {}

void MDGetUserDetail_200_response::initializeModel() {

    m_identify_isSet = false;
    m_identify_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_listen_songs_isSet = false;
    m_listen_songs_isValid = false;

    m_user_point_isSet = false;
    m_user_point_isValid = false;

    m_mobile_sign_isSet = false;
    m_mobile_sign_isValid = false;

    m_pc_sign_isSet = false;
    m_pc_sign_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_people_can_see_my_play_record_isSet = false;
    m_people_can_see_my_play_record_isValid = false;

    m_bindings_isSet = false;
    m_bindings_isValid = false;

    m_ad_valid_isSet = false;
    m_ad_valid_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_new_user_isSet = false;
    m_new_user_isValid = false;

    m_recall_user_isSet = false;
    m_recall_user_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_create_days_isSet = false;
    m_create_days_isValid = false;

    m_profile_village_info_isSet = false;
    m_profile_village_info_isValid = false;
}

void MDGetUserDetail_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDetail_200_response::fromJsonObject(QJsonObject json) {

    m_identify_isValid = ::MelodixAPI::fromJsonValue(m_identify, json[QString("identify")]);
    m_identify_isSet = !json[QString("identify")].isNull() && m_identify_isValid;

    m_products_isValid = ::MelodixAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_level_isValid = ::MelodixAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_listen_songs_isValid = ::MelodixAPI::fromJsonValue(m_listen_songs, json[QString("listenSongs")]);
    m_listen_songs_isSet = !json[QString("listenSongs")].isNull() && m_listen_songs_isValid;

    m_user_point_isValid = ::MelodixAPI::fromJsonValue(m_user_point, json[QString("userPoint")]);
    m_user_point_isSet = !json[QString("userPoint")].isNull() && m_user_point_isValid;

    m_mobile_sign_isValid = ::MelodixAPI::fromJsonValue(m_mobile_sign, json[QString("mobileSign")]);
    m_mobile_sign_isSet = !json[QString("mobileSign")].isNull() && m_mobile_sign_isValid;

    m_pc_sign_isValid = ::MelodixAPI::fromJsonValue(m_pc_sign, json[QString("pcSign")]);
    m_pc_sign_isSet = !json[QString("pcSign")].isNull() && m_pc_sign_isValid;

    m_profile_isValid = ::MelodixAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_people_can_see_my_play_record_isValid = ::MelodixAPI::fromJsonValue(m_people_can_see_my_play_record, json[QString("peopleCanSeeMyPlayRecord")]);
    m_people_can_see_my_play_record_isSet = !json[QString("peopleCanSeeMyPlayRecord")].isNull() && m_people_can_see_my_play_record_isValid;

    m_bindings_isValid = ::MelodixAPI::fromJsonValue(m_bindings, json[QString("bindings")]);
    m_bindings_isSet = !json[QString("bindings")].isNull() && m_bindings_isValid;

    m_ad_valid_isValid = ::MelodixAPI::fromJsonValue(m_ad_valid, json[QString("adValid")]);
    m_ad_valid_isSet = !json[QString("adValid")].isNull() && m_ad_valid_isValid;

    m_code_isValid = ::MelodixAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_new_user_isValid = ::MelodixAPI::fromJsonValue(m_new_user, json[QString("newUser")]);
    m_new_user_isSet = !json[QString("newUser")].isNull() && m_new_user_isValid;

    m_recall_user_isValid = ::MelodixAPI::fromJsonValue(m_recall_user, json[QString("recallUser")]);
    m_recall_user_isSet = !json[QString("recallUser")].isNull() && m_recall_user_isValid;

    m_create_time_isValid = ::MelodixAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_create_days_isValid = ::MelodixAPI::fromJsonValue(m_create_days, json[QString("createDays")]);
    m_create_days_isSet = !json[QString("createDays")].isNull() && m_create_days_isValid;

    m_profile_village_info_isValid = ::MelodixAPI::fromJsonValue(m_profile_village_info, json[QString("profileVillageInfo")]);
    m_profile_village_info_isSet = !json[QString("profileVillageInfo")].isNull() && m_profile_village_info_isValid;
}

QString MDGetUserDetail_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDetail_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_identify.isSet()) {
        obj.insert(QString("identify"), ::MelodixAPI::toJsonValue(m_identify));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::MelodixAPI::toJsonValue(m_products));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::MelodixAPI::toJsonValue(m_level));
    }
    if (m_listen_songs_isSet) {
        obj.insert(QString("listenSongs"), ::MelodixAPI::toJsonValue(m_listen_songs));
    }
    if (m_user_point.isSet()) {
        obj.insert(QString("userPoint"), ::MelodixAPI::toJsonValue(m_user_point));
    }
    if (m_mobile_sign_isSet) {
        obj.insert(QString("mobileSign"), ::MelodixAPI::toJsonValue(m_mobile_sign));
    }
    if (m_pc_sign_isSet) {
        obj.insert(QString("pcSign"), ::MelodixAPI::toJsonValue(m_pc_sign));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("profile"), ::MelodixAPI::toJsonValue(m_profile));
    }
    if (m_people_can_see_my_play_record_isSet) {
        obj.insert(QString("peopleCanSeeMyPlayRecord"), ::MelodixAPI::toJsonValue(m_people_can_see_my_play_record));
    }
    if (m_bindings.size() > 0) {
        obj.insert(QString("bindings"), ::MelodixAPI::toJsonValue(m_bindings));
    }
    if (m_ad_valid_isSet) {
        obj.insert(QString("adValid"), ::MelodixAPI::toJsonValue(m_ad_valid));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::MelodixAPI::toJsonValue(m_code));
    }
    if (m_new_user_isSet) {
        obj.insert(QString("newUser"), ::MelodixAPI::toJsonValue(m_new_user));
    }
    if (m_recall_user_isSet) {
        obj.insert(QString("recallUser"), ::MelodixAPI::toJsonValue(m_recall_user));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::MelodixAPI::toJsonValue(m_create_time));
    }
    if (m_create_days_isSet) {
        obj.insert(QString("createDays"), ::MelodixAPI::toJsonValue(m_create_days));
    }
    if (m_profile_village_info.isSet()) {
        obj.insert(QString("profileVillageInfo"), ::MelodixAPI::toJsonValue(m_profile_village_info));
    }
    return obj;
}

MDGetUserDetail_200_response_identify MDGetUserDetail_200_response::getIdentify() const {
    return m_identify;
}
void MDGetUserDetail_200_response::setIdentify(const MDGetUserDetail_200_response_identify &identify) {
    m_identify = identify;
    m_identify_isSet = true;
}

bool MDGetUserDetail_200_response::is_identify_Set() const{
    return m_identify_isSet;
}

bool MDGetUserDetail_200_response::is_identify_Valid() const{
    return m_identify_isValid;
}

QList<MDGetUserDetail_200_response_products_inner> MDGetUserDetail_200_response::getProducts() const {
    return m_products;
}
void MDGetUserDetail_200_response::setProducts(const QList<MDGetUserDetail_200_response_products_inner> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool MDGetUserDetail_200_response::is_products_Set() const{
    return m_products_isSet;
}

bool MDGetUserDetail_200_response::is_products_Valid() const{
    return m_products_isValid;
}

qint32 MDGetUserDetail_200_response::getLevel() const {
    return m_level;
}
void MDGetUserDetail_200_response::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool MDGetUserDetail_200_response::is_level_Set() const{
    return m_level_isSet;
}

bool MDGetUserDetail_200_response::is_level_Valid() const{
    return m_level_isValid;
}

qint32 MDGetUserDetail_200_response::getListenSongs() const {
    return m_listen_songs;
}
void MDGetUserDetail_200_response::setListenSongs(const qint32 &listen_songs) {
    m_listen_songs = listen_songs;
    m_listen_songs_isSet = true;
}

bool MDGetUserDetail_200_response::is_listen_songs_Set() const{
    return m_listen_songs_isSet;
}

bool MDGetUserDetail_200_response::is_listen_songs_Valid() const{
    return m_listen_songs_isValid;
}

MDGetUserDetail_200_response_userPoint MDGetUserDetail_200_response::getUserPoint() const {
    return m_user_point;
}
void MDGetUserDetail_200_response::setUserPoint(const MDGetUserDetail_200_response_userPoint &user_point) {
    m_user_point = user_point;
    m_user_point_isSet = true;
}

bool MDGetUserDetail_200_response::is_user_point_Set() const{
    return m_user_point_isSet;
}

bool MDGetUserDetail_200_response::is_user_point_Valid() const{
    return m_user_point_isValid;
}

bool MDGetUserDetail_200_response::isMobileSign() const {
    return m_mobile_sign;
}
void MDGetUserDetail_200_response::setMobileSign(const bool &mobile_sign) {
    m_mobile_sign = mobile_sign;
    m_mobile_sign_isSet = true;
}

bool MDGetUserDetail_200_response::is_mobile_sign_Set() const{
    return m_mobile_sign_isSet;
}

bool MDGetUserDetail_200_response::is_mobile_sign_Valid() const{
    return m_mobile_sign_isValid;
}

bool MDGetUserDetail_200_response::isPcSign() const {
    return m_pc_sign;
}
void MDGetUserDetail_200_response::setPcSign(const bool &pc_sign) {
    m_pc_sign = pc_sign;
    m_pc_sign_isSet = true;
}

bool MDGetUserDetail_200_response::is_pc_sign_Set() const{
    return m_pc_sign_isSet;
}

bool MDGetUserDetail_200_response::is_pc_sign_Valid() const{
    return m_pc_sign_isValid;
}

MDGetUserDetail_200_response_profile MDGetUserDetail_200_response::getProfile() const {
    return m_profile;
}
void MDGetUserDetail_200_response::setProfile(const MDGetUserDetail_200_response_profile &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool MDGetUserDetail_200_response::is_profile_Set() const{
    return m_profile_isSet;
}

bool MDGetUserDetail_200_response::is_profile_Valid() const{
    return m_profile_isValid;
}

bool MDGetUserDetail_200_response::isPeopleCanSeeMyPlayRecord() const {
    return m_people_can_see_my_play_record;
}
void MDGetUserDetail_200_response::setPeopleCanSeeMyPlayRecord(const bool &people_can_see_my_play_record) {
    m_people_can_see_my_play_record = people_can_see_my_play_record;
    m_people_can_see_my_play_record_isSet = true;
}

bool MDGetUserDetail_200_response::is_people_can_see_my_play_record_Set() const{
    return m_people_can_see_my_play_record_isSet;
}

bool MDGetUserDetail_200_response::is_people_can_see_my_play_record_Valid() const{
    return m_people_can_see_my_play_record_isValid;
}

QList<MDGetUserDetail_200_response_bindings_inner> MDGetUserDetail_200_response::getBindings() const {
    return m_bindings;
}
void MDGetUserDetail_200_response::setBindings(const QList<MDGetUserDetail_200_response_bindings_inner> &bindings) {
    m_bindings = bindings;
    m_bindings_isSet = true;
}

bool MDGetUserDetail_200_response::is_bindings_Set() const{
    return m_bindings_isSet;
}

bool MDGetUserDetail_200_response::is_bindings_Valid() const{
    return m_bindings_isValid;
}

bool MDGetUserDetail_200_response::isAdValid() const {
    return m_ad_valid;
}
void MDGetUserDetail_200_response::setAdValid(const bool &ad_valid) {
    m_ad_valid = ad_valid;
    m_ad_valid_isSet = true;
}

bool MDGetUserDetail_200_response::is_ad_valid_Set() const{
    return m_ad_valid_isSet;
}

bool MDGetUserDetail_200_response::is_ad_valid_Valid() const{
    return m_ad_valid_isValid;
}

qint32 MDGetUserDetail_200_response::getCode() const {
    return m_code;
}
void MDGetUserDetail_200_response::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool MDGetUserDetail_200_response::is_code_Set() const{
    return m_code_isSet;
}

bool MDGetUserDetail_200_response::is_code_Valid() const{
    return m_code_isValid;
}

bool MDGetUserDetail_200_response::isNewUser() const {
    return m_new_user;
}
void MDGetUserDetail_200_response::setNewUser(const bool &new_user) {
    m_new_user = new_user;
    m_new_user_isSet = true;
}

bool MDGetUserDetail_200_response::is_new_user_Set() const{
    return m_new_user_isSet;
}

bool MDGetUserDetail_200_response::is_new_user_Valid() const{
    return m_new_user_isValid;
}

bool MDGetUserDetail_200_response::isRecallUser() const {
    return m_recall_user;
}
void MDGetUserDetail_200_response::setRecallUser(const bool &recall_user) {
    m_recall_user = recall_user;
    m_recall_user_isSet = true;
}

bool MDGetUserDetail_200_response::is_recall_user_Set() const{
    return m_recall_user_isSet;
}

bool MDGetUserDetail_200_response::is_recall_user_Valid() const{
    return m_recall_user_isValid;
}

qint32 MDGetUserDetail_200_response::getCreateTime() const {
    return m_create_time;
}
void MDGetUserDetail_200_response::setCreateTime(const qint32 &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool MDGetUserDetail_200_response::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool MDGetUserDetail_200_response::is_create_time_Valid() const{
    return m_create_time_isValid;
}

qint32 MDGetUserDetail_200_response::getCreateDays() const {
    return m_create_days;
}
void MDGetUserDetail_200_response::setCreateDays(const qint32 &create_days) {
    m_create_days = create_days;
    m_create_days_isSet = true;
}

bool MDGetUserDetail_200_response::is_create_days_Set() const{
    return m_create_days_isSet;
}

bool MDGetUserDetail_200_response::is_create_days_Valid() const{
    return m_create_days_isValid;
}

MDGetUserDetail_200_response_profileVillageInfo MDGetUserDetail_200_response::getProfileVillageInfo() const {
    return m_profile_village_info;
}
void MDGetUserDetail_200_response::setProfileVillageInfo(const MDGetUserDetail_200_response_profileVillageInfo &profile_village_info) {
    m_profile_village_info = profile_village_info;
    m_profile_village_info_isSet = true;
}

bool MDGetUserDetail_200_response::is_profile_village_info_Set() const{
    return m_profile_village_info_isSet;
}

bool MDGetUserDetail_200_response::is_profile_village_info_Valid() const{
    return m_profile_village_info_isValid;
}

bool MDGetUserDetail_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identify.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listen_songs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_sign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pc_sign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_people_can_see_my_play_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bindings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recall_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_village_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDetail_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identify_isValid && m_products_isValid && m_level_isValid && m_listen_songs_isValid && m_user_point_isValid && m_mobile_sign_isValid && m_pc_sign_isValid && m_profile_isValid && m_people_can_see_my_play_record_isValid && m_bindings_isValid && m_ad_valid_isValid && m_code_isValid && m_new_user_isValid && m_recall_user_isValid && m_create_time_isValid && m_create_days_isValid && m_profile_village_info_isValid && true;
}

} // namespace MelodixAPI
