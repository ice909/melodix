/**
 * MelodixAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetPurchasedAlbum_200_response_paidAlbums_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetPurchasedAlbum_200_response_paidAlbums_inner::MDGetPurchasedAlbum_200_response_paidAlbums_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetPurchasedAlbum_200_response_paidAlbums_inner::MDGetPurchasedAlbum_200_response_paidAlbums_inner() {
    this->initializeModel();
}

MDGetPurchasedAlbum_200_response_paidAlbums_inner::~MDGetPurchasedAlbum_200_response_paidAlbums_inner() {}

void MDGetPurchasedAlbum_200_response_paidAlbums_inner::initializeModel() {

    m_paid_time_isSet = false;
    m_paid_time_isValid = false;

    m_album_id_isSet = false;
    m_album_id_isValid = false;

    m_cover_isSet = false;
    m_cover_isValid = false;

    m_album_name_isSet = false;
    m_album_name_isValid = false;

    m_artist_isSet = false;
    m_artist_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_valid_isSet = false;
    m_valid_isValid = false;

    m_bought_count_isSet = false;
    m_bought_count_isValid = false;

    m_sub_isSet = false;
    m_sub_isValid = false;

    m_alias_name_isSet = false;
    m_alias_name_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;
}

void MDGetPurchasedAlbum_200_response_paidAlbums_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetPurchasedAlbum_200_response_paidAlbums_inner::fromJsonObject(QJsonObject json) {

    m_paid_time_isValid = ::MelodixAPI::fromJsonValue(m_paid_time, json[QString("paidTime")]);
    m_paid_time_isSet = !json[QString("paidTime")].isNull() && m_paid_time_isValid;

    m_album_id_isValid = ::MelodixAPI::fromJsonValue(m_album_id, json[QString("albumId")]);
    m_album_id_isSet = !json[QString("albumId")].isNull() && m_album_id_isValid;

    m_cover_isValid = ::MelodixAPI::fromJsonValue(m_cover, json[QString("cover")]);
    m_cover_isSet = !json[QString("cover")].isNull() && m_cover_isValid;

    m_album_name_isValid = ::MelodixAPI::fromJsonValue(m_album_name, json[QString("albumName")]);
    m_album_name_isSet = !json[QString("albumName")].isNull() && m_album_name_isValid;

    m_artist_isValid = ::MelodixAPI::fromJsonValue(m_artist, json[QString("artist")]);
    m_artist_isSet = !json[QString("artist")].isNull() && m_artist_isValid;

    m_artists_isValid = ::MelodixAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_valid_isValid = ::MelodixAPI::fromJsonValue(m_valid, json[QString("valid")]);
    m_valid_isSet = !json[QString("valid")].isNull() && m_valid_isValid;

    m_bought_count_isValid = ::MelodixAPI::fromJsonValue(m_bought_count, json[QString("boughtCount")]);
    m_bought_count_isSet = !json[QString("boughtCount")].isNull() && m_bought_count_isValid;

    m_sub_isValid = ::MelodixAPI::fromJsonValue(m_sub, json[QString("sub")]);
    m_sub_isSet = !json[QString("sub")].isNull() && m_sub_isValid;

    m_alias_name_isValid = ::MelodixAPI::fromJsonValue(m_alias_name, json[QString("aliasName")]);
    m_alias_name_isSet = !json[QString("aliasName")].isNull() && m_alias_name_isValid;

    m_channel_isValid = ::MelodixAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;
}

QString MDGetPurchasedAlbum_200_response_paidAlbums_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetPurchasedAlbum_200_response_paidAlbums_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_paid_time_isSet) {
        obj.insert(QString("paidTime"), ::MelodixAPI::toJsonValue(m_paid_time));
    }
    if (m_album_id_isSet) {
        obj.insert(QString("albumId"), ::MelodixAPI::toJsonValue(m_album_id));
    }
    if (m_cover_isSet) {
        obj.insert(QString("cover"), ::MelodixAPI::toJsonValue(m_cover));
    }
    if (m_album_name_isSet) {
        obj.insert(QString("albumName"), ::MelodixAPI::toJsonValue(m_album_name));
    }
    if (m_artist.isSet()) {
        obj.insert(QString("artist"), ::MelodixAPI::toJsonValue(m_artist));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::MelodixAPI::toJsonValue(m_artists));
    }
    if (m_valid_isSet) {
        obj.insert(QString("valid"), ::MelodixAPI::toJsonValue(m_valid));
    }
    if (m_bought_count_isSet) {
        obj.insert(QString("boughtCount"), ::MelodixAPI::toJsonValue(m_bought_count));
    }
    if (m_sub_isSet) {
        obj.insert(QString("sub"), ::MelodixAPI::toJsonValue(m_sub));
    }
    if (m_alias_name_isSet) {
        obj.insert(QString("aliasName"), ::MelodixAPI::toJsonValue(m_alias_name));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::MelodixAPI::toJsonValue(m_channel));
    }
    return obj;
}

qint32 MDGetPurchasedAlbum_200_response_paidAlbums_inner::getPaidTime() const {
    return m_paid_time;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setPaidTime(const qint32 &paid_time) {
    m_paid_time = paid_time;
    m_paid_time_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_paid_time_Set() const{
    return m_paid_time_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_paid_time_Valid() const{
    return m_paid_time_isValid;
}

qint32 MDGetPurchasedAlbum_200_response_paidAlbums_inner::getAlbumId() const {
    return m_album_id;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setAlbumId(const qint32 &album_id) {
    m_album_id = album_id;
    m_album_id_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_album_id_Set() const{
    return m_album_id_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_album_id_Valid() const{
    return m_album_id_isValid;
}

QString MDGetPurchasedAlbum_200_response_paidAlbums_inner::getCover() const {
    return m_cover;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setCover(const QString &cover) {
    m_cover = cover;
    m_cover_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_cover_Set() const{
    return m_cover_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_cover_Valid() const{
    return m_cover_isValid;
}

QString MDGetPurchasedAlbum_200_response_paidAlbums_inner::getAlbumName() const {
    return m_album_name;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setAlbumName(const QString &album_name) {
    m_album_name = album_name;
    m_album_name_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_album_name_Set() const{
    return m_album_name_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_album_name_Valid() const{
    return m_album_name_isValid;
}

MDGetPurchasedAlbum_200_response_paidAlbums_inner_artist MDGetPurchasedAlbum_200_response_paidAlbums_inner::getArtist() const {
    return m_artist;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setArtist(const MDGetPurchasedAlbum_200_response_paidAlbums_inner_artist &artist) {
    m_artist = artist;
    m_artist_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_artist_Set() const{
    return m_artist_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_artist_Valid() const{
    return m_artist_isValid;
}

QList<MDGetPurchasedAlbum_200_response_paidAlbums_inner_artists_inner> MDGetPurchasedAlbum_200_response_paidAlbums_inner::getArtists() const {
    return m_artists;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setArtists(const QList<MDGetPurchasedAlbum_200_response_paidAlbums_inner_artists_inner> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_artists_Set() const{
    return m_artists_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_artists_Valid() const{
    return m_artists_isValid;
}

qint32 MDGetPurchasedAlbum_200_response_paidAlbums_inner::getValid() const {
    return m_valid;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setValid(const qint32 &valid) {
    m_valid = valid;
    m_valid_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_valid_Set() const{
    return m_valid_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_valid_Valid() const{
    return m_valid_isValid;
}

qint32 MDGetPurchasedAlbum_200_response_paidAlbums_inner::getBoughtCount() const {
    return m_bought_count;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setBoughtCount(const qint32 &bought_count) {
    m_bought_count = bought_count;
    m_bought_count_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_bought_count_Set() const{
    return m_bought_count_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_bought_count_Valid() const{
    return m_bought_count_isValid;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::isSub() const {
    return m_sub;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setSub(const bool &sub) {
    m_sub = sub;
    m_sub_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_sub_Set() const{
    return m_sub_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_sub_Valid() const{
    return m_sub_isValid;
}

QString MDGetPurchasedAlbum_200_response_paidAlbums_inner::getAliasName() const {
    return m_alias_name;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setAliasName(const QString &alias_name) {
    m_alias_name = alias_name;
    m_alias_name_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_alias_name_Set() const{
    return m_alias_name_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_alias_name_Valid() const{
    return m_alias_name_isValid;
}

qint32 MDGetPurchasedAlbum_200_response_paidAlbums_inner::getChannel() const {
    return m_channel;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setChannel(const qint32 &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_channel_Set() const{
    return m_channel_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_channel_Valid() const{
    return m_channel_isValid;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_paid_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bought_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_paid_time_isValid && m_album_id_isValid && m_cover_isValid && m_album_name_isValid && m_artist_isValid && m_artists_isValid && m_valid_isValid && m_bought_count_isValid && m_sub_isValid && m_alias_name_isValid && m_channel_isValid && true;
}

} // namespace MelodixAPI
