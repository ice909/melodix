/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetPurchasedAlbum_200_response_paidAlbums_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetPurchasedAlbum_200_response_paidAlbums_inner::MDGetPurchasedAlbum_200_response_paidAlbums_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetPurchasedAlbum_200_response_paidAlbums_inner::MDGetPurchasedAlbum_200_response_paidAlbums_inner() {
    this->initializeModel();
}

MDGetPurchasedAlbum_200_response_paidAlbums_inner::~MDGetPurchasedAlbum_200_response_paidAlbums_inner() {}

void MDGetPurchasedAlbum_200_response_paidAlbums_inner::initializeModel() {

    m_paid_time_isSet = false;
    m_paid_time_isValid = false;

    m_album_id_isSet = false;
    m_album_id_isValid = false;

    m_cover_isSet = false;
    m_cover_isValid = false;

    m_album_name_isSet = false;
    m_album_name_isValid = false;
}

void MDGetPurchasedAlbum_200_response_paidAlbums_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetPurchasedAlbum_200_response_paidAlbums_inner::fromJsonObject(QJsonObject json) {

    m_paid_time_isValid = ::MelodixAPI::fromJsonValue(m_paid_time, json[QString("paidTime")]);
    m_paid_time_isSet = !json[QString("paidTime")].isNull() && m_paid_time_isValid;

    m_album_id_isValid = ::MelodixAPI::fromJsonValue(m_album_id, json[QString("albumId")]);
    m_album_id_isSet = !json[QString("albumId")].isNull() && m_album_id_isValid;

    m_cover_isValid = ::MelodixAPI::fromJsonValue(m_cover, json[QString("cover")]);
    m_cover_isSet = !json[QString("cover")].isNull() && m_cover_isValid;

    m_album_name_isValid = ::MelodixAPI::fromJsonValue(m_album_name, json[QString("albumName")]);
    m_album_name_isSet = !json[QString("albumName")].isNull() && m_album_name_isValid;
}

QString MDGetPurchasedAlbum_200_response_paidAlbums_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetPurchasedAlbum_200_response_paidAlbums_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_paid_time_isSet) {
        obj.insert(QString("paidTime"), ::MelodixAPI::toJsonValue(m_paid_time));
    }
    if (m_album_id_isSet) {
        obj.insert(QString("albumId"), ::MelodixAPI::toJsonValue(m_album_id));
    }
    if (m_cover_isSet) {
        obj.insert(QString("cover"), ::MelodixAPI::toJsonValue(m_cover));
    }
    if (m_album_name_isSet) {
        obj.insert(QString("albumName"), ::MelodixAPI::toJsonValue(m_album_name));
    }
    return obj;
}

qint32 MDGetPurchasedAlbum_200_response_paidAlbums_inner::getPaidTime() const {
    return m_paid_time;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setPaidTime(const qint32 &paid_time) {
    m_paid_time = paid_time;
    m_paid_time_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_paid_time_Set() const{
    return m_paid_time_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_paid_time_Valid() const{
    return m_paid_time_isValid;
}

double MDGetPurchasedAlbum_200_response_paidAlbums_inner::getAlbumId() const {
    return m_album_id;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setAlbumId(const double &album_id) {
    m_album_id = album_id;
    m_album_id_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_album_id_Set() const{
    return m_album_id_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_album_id_Valid() const{
    return m_album_id_isValid;
}

QString MDGetPurchasedAlbum_200_response_paidAlbums_inner::getCover() const {
    return m_cover;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setCover(const QString &cover) {
    m_cover = cover;
    m_cover_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_cover_Set() const{
    return m_cover_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_cover_Valid() const{
    return m_cover_isValid;
}

QString MDGetPurchasedAlbum_200_response_paidAlbums_inner::getAlbumName() const {
    return m_album_name;
}
void MDGetPurchasedAlbum_200_response_paidAlbums_inner::setAlbumName(const QString &album_name) {
    m_album_name = album_name;
    m_album_name_isSet = true;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_album_name_Set() const{
    return m_album_name_isSet;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::is_album_name_Valid() const{
    return m_album_name_isValid;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_paid_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetPurchasedAlbum_200_response_paidAlbums_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_paid_time_isValid && m_album_id_isValid && m_cover_isValid && m_album_name_isValid && true;
}

} // namespace MelodixAPI
