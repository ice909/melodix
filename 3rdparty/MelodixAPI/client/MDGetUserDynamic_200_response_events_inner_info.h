/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MDGetUserDynamic_200_response_events_inner_info.h
 *
 * 
 */

#ifndef MDGetUserDynamic_200_response_events_inner_info_H
#define MDGetUserDynamic_200_response_events_inner_info_H

#include <QJsonObject>

#include "MDGetUserDynamic_200_response_events_inner_info_commentThread.h"
#include <QString>

#include "MDEnum.h"
#include "MDObject.h"

namespace MelodixAPI {
class MDGetUserDynamic_200_response_events_inner_info_commentThread;

class MDGetUserDynamic_200_response_events_inner_info : public MDObject {
public:
    MDGetUserDynamic_200_response_events_inner_info();
    MDGetUserDynamic_200_response_events_inner_info(QString json);
    ~MDGetUserDynamic_200_response_events_inner_info() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    MDGetUserDynamic_200_response_events_inner_info_commentThread getCommentThread() const;
    void setCommentThread(const MDGetUserDynamic_200_response_events_inner_info_commentThread &comment_thread);
    bool is_comment_thread_Set() const;
    bool is_comment_thread_Valid() const;

    bool isLiked() const;
    void setLiked(const bool &liked);
    bool is_liked_Set() const;
    bool is_liked_Valid() const;

    qint32 getResourceType() const;
    void setResourceType(const qint32 &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    qint32 getResourceId() const;
    void setResourceId(const qint32 &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    qint32 getCommentCount() const;
    void setCommentCount(const qint32 &comment_count);
    bool is_comment_count_Set() const;
    bool is_comment_count_Valid() const;

    qint32 getLikedCount() const;
    void setLikedCount(const qint32 &liked_count);
    bool is_liked_count_Set() const;
    bool is_liked_count_Valid() const;

    qint32 getShareCount() const;
    void setShareCount(const qint32 &share_count);
    bool is_share_count_Set() const;
    bool is_share_count_Valid() const;

    QString getThreadId() const;
    void setThreadId(const QString &thread_id);
    bool is_thread_id_Set() const;
    bool is_thread_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    MDGetUserDynamic_200_response_events_inner_info_commentThread m_comment_thread;
    bool m_comment_thread_isSet;
    bool m_comment_thread_isValid;

    bool m_liked;
    bool m_liked_isSet;
    bool m_liked_isValid;

    qint32 m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    qint32 m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    qint32 m_comment_count;
    bool m_comment_count_isSet;
    bool m_comment_count_isValid;

    qint32 m_liked_count;
    bool m_liked_count_isSet;
    bool m_liked_count_isValid;

    qint32 m_share_count;
    bool m_share_count_isSet;
    bool m_share_count_isValid;

    QString m_thread_id;
    bool m_thread_id_isSet;
    bool m_thread_id_isValid;
};

} // namespace MelodixAPI

Q_DECLARE_METATYPE(MelodixAPI::MDGetUserDynamic_200_response_events_inner_info)

#endif // MDGetUserDynamic_200_response_events_inner_info_H
