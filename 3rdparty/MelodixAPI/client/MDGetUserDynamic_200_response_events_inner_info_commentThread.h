/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MDGetUserDynamic_200_response_events_inner_info_commentThread.h
 *
 * 
 */

#ifndef MDGetUserDynamic_200_response_events_inner_info_commentThread_H
#define MDGetUserDynamic_200_response_events_inner_info_commentThread_H

#include <QJsonObject>

#include "MDGetUserDynamic_200_response_events_inner_info_commentThread_latestLikedUsers_inner.h"
#include "MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo.h"
#include <QList>
#include <QString>

#include "MDEnum.h"
#include "MDObject.h"

namespace MelodixAPI {
class MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo;
class MDGetUserDynamic_200_response_events_inner_info_commentThread_latestLikedUsers_inner;

class MDGetUserDynamic_200_response_events_inner_info_commentThread : public MDObject {
public:
    MDGetUserDynamic_200_response_events_inner_info_commentThread();
    MDGetUserDynamic_200_response_events_inner_info_commentThread(QString json);
    ~MDGetUserDynamic_200_response_events_inner_info_commentThread() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo getResourceInfo() const;
    void setResourceInfo(const MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo &resource_info);
    bool is_resource_info_Set() const;
    bool is_resource_info_Valid() const;

    qint32 getResourceType() const;
    void setResourceType(const qint32 &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    qint32 getCommentCount() const;
    void setCommentCount(const qint32 &comment_count);
    bool is_comment_count_Set() const;
    bool is_comment_count_Valid() const;

    qint32 getLikedCount() const;
    void setLikedCount(const qint32 &liked_count);
    bool is_liked_count_Set() const;
    bool is_liked_count_Valid() const;

    qint32 getShareCount() const;
    void setShareCount(const qint32 &share_count);
    bool is_share_count_Set() const;
    bool is_share_count_Valid() const;

    qint32 getHotCount() const;
    void setHotCount(const qint32 &hot_count);
    bool is_hot_count_Set() const;
    bool is_hot_count_Valid() const;

    QList<MDGetUserDynamic_200_response_events_inner_info_commentThread_latestLikedUsers_inner> getLatestLikedUsers() const;
    void setLatestLikedUsers(const QList<MDGetUserDynamic_200_response_events_inner_info_commentThread_latestLikedUsers_inner> &latest_liked_users);
    bool is_latest_liked_users_Set() const;
    bool is_latest_liked_users_Valid() const;

    qint32 getResourceId() const;
    void setResourceId(const qint32 &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    qint32 getResourceOwnerId() const;
    void setResourceOwnerId(const qint32 &resource_owner_id);
    bool is_resource_owner_id_Set() const;
    bool is_resource_owner_id_Valid() const;

    QString getResourceTitle() const;
    void setResourceTitle(const QString &resource_title);
    bool is_resource_title_Set() const;
    bool is_resource_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo m_resource_info;
    bool m_resource_info_isSet;
    bool m_resource_info_isValid;

    qint32 m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    qint32 m_comment_count;
    bool m_comment_count_isSet;
    bool m_comment_count_isValid;

    qint32 m_liked_count;
    bool m_liked_count_isSet;
    bool m_liked_count_isValid;

    qint32 m_share_count;
    bool m_share_count_isSet;
    bool m_share_count_isValid;

    qint32 m_hot_count;
    bool m_hot_count_isSet;
    bool m_hot_count_isValid;

    QList<MDGetUserDynamic_200_response_events_inner_info_commentThread_latestLikedUsers_inner> m_latest_liked_users;
    bool m_latest_liked_users_isSet;
    bool m_latest_liked_users_isValid;

    qint32 m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    qint32 m_resource_owner_id;
    bool m_resource_owner_id_isSet;
    bool m_resource_owner_id_isValid;

    QString m_resource_title;
    bool m_resource_title_isSet;
    bool m_resource_title_isValid;
};

} // namespace MelodixAPI

Q_DECLARE_METATYPE(MelodixAPI::MDGetUserDynamic_200_response_events_inner_info_commentThread)

#endif // MDGetUserDynamic_200_response_events_inner_info_commentThread_H
