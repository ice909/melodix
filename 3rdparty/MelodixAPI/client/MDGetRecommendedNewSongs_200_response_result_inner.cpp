/**
 * MelodixAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetRecommendedNewSongs_200_response_result_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetRecommendedNewSongs_200_response_result_inner::MDGetRecommendedNewSongs_200_response_result_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetRecommendedNewSongs_200_response_result_inner::MDGetRecommendedNewSongs_200_response_result_inner() {
    this->initializeModel();
}

MDGetRecommendedNewSongs_200_response_result_inner::~MDGetRecommendedNewSongs_200_response_result_inner() {}

void MDGetRecommendedNewSongs_200_response_result_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pic_url_isSet = false;
    m_pic_url_isValid = false;

    m_can_dislike_isSet = false;
    m_can_dislike_isValid = false;

    m_song_isSet = false;
    m_song_isValid = false;

    m_alg_isSet = false;
    m_alg_isValid = false;
}

void MDGetRecommendedNewSongs_200_response_result_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetRecommendedNewSongs_200_response_result_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::MelodixAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_name_isValid = ::MelodixAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pic_url_isValid = ::MelodixAPI::fromJsonValue(m_pic_url, json[QString("picUrl")]);
    m_pic_url_isSet = !json[QString("picUrl")].isNull() && m_pic_url_isValid;

    m_can_dislike_isValid = ::MelodixAPI::fromJsonValue(m_can_dislike, json[QString("canDislike")]);
    m_can_dislike_isSet = !json[QString("canDislike")].isNull() && m_can_dislike_isValid;

    m_song_isValid = ::MelodixAPI::fromJsonValue(m_song, json[QString("song")]);
    m_song_isSet = !json[QString("song")].isNull() && m_song_isValid;

    m_alg_isValid = ::MelodixAPI::fromJsonValue(m_alg, json[QString("alg")]);
    m_alg_isSet = !json[QString("alg")].isNull() && m_alg_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetRecommendedNewSongs_200_response_result_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::MelodixAPI::toJsonValue(m_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::MelodixAPI::toJsonValue(m_name));
    }
    if (m_pic_url_isSet) {
        obj.insert(QString("picUrl"), ::MelodixAPI::toJsonValue(m_pic_url));
    }
    if (m_can_dislike_isSet) {
        obj.insert(QString("canDislike"), ::MelodixAPI::toJsonValue(m_can_dislike));
    }
    if (m_song.isSet()) {
        obj.insert(QString("song"), ::MelodixAPI::toJsonValue(m_song));
    }
    if (m_alg_isSet) {
        obj.insert(QString("alg"), ::MelodixAPI::toJsonValue(m_alg));
    }
    return obj;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner::getId() const {
    return m_id;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_id_Valid() const{
    return m_id_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner::getType() const {
    return m_type;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_type_Set() const{
    return m_type_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner::getName() const {
    return m_name;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_name_Set() const{
    return m_name_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner::getPicUrl() const {
    return m_pic_url;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setPicUrl(const QString &pic_url) {
    m_pic_url = pic_url;
    m_pic_url_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_pic_url_Set() const{
    return m_pic_url_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_pic_url_Valid() const{
    return m_pic_url_isValid;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::isCanDislike() const {
    return m_can_dislike;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setCanDislike(const bool &can_dislike) {
    m_can_dislike = can_dislike;
    m_can_dislike_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_can_dislike_Set() const{
    return m_can_dislike_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_can_dislike_Valid() const{
    return m_can_dislike_isValid;
}

MDGetRecommendedNewSongs_200_response_result_inner_song MDGetRecommendedNewSongs_200_response_result_inner::getSong() const {
    return m_song;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setSong(const MDGetRecommendedNewSongs_200_response_result_inner_song &song) {
    m_song = song;
    m_song_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_song_Set() const{
    return m_song_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_song_Valid() const{
    return m_song_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner::getAlg() const {
    return m_alg;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setAlg(const QString &alg) {
    m_alg = alg;
    m_alg_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_alg_Set() const{
    return m_alg_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_alg_Valid() const{
    return m_alg_isValid;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pic_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_dislike_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_song.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alg_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_type_isValid && m_name_isValid && m_pic_url_isValid && m_can_dislike_isValid && m_song_isValid && m_alg_isValid && true;
}

} // namespace MelodixAPI
