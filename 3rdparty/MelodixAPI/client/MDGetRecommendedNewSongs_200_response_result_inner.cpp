/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetRecommendedNewSongs_200_response_result_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetRecommendedNewSongs_200_response_result_inner::MDGetRecommendedNewSongs_200_response_result_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetRecommendedNewSongs_200_response_result_inner::MDGetRecommendedNewSongs_200_response_result_inner() {
    this->initializeModel();
}

MDGetRecommendedNewSongs_200_response_result_inner::~MDGetRecommendedNewSongs_200_response_result_inner() {}

void MDGetRecommendedNewSongs_200_response_result_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pic_url_isSet = false;
    m_pic_url_isValid = false;

    m_song_isSet = false;
    m_song_isValid = false;

    m_pic_isSet = false;
    m_pic_isValid = false;

    m_ar_isSet = false;
    m_ar_isValid = false;

    m_al_isSet = false;
    m_al_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;
}

void MDGetRecommendedNewSongs_200_response_result_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetRecommendedNewSongs_200_response_result_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::MelodixAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pic_url_isValid = ::MelodixAPI::fromJsonValue(m_pic_url, json[QString("picUrl")]);
    m_pic_url_isSet = !json[QString("picUrl")].isNull() && m_pic_url_isValid;

    m_song_isValid = ::MelodixAPI::fromJsonValue(m_song, json[QString("song")]);
    m_song_isSet = !json[QString("song")].isNull() && m_song_isValid;

    m_pic_isValid = ::MelodixAPI::fromJsonValue(m_pic, json[QString("pic")]);
    m_pic_isSet = !json[QString("pic")].isNull() && m_pic_isValid;

    m_ar_isValid = ::MelodixAPI::fromJsonValue(m_ar, json[QString("ar")]);
    m_ar_isSet = !json[QString("ar")].isNull() && m_ar_isValid;

    m_al_isValid = ::MelodixAPI::fromJsonValue(m_al, json[QString("al")]);
    m_al_isSet = !json[QString("al")].isNull() && m_al_isValid;

    m_duration_isValid = ::MelodixAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetRecommendedNewSongs_200_response_result_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::MelodixAPI::toJsonValue(m_name));
    }
    if (m_pic_url_isSet) {
        obj.insert(QString("picUrl"), ::MelodixAPI::toJsonValue(m_pic_url));
    }
    if (m_song.isSet()) {
        obj.insert(QString("song"), ::MelodixAPI::toJsonValue(m_song));
    }
    if (m_pic_isSet) {
        obj.insert(QString("pic"), ::MelodixAPI::toJsonValue(m_pic));
    }
    if (m_ar.size() > 0) {
        obj.insert(QString("ar"), ::MelodixAPI::toJsonValue(m_ar));
    }
    if (m_al_isSet) {
        obj.insert(QString("al"), ::MelodixAPI::toJsonValue(m_al));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::MelodixAPI::toJsonValue(m_duration));
    }
    return obj;
}

QString MDGetRecommendedNewSongs_200_response_result_inner::getId() const {
    return m_id;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner::getName() const {
    return m_name;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_name_Set() const{
    return m_name_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner::getPicUrl() const {
    return m_pic_url;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setPicUrl(const QString &pic_url) {
    m_pic_url = pic_url;
    m_pic_url_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_pic_url_Set() const{
    return m_pic_url_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_pic_url_Valid() const{
    return m_pic_url_isValid;
}

MDGetRecommendedNewSongs_200_response_result_inner_song MDGetRecommendedNewSongs_200_response_result_inner::getSong() const {
    return m_song;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setSong(const MDGetRecommendedNewSongs_200_response_result_inner_song &song) {
    m_song = song;
    m_song_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_song_Set() const{
    return m_song_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_song_Valid() const{
    return m_song_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner::getPic() const {
    return m_pic;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setPic(const QString &pic) {
    m_pic = pic;
    m_pic_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_pic_Set() const{
    return m_pic_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_pic_Valid() const{
    return m_pic_isValid;
}

QList<MDGetRecommendedNewSongs_200_response_result_inner_ar_inner> MDGetRecommendedNewSongs_200_response_result_inner::getAr() const {
    return m_ar;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setAr(const QList<MDGetRecommendedNewSongs_200_response_result_inner_ar_inner> &ar) {
    m_ar = ar;
    m_ar_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_ar_Set() const{
    return m_ar_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_ar_Valid() const{
    return m_ar_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner::getAl() const {
    return m_al;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setAl(const QString &al) {
    m_al = al;
    m_al_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_al_Set() const{
    return m_al_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_al_Valid() const{
    return m_al_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner::getDuration() const {
    return m_duration;
}
void MDGetRecommendedNewSongs_200_response_result_inner::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_duration_Set() const{
    return m_duration_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::is_duration_Valid() const{
    return m_duration_isValid;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pic_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_song.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ar.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_al_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetRecommendedNewSongs_200_response_result_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_pic_url_isValid && m_song_isValid && m_pic_isValid && m_ar_isValid && m_al_isValid && m_duration_isValid && true;
}

} // namespace MelodixAPI
