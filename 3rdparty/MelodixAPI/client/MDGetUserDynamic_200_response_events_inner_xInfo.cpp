/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDynamic_200_response_events_inner_xInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDynamic_200_response_events_inner_xInfo::MDGetUserDynamic_200_response_events_inner_xInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDynamic_200_response_events_inner_xInfo::MDGetUserDynamic_200_response_events_inner_xInfo() {
    this->initializeModel();
}

MDGetUserDynamic_200_response_events_inner_xInfo::~MDGetUserDynamic_200_response_events_inner_xInfo() {}

void MDGetUserDynamic_200_response_events_inner_xInfo::initializeModel() {

    m_top_event_isSet = false;
    m_top_event_isValid = false;

    m_insite_forward_count_isSet = false;
    m_insite_forward_count_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;
}

void MDGetUserDynamic_200_response_events_inner_xInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDynamic_200_response_events_inner_xInfo::fromJsonObject(QJsonObject json) {

    m_top_event_isValid = ::MelodixAPI::fromJsonValue(m_top_event, json[QString("topEvent")]);
    m_top_event_isSet = !json[QString("topEvent")].isNull() && m_top_event_isValid;

    m_insite_forward_count_isValid = ::MelodixAPI::fromJsonValue(m_insite_forward_count, json[QString("insiteForwardCount")]);
    m_insite_forward_count_isSet = !json[QString("insiteForwardCount")].isNull() && m_insite_forward_count_isValid;

    m_info_isValid = ::MelodixAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_xInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDynamic_200_response_events_inner_xInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_top_event_isSet) {
        obj.insert(QString("topEvent"), ::MelodixAPI::toJsonValue(m_top_event));
    }
    if (m_insite_forward_count_isSet) {
        obj.insert(QString("insiteForwardCount"), ::MelodixAPI::toJsonValue(m_insite_forward_count));
    }
    if (m_info.isSet()) {
        obj.insert(QString("info"), ::MelodixAPI::toJsonValue(m_info));
    }
    return obj;
}

bool MDGetUserDynamic_200_response_events_inner_xInfo::isTopEvent() const {
    return m_top_event;
}
void MDGetUserDynamic_200_response_events_inner_xInfo::setTopEvent(const bool &top_event) {
    m_top_event = top_event;
    m_top_event_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_xInfo::is_top_event_Set() const{
    return m_top_event_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_xInfo::is_top_event_Valid() const{
    return m_top_event_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_xInfo::getInsiteForwardCount() const {
    return m_insite_forward_count;
}
void MDGetUserDynamic_200_response_events_inner_xInfo::setInsiteForwardCount(const qint32 &insite_forward_count) {
    m_insite_forward_count = insite_forward_count;
    m_insite_forward_count_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_xInfo::is_insite_forward_count_Set() const{
    return m_insite_forward_count_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_xInfo::is_insite_forward_count_Valid() const{
    return m_insite_forward_count_isValid;
}

MDGetUserDynamic_200_response_events_inner_info MDGetUserDynamic_200_response_events_inner_xInfo::getInfo() const {
    return m_info;
}
void MDGetUserDynamic_200_response_events_inner_xInfo::setInfo(const MDGetUserDynamic_200_response_events_inner_info &info) {
    m_info = info;
    m_info_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_xInfo::is_info_Set() const{
    return m_info_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_xInfo::is_info_Valid() const{
    return m_info_isValid;
}

bool MDGetUserDynamic_200_response_events_inner_xInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_top_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insite_forward_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDynamic_200_response_events_inner_xInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_top_event_isValid && m_insite_forward_count_isValid && m_info_isValid && true;
}

} // namespace MelodixAPI
