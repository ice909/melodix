/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetArtistDetail_200_response_data_vipRights.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetArtistDetail_200_response_data_vipRights::MDGetArtistDetail_200_response_data_vipRights(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetArtistDetail_200_response_data_vipRights::MDGetArtistDetail_200_response_data_vipRights() {
    this->initializeModel();
}

MDGetArtistDetail_200_response_data_vipRights::~MDGetArtistDetail_200_response_data_vipRights() {}

void MDGetArtistDetail_200_response_data_vipRights::initializeModel() {

    m_rights_info_detail_dto_list_isSet = false;
    m_rights_info_detail_dto_list_isValid = false;

    m_old_protocol_isSet = false;
    m_old_protocol_isValid = false;

    m_red_vip_annual_count_isSet = false;
    m_red_vip_annual_count_isValid = false;

    m_red_vip_level_isSet = false;
    m_red_vip_level_isValid = false;

    m_now_isSet = false;
    m_now_isValid = false;
}

void MDGetArtistDetail_200_response_data_vipRights::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetArtistDetail_200_response_data_vipRights::fromJsonObject(QJsonObject json) {

    m_rights_info_detail_dto_list_isValid = ::MelodixAPI::fromJsonValue(m_rights_info_detail_dto_list, json[QString("rightsInfoDetailDtoList")]);
    m_rights_info_detail_dto_list_isSet = !json[QString("rightsInfoDetailDtoList")].isNull() && m_rights_info_detail_dto_list_isValid;

    m_old_protocol_isValid = ::MelodixAPI::fromJsonValue(m_old_protocol, json[QString("oldProtocol")]);
    m_old_protocol_isSet = !json[QString("oldProtocol")].isNull() && m_old_protocol_isValid;

    m_red_vip_annual_count_isValid = ::MelodixAPI::fromJsonValue(m_red_vip_annual_count, json[QString("redVipAnnualCount")]);
    m_red_vip_annual_count_isSet = !json[QString("redVipAnnualCount")].isNull() && m_red_vip_annual_count_isValid;

    m_red_vip_level_isValid = ::MelodixAPI::fromJsonValue(m_red_vip_level, json[QString("redVipLevel")]);
    m_red_vip_level_isSet = !json[QString("redVipLevel")].isNull() && m_red_vip_level_isValid;

    m_now_isValid = ::MelodixAPI::fromJsonValue(m_now, json[QString("now")]);
    m_now_isSet = !json[QString("now")].isNull() && m_now_isValid;
}

QString MDGetArtistDetail_200_response_data_vipRights::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetArtistDetail_200_response_data_vipRights::asJsonObject() const {
    QJsonObject obj;
    if (m_rights_info_detail_dto_list.size() > 0) {
        obj.insert(QString("rightsInfoDetailDtoList"), ::MelodixAPI::toJsonValue(m_rights_info_detail_dto_list));
    }
    if (m_old_protocol_isSet) {
        obj.insert(QString("oldProtocol"), ::MelodixAPI::toJsonValue(m_old_protocol));
    }
    if (m_red_vip_annual_count_isSet) {
        obj.insert(QString("redVipAnnualCount"), ::MelodixAPI::toJsonValue(m_red_vip_annual_count));
    }
    if (m_red_vip_level_isSet) {
        obj.insert(QString("redVipLevel"), ::MelodixAPI::toJsonValue(m_red_vip_level));
    }
    if (m_now_isSet) {
        obj.insert(QString("now"), ::MelodixAPI::toJsonValue(m_now));
    }
    return obj;
}

QList<MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner> MDGetArtistDetail_200_response_data_vipRights::getRightsInfoDetailDtoList() const {
    return m_rights_info_detail_dto_list;
}
void MDGetArtistDetail_200_response_data_vipRights::setRightsInfoDetailDtoList(const QList<MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner> &rights_info_detail_dto_list) {
    m_rights_info_detail_dto_list = rights_info_detail_dto_list;
    m_rights_info_detail_dto_list_isSet = true;
}

bool MDGetArtistDetail_200_response_data_vipRights::is_rights_info_detail_dto_list_Set() const{
    return m_rights_info_detail_dto_list_isSet;
}

bool MDGetArtistDetail_200_response_data_vipRights::is_rights_info_detail_dto_list_Valid() const{
    return m_rights_info_detail_dto_list_isValid;
}

bool MDGetArtistDetail_200_response_data_vipRights::isOldProtocol() const {
    return m_old_protocol;
}
void MDGetArtistDetail_200_response_data_vipRights::setOldProtocol(const bool &old_protocol) {
    m_old_protocol = old_protocol;
    m_old_protocol_isSet = true;
}

bool MDGetArtistDetail_200_response_data_vipRights::is_old_protocol_Set() const{
    return m_old_protocol_isSet;
}

bool MDGetArtistDetail_200_response_data_vipRights::is_old_protocol_Valid() const{
    return m_old_protocol_isValid;
}

qint32 MDGetArtistDetail_200_response_data_vipRights::getRedVipAnnualCount() const {
    return m_red_vip_annual_count;
}
void MDGetArtistDetail_200_response_data_vipRights::setRedVipAnnualCount(const qint32 &red_vip_annual_count) {
    m_red_vip_annual_count = red_vip_annual_count;
    m_red_vip_annual_count_isSet = true;
}

bool MDGetArtistDetail_200_response_data_vipRights::is_red_vip_annual_count_Set() const{
    return m_red_vip_annual_count_isSet;
}

bool MDGetArtistDetail_200_response_data_vipRights::is_red_vip_annual_count_Valid() const{
    return m_red_vip_annual_count_isValid;
}

qint32 MDGetArtistDetail_200_response_data_vipRights::getRedVipLevel() const {
    return m_red_vip_level;
}
void MDGetArtistDetail_200_response_data_vipRights::setRedVipLevel(const qint32 &red_vip_level) {
    m_red_vip_level = red_vip_level;
    m_red_vip_level_isSet = true;
}

bool MDGetArtistDetail_200_response_data_vipRights::is_red_vip_level_Set() const{
    return m_red_vip_level_isSet;
}

bool MDGetArtistDetail_200_response_data_vipRights::is_red_vip_level_Valid() const{
    return m_red_vip_level_isValid;
}

qint32 MDGetArtistDetail_200_response_data_vipRights::getNow() const {
    return m_now;
}
void MDGetArtistDetail_200_response_data_vipRights::setNow(const qint32 &now) {
    m_now = now;
    m_now_isSet = true;
}

bool MDGetArtistDetail_200_response_data_vipRights::is_now_Set() const{
    return m_now_isSet;
}

bool MDGetArtistDetail_200_response_data_vipRights::is_now_Valid() const{
    return m_now_isValid;
}

bool MDGetArtistDetail_200_response_data_vipRights::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rights_info_detail_dto_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_vip_annual_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_vip_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_now_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetArtistDetail_200_response_data_vipRights::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rights_info_detail_dto_list_isValid && m_old_protocol_isValid && m_red_vip_annual_count_isValid && m_red_vip_level_isValid && m_now_isValid && true;
}

} // namespace MelodixAPI
