/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDynamic_200_response_events_inner_pendantData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDynamic_200_response_events_inner_pendantData::MDGetUserDynamic_200_response_events_inner_pendantData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDynamic_200_response_events_inner_pendantData::MDGetUserDynamic_200_response_events_inner_pendantData() {
    this->initializeModel();
}

MDGetUserDynamic_200_response_events_inner_pendantData::~MDGetUserDynamic_200_response_events_inner_pendantData() {}

void MDGetUserDynamic_200_response_events_inner_pendantData::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_image_android_url_isSet = false;
    m_image_android_url_isValid = false;

    m_image_ios_url_isSet = false;
    m_image_ios_url_isValid = false;
}

void MDGetUserDynamic_200_response_events_inner_pendantData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDynamic_200_response_events_inner_pendantData::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::MelodixAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_image_android_url_isValid = ::MelodixAPI::fromJsonValue(m_image_android_url, json[QString("imageAndroidUrl")]);
    m_image_android_url_isSet = !json[QString("imageAndroidUrl")].isNull() && m_image_android_url_isValid;

    m_image_ios_url_isValid = ::MelodixAPI::fromJsonValue(m_image_ios_url, json[QString("imageIosUrl")]);
    m_image_ios_url_isSet = !json[QString("imageIosUrl")].isNull() && m_image_ios_url_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_pendantData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDynamic_200_response_events_inner_pendantData::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::MelodixAPI::toJsonValue(m_image_url));
    }
    if (m_image_android_url_isSet) {
        obj.insert(QString("imageAndroidUrl"), ::MelodixAPI::toJsonValue(m_image_android_url));
    }
    if (m_image_ios_url_isSet) {
        obj.insert(QString("imageIosUrl"), ::MelodixAPI::toJsonValue(m_image_ios_url));
    }
    return obj;
}

qint32 MDGetUserDynamic_200_response_events_inner_pendantData::getId() const {
    return m_id;
}
void MDGetUserDynamic_200_response_events_inner_pendantData::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_pendantData::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_pendantData::is_id_Valid() const{
    return m_id_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_pendantData::getImageUrl() const {
    return m_image_url;
}
void MDGetUserDynamic_200_response_events_inner_pendantData::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_pendantData::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_pendantData::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_pendantData::getImageAndroidUrl() const {
    return m_image_android_url;
}
void MDGetUserDynamic_200_response_events_inner_pendantData::setImageAndroidUrl(const QString &image_android_url) {
    m_image_android_url = image_android_url;
    m_image_android_url_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_pendantData::is_image_android_url_Set() const{
    return m_image_android_url_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_pendantData::is_image_android_url_Valid() const{
    return m_image_android_url_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_pendantData::getImageIosUrl() const {
    return m_image_ios_url;
}
void MDGetUserDynamic_200_response_events_inner_pendantData::setImageIosUrl(const QString &image_ios_url) {
    m_image_ios_url = image_ios_url;
    m_image_ios_url_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_pendantData::is_image_ios_url_Set() const{
    return m_image_ios_url_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_pendantData::is_image_ios_url_Valid() const{
    return m_image_ios_url_isValid;
}

bool MDGetUserDynamic_200_response_events_inner_pendantData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_android_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_ios_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDynamic_200_response_events_inner_pendantData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_image_url_isValid && m_image_android_url_isValid && m_image_ios_url_isValid && true;
}

} // namespace MelodixAPI
