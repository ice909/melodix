/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo() {
    this->initializeModel();
}

MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::~MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo() {}

void MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_artist_area_code_isSet = false;
    m_artist_area_code_isValid = false;

    m_artist_id_isSet = false;
    m_artist_id_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;
}

void MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_user_id_isValid = ::MelodixAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_name_isValid = ::MelodixAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_artist_area_code_isValid = ::MelodixAPI::fromJsonValue(m_artist_area_code, json[QString("artistAreaCode")]);
    m_artist_area_code_isSet = !json[QString("artistAreaCode")].isNull() && m_artist_area_code_isValid;

    m_artist_id_isValid = ::MelodixAPI::fromJsonValue(m_artist_id, json[QString("artistId")]);
    m_artist_id_isSet = !json[QString("artistId")].isNull() && m_artist_id_isValid;

    m_event_type_isValid = ::MelodixAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::MelodixAPI::toJsonValue(m_user_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::MelodixAPI::toJsonValue(m_name));
    }
    if (m_artist_area_code_isSet) {
        obj.insert(QString("artistAreaCode"), ::MelodixAPI::toJsonValue(m_artist_area_code));
    }
    if (m_artist_id_isSet) {
        obj.insert(QString("artistId"), ::MelodixAPI::toJsonValue(m_artist_id));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::MelodixAPI::toJsonValue(m_event_type));
    }
    return obj;
}

qint32 MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::getId() const {
    return m_id;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::is_id_Valid() const{
    return m_id_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::getUserId() const {
    return m_user_id;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::getName() const {
    return m_name;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::is_name_Set() const{
    return m_name_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::is_name_Valid() const{
    return m_name_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::getArtistAreaCode() const {
    return m_artist_area_code;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::setArtistAreaCode(const qint32 &artist_area_code) {
    m_artist_area_code = artist_area_code;
    m_artist_area_code_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::is_artist_area_code_Set() const{
    return m_artist_area_code_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::is_artist_area_code_Valid() const{
    return m_artist_area_code_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::getArtistId() const {
    return m_artist_id;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::setArtistId(const qint32 &artist_id) {
    m_artist_id = artist_id;
    m_artist_id_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::is_artist_id_Set() const{
    return m_artist_id_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::is_artist_id_Valid() const{
    return m_artist_id_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::getEventType() const {
    return m_event_type;
}
void MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::setEventType(const qint32 &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::is_event_type_Valid() const{
    return m_event_type_isValid;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_area_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDynamic_200_response_events_inner_info_commentThread_resourceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_user_id_isValid && m_name_isValid && m_artist_area_code_isValid && m_artist_id_isValid && m_event_type_isValid && true;
}

} // namespace MelodixAPI
