/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetArtistDetail_200_response_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetArtistDetail_200_response_data::MDGetArtistDetail_200_response_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetArtistDetail_200_response_data::MDGetArtistDetail_200_response_data() {
    this->initializeModel();
}

MDGetArtistDetail_200_response_data::~MDGetArtistDetail_200_response_data() {}

void MDGetArtistDetail_200_response_data::initializeModel() {

    m_video_count_isSet = false;
    m_video_count_isValid = false;

    m_vip_rights_isSet = false;
    m_vip_rights_isValid = false;

    m_identify_isSet = false;
    m_identify_isValid = false;

    m_artist_isSet = false;
    m_artist_isValid = false;

    m_blacklist_isSet = false;
    m_blacklist_isValid = false;

    m_event_count_isSet = false;
    m_event_count_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void MDGetArtistDetail_200_response_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetArtistDetail_200_response_data::fromJsonObject(QJsonObject json) {

    m_video_count_isValid = ::MelodixAPI::fromJsonValue(m_video_count, json[QString("videoCount")]);
    m_video_count_isSet = !json[QString("videoCount")].isNull() && m_video_count_isValid;

    m_vip_rights_isValid = ::MelodixAPI::fromJsonValue(m_vip_rights, json[QString("vipRights")]);
    m_vip_rights_isSet = !json[QString("vipRights")].isNull() && m_vip_rights_isValid;

    m_identify_isValid = ::MelodixAPI::fromJsonValue(m_identify, json[QString("identify")]);
    m_identify_isSet = !json[QString("identify")].isNull() && m_identify_isValid;

    m_artist_isValid = ::MelodixAPI::fromJsonValue(m_artist, json[QString("artist")]);
    m_artist_isSet = !json[QString("artist")].isNull() && m_artist_isValid;

    m_blacklist_isValid = ::MelodixAPI::fromJsonValue(m_blacklist, json[QString("blacklist")]);
    m_blacklist_isSet = !json[QString("blacklist")].isNull() && m_blacklist_isValid;

    m_event_count_isValid = ::MelodixAPI::fromJsonValue(m_event_count, json[QString("eventCount")]);
    m_event_count_isSet = !json[QString("eventCount")].isNull() && m_event_count_isValid;

    m_user_isValid = ::MelodixAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString MDGetArtistDetail_200_response_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetArtistDetail_200_response_data::asJsonObject() const {
    QJsonObject obj;
    if (m_video_count_isSet) {
        obj.insert(QString("videoCount"), ::MelodixAPI::toJsonValue(m_video_count));
    }
    if (m_vip_rights.isSet()) {
        obj.insert(QString("vipRights"), ::MelodixAPI::toJsonValue(m_vip_rights));
    }
    if (m_identify.isSet()) {
        obj.insert(QString("identify"), ::MelodixAPI::toJsonValue(m_identify));
    }
    if (m_artist.isSet()) {
        obj.insert(QString("artist"), ::MelodixAPI::toJsonValue(m_artist));
    }
    if (m_blacklist_isSet) {
        obj.insert(QString("blacklist"), ::MelodixAPI::toJsonValue(m_blacklist));
    }
    if (m_event_count_isSet) {
        obj.insert(QString("eventCount"), ::MelodixAPI::toJsonValue(m_event_count));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::MelodixAPI::toJsonValue(m_user));
    }
    return obj;
}

qint32 MDGetArtistDetail_200_response_data::getVideoCount() const {
    return m_video_count;
}
void MDGetArtistDetail_200_response_data::setVideoCount(const qint32 &video_count) {
    m_video_count = video_count;
    m_video_count_isSet = true;
}

bool MDGetArtistDetail_200_response_data::is_video_count_Set() const{
    return m_video_count_isSet;
}

bool MDGetArtistDetail_200_response_data::is_video_count_Valid() const{
    return m_video_count_isValid;
}

MDGetArtistDetail_200_response_data_vipRights MDGetArtistDetail_200_response_data::getVipRights() const {
    return m_vip_rights;
}
void MDGetArtistDetail_200_response_data::setVipRights(const MDGetArtistDetail_200_response_data_vipRights &vip_rights) {
    m_vip_rights = vip_rights;
    m_vip_rights_isSet = true;
}

bool MDGetArtistDetail_200_response_data::is_vip_rights_Set() const{
    return m_vip_rights_isSet;
}

bool MDGetArtistDetail_200_response_data::is_vip_rights_Valid() const{
    return m_vip_rights_isValid;
}

MDGetArtistDetail_200_response_data_identify MDGetArtistDetail_200_response_data::getIdentify() const {
    return m_identify;
}
void MDGetArtistDetail_200_response_data::setIdentify(const MDGetArtistDetail_200_response_data_identify &identify) {
    m_identify = identify;
    m_identify_isSet = true;
}

bool MDGetArtistDetail_200_response_data::is_identify_Set() const{
    return m_identify_isSet;
}

bool MDGetArtistDetail_200_response_data::is_identify_Valid() const{
    return m_identify_isValid;
}

MDGetArtistDetail_200_response_data_artist MDGetArtistDetail_200_response_data::getArtist() const {
    return m_artist;
}
void MDGetArtistDetail_200_response_data::setArtist(const MDGetArtistDetail_200_response_data_artist &artist) {
    m_artist = artist;
    m_artist_isSet = true;
}

bool MDGetArtistDetail_200_response_data::is_artist_Set() const{
    return m_artist_isSet;
}

bool MDGetArtistDetail_200_response_data::is_artist_Valid() const{
    return m_artist_isValid;
}

bool MDGetArtistDetail_200_response_data::isBlacklist() const {
    return m_blacklist;
}
void MDGetArtistDetail_200_response_data::setBlacklist(const bool &blacklist) {
    m_blacklist = blacklist;
    m_blacklist_isSet = true;
}

bool MDGetArtistDetail_200_response_data::is_blacklist_Set() const{
    return m_blacklist_isSet;
}

bool MDGetArtistDetail_200_response_data::is_blacklist_Valid() const{
    return m_blacklist_isValid;
}

qint32 MDGetArtistDetail_200_response_data::getEventCount() const {
    return m_event_count;
}
void MDGetArtistDetail_200_response_data::setEventCount(const qint32 &event_count) {
    m_event_count = event_count;
    m_event_count_isSet = true;
}

bool MDGetArtistDetail_200_response_data::is_event_count_Set() const{
    return m_event_count_isSet;
}

bool MDGetArtistDetail_200_response_data::is_event_count_Valid() const{
    return m_event_count_isValid;
}

MDGetArtistDetail_200_response_data_user MDGetArtistDetail_200_response_data::getUser() const {
    return m_user;
}
void MDGetArtistDetail_200_response_data::setUser(const MDGetArtistDetail_200_response_data_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool MDGetArtistDetail_200_response_data::is_user_Set() const{
    return m_user_isSet;
}

bool MDGetArtistDetail_200_response_data::is_user_Valid() const{
    return m_user_isValid;
}

bool MDGetArtistDetail_200_response_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_video_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vip_rights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identify.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blacklist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetArtistDetail_200_response_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_video_count_isValid && m_vip_rights_isValid && m_identify_isValid && m_artist_isValid && m_blacklist_isValid && m_event_count_isValid && m_user_isValid && true;
}

} // namespace MelodixAPI
