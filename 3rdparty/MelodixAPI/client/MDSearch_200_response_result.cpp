/**
 * MelodixAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDSearch_200_response_result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDSearch_200_response_result::MDSearch_200_response_result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDSearch_200_response_result::MDSearch_200_response_result() {
    this->initializeModel();
}

MDSearch_200_response_result::~MDSearch_200_response_result() {}

void MDSearch_200_response_result::initializeModel() {

    m_songs_isSet = false;
    m_songs_isValid = false;

    m_song_count_isSet = false;
    m_song_count_isValid = false;
}

void MDSearch_200_response_result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDSearch_200_response_result::fromJsonObject(QJsonObject json) {

    m_songs_isValid = ::MelodixAPI::fromJsonValue(m_songs, json[QString("songs")]);
    m_songs_isSet = !json[QString("songs")].isNull() && m_songs_isValid;

    m_song_count_isValid = ::MelodixAPI::fromJsonValue(m_song_count, json[QString("songCount")]);
    m_song_count_isSet = !json[QString("songCount")].isNull() && m_song_count_isValid;
}

QString MDSearch_200_response_result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDSearch_200_response_result::asJsonObject() const {
    QJsonObject obj;
    if (m_songs.size() > 0) {
        obj.insert(QString("songs"), ::MelodixAPI::toJsonValue(m_songs));
    }
    if (m_song_count_isSet) {
        obj.insert(QString("songCount"), ::MelodixAPI::toJsonValue(m_song_count));
    }
    return obj;
}

QList<MDSearch_200_response_result_songs_inner> MDSearch_200_response_result::getSongs() const {
    return m_songs;
}
void MDSearch_200_response_result::setSongs(const QList<MDSearch_200_response_result_songs_inner> &songs) {
    m_songs = songs;
    m_songs_isSet = true;
}

bool MDSearch_200_response_result::is_songs_Set() const{
    return m_songs_isSet;
}

bool MDSearch_200_response_result::is_songs_Valid() const{
    return m_songs_isValid;
}

qint32 MDSearch_200_response_result::getSongCount() const {
    return m_song_count;
}
void MDSearch_200_response_result::setSongCount(const qint32 &song_count) {
    m_song_count = song_count;
    m_song_count_isSet = true;
}

bool MDSearch_200_response_result::is_song_count_Set() const{
    return m_song_count_isSet;
}

bool MDSearch_200_response_result::is_song_count_Valid() const{
    return m_song_count_isValid;
}

bool MDSearch_200_response_result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_songs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDSearch_200_response_result::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_songs_isValid && m_song_count_isValid && true;
}

} // namespace MelodixAPI
