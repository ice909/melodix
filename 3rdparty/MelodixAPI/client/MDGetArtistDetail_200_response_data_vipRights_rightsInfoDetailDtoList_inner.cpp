/**
 * MelodixAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner() {
    this->initializeModel();
}

MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::~MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner() {}

void MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::initializeModel() {

    m_vip_code_isSet = false;
    m_vip_code_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_vip_level_isSet = false;
    m_vip_level_isValid = false;

    m_sign_iap_isSet = false;
    m_sign_iap_isValid = false;

    m_sign_deduct_isSet = false;
    m_sign_deduct_isValid = false;

    m_sign_iap_deduct_isSet = false;
    m_sign_iap_deduct_isValid = false;

    m_sign_isSet = false;
    m_sign_isValid = false;
}

void MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::fromJsonObject(QJsonObject json) {

    m_vip_code_isValid = ::MelodixAPI::fromJsonValue(m_vip_code, json[QString("vipCode")]);
    m_vip_code_isSet = !json[QString("vipCode")].isNull() && m_vip_code_isValid;

    m_expire_time_isValid = ::MelodixAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_vip_level_isValid = ::MelodixAPI::fromJsonValue(m_vip_level, json[QString("vipLevel")]);
    m_vip_level_isSet = !json[QString("vipLevel")].isNull() && m_vip_level_isValid;

    m_sign_iap_isValid = ::MelodixAPI::fromJsonValue(m_sign_iap, json[QString("signIap")]);
    m_sign_iap_isSet = !json[QString("signIap")].isNull() && m_sign_iap_isValid;

    m_sign_deduct_isValid = ::MelodixAPI::fromJsonValue(m_sign_deduct, json[QString("signDeduct")]);
    m_sign_deduct_isSet = !json[QString("signDeduct")].isNull() && m_sign_deduct_isValid;

    m_sign_iap_deduct_isValid = ::MelodixAPI::fromJsonValue(m_sign_iap_deduct, json[QString("signIapDeduct")]);
    m_sign_iap_deduct_isSet = !json[QString("signIapDeduct")].isNull() && m_sign_iap_deduct_isValid;

    m_sign_isValid = ::MelodixAPI::fromJsonValue(m_sign, json[QString("sign")]);
    m_sign_isSet = !json[QString("sign")].isNull() && m_sign_isValid;
}

QString MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_vip_code_isSet) {
        obj.insert(QString("vipCode"), ::MelodixAPI::toJsonValue(m_vip_code));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::MelodixAPI::toJsonValue(m_expire_time));
    }
    if (m_vip_level_isSet) {
        obj.insert(QString("vipLevel"), ::MelodixAPI::toJsonValue(m_vip_level));
    }
    if (m_sign_iap_isSet) {
        obj.insert(QString("signIap"), ::MelodixAPI::toJsonValue(m_sign_iap));
    }
    if (m_sign_deduct_isSet) {
        obj.insert(QString("signDeduct"), ::MelodixAPI::toJsonValue(m_sign_deduct));
    }
    if (m_sign_iap_deduct_isSet) {
        obj.insert(QString("signIapDeduct"), ::MelodixAPI::toJsonValue(m_sign_iap_deduct));
    }
    if (m_sign_isSet) {
        obj.insert(QString("sign"), ::MelodixAPI::toJsonValue(m_sign));
    }
    return obj;
}

qint32 MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::getVipCode() const {
    return m_vip_code;
}
void MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::setVipCode(const qint32 &vip_code) {
    m_vip_code = vip_code;
    m_vip_code_isSet = true;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_vip_code_Set() const{
    return m_vip_code_isSet;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_vip_code_Valid() const{
    return m_vip_code_isValid;
}

qint32 MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::getExpireTime() const {
    return m_expire_time;
}
void MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::setExpireTime(const qint32 &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

qint32 MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::getVipLevel() const {
    return m_vip_level;
}
void MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::setVipLevel(const qint32 &vip_level) {
    m_vip_level = vip_level;
    m_vip_level_isSet = true;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_vip_level_Set() const{
    return m_vip_level_isSet;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_vip_level_Valid() const{
    return m_vip_level_isValid;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::isSignIap() const {
    return m_sign_iap;
}
void MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::setSignIap(const bool &sign_iap) {
    m_sign_iap = sign_iap;
    m_sign_iap_isSet = true;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_sign_iap_Set() const{
    return m_sign_iap_isSet;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_sign_iap_Valid() const{
    return m_sign_iap_isValid;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::isSignDeduct() const {
    return m_sign_deduct;
}
void MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::setSignDeduct(const bool &sign_deduct) {
    m_sign_deduct = sign_deduct;
    m_sign_deduct_isSet = true;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_sign_deduct_Set() const{
    return m_sign_deduct_isSet;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_sign_deduct_Valid() const{
    return m_sign_deduct_isValid;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::isSignIapDeduct() const {
    return m_sign_iap_deduct;
}
void MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::setSignIapDeduct(const bool &sign_iap_deduct) {
    m_sign_iap_deduct = sign_iap_deduct;
    m_sign_iap_deduct_isSet = true;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_sign_iap_deduct_Set() const{
    return m_sign_iap_deduct_isSet;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_sign_iap_deduct_Valid() const{
    return m_sign_iap_deduct_isValid;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::isSign() const {
    return m_sign;
}
void MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::setSign(const bool &sign) {
    m_sign = sign;
    m_sign_isSet = true;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_sign_Set() const{
    return m_sign_isSet;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::is_sign_Valid() const{
    return m_sign_isValid;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vip_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vip_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_iap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_deduct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_iap_deduct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetArtistDetail_200_response_data_vipRights_rightsInfoDetailDtoList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vip_code_isValid && m_expire_time_isValid && m_vip_level_isValid && m_sign_iap_isValid && m_sign_deduct_isValid && m_sign_iap_deduct_isValid && m_sign_isValid && true;
}

} // namespace MelodixAPI
