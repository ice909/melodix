/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetTopPlaylist_200_response_playlists_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetTopPlaylist_200_response_playlists_inner::MDGetTopPlaylist_200_response_playlists_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetTopPlaylist_200_response_playlists_inner::MDGetTopPlaylist_200_response_playlists_inner() {
    this->initializeModel();
}

MDGetTopPlaylist_200_response_playlists_inner::~MDGetTopPlaylist_200_response_playlists_inner() {}

void MDGetTopPlaylist_200_response_playlists_inner::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_track_count_isSet = false;
    m_track_count_isValid = false;

    m_cover_img_url_isSet = false;
    m_cover_img_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_play_count_isSet = false;
    m_play_count_isValid = false;

    m_track_update_time_isSet = false;
    m_track_update_time_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;
}

void MDGetTopPlaylist_200_response_playlists_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetTopPlaylist_200_response_playlists_inner::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::MelodixAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_create_time_isValid = ::MelodixAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_update_time_isValid = ::MelodixAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_track_count_isValid = ::MelodixAPI::fromJsonValue(m_track_count, json[QString("trackCount")]);
    m_track_count_isSet = !json[QString("trackCount")].isNull() && m_track_count_isValid;

    m_cover_img_url_isValid = ::MelodixAPI::fromJsonValue(m_cover_img_url, json[QString("coverImgUrl")]);
    m_cover_img_url_isSet = !json[QString("coverImgUrl")].isNull() && m_cover_img_url_isValid;

    m_description_isValid = ::MelodixAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_play_count_isValid = ::MelodixAPI::fromJsonValue(m_play_count, json[QString("playCount")]);
    m_play_count_isSet = !json[QString("playCount")].isNull() && m_play_count_isValid;

    m_track_update_time_isValid = ::MelodixAPI::fromJsonValue(m_track_update_time, json[QString("trackUpdateTime")]);
    m_track_update_time_isSet = !json[QString("trackUpdateTime")].isNull() && m_track_update_time_isValid;

    m_creator_isValid = ::MelodixAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;
}

QString MDGetTopPlaylist_200_response_playlists_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetTopPlaylist_200_response_playlists_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::MelodixAPI::toJsonValue(m_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::MelodixAPI::toJsonValue(m_create_time));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::MelodixAPI::toJsonValue(m_update_time));
    }
    if (m_track_count_isSet) {
        obj.insert(QString("trackCount"), ::MelodixAPI::toJsonValue(m_track_count));
    }
    if (m_cover_img_url_isSet) {
        obj.insert(QString("coverImgUrl"), ::MelodixAPI::toJsonValue(m_cover_img_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::MelodixAPI::toJsonValue(m_description));
    }
    if (m_play_count_isSet) {
        obj.insert(QString("playCount"), ::MelodixAPI::toJsonValue(m_play_count));
    }
    if (m_track_update_time_isSet) {
        obj.insert(QString("trackUpdateTime"), ::MelodixAPI::toJsonValue(m_track_update_time));
    }
    if (m_creator.isSet()) {
        obj.insert(QString("creator"), ::MelodixAPI::toJsonValue(m_creator));
    }
    return obj;
}

QString MDGetTopPlaylist_200_response_playlists_inner::getName() const {
    return m_name;
}
void MDGetTopPlaylist_200_response_playlists_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_name_Set() const{
    return m_name_isSet;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_name_Valid() const{
    return m_name_isValid;
}

double MDGetTopPlaylist_200_response_playlists_inner::getId() const {
    return m_id;
}
void MDGetTopPlaylist_200_response_playlists_inner::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_id_Valid() const{
    return m_id_isValid;
}

qint32 MDGetTopPlaylist_200_response_playlists_inner::getCreateTime() const {
    return m_create_time;
}
void MDGetTopPlaylist_200_response_playlists_inner::setCreateTime(const qint32 &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_create_time_Valid() const{
    return m_create_time_isValid;
}

qint32 MDGetTopPlaylist_200_response_playlists_inner::getUpdateTime() const {
    return m_update_time;
}
void MDGetTopPlaylist_200_response_playlists_inner::setUpdateTime(const qint32 &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_update_time_Valid() const{
    return m_update_time_isValid;
}

qint32 MDGetTopPlaylist_200_response_playlists_inner::getTrackCount() const {
    return m_track_count;
}
void MDGetTopPlaylist_200_response_playlists_inner::setTrackCount(const qint32 &track_count) {
    m_track_count = track_count;
    m_track_count_isSet = true;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_track_count_Set() const{
    return m_track_count_isSet;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_track_count_Valid() const{
    return m_track_count_isValid;
}

QString MDGetTopPlaylist_200_response_playlists_inner::getCoverImgUrl() const {
    return m_cover_img_url;
}
void MDGetTopPlaylist_200_response_playlists_inner::setCoverImgUrl(const QString &cover_img_url) {
    m_cover_img_url = cover_img_url;
    m_cover_img_url_isSet = true;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_cover_img_url_Set() const{
    return m_cover_img_url_isSet;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_cover_img_url_Valid() const{
    return m_cover_img_url_isValid;
}

QString MDGetTopPlaylist_200_response_playlists_inner::getDescription() const {
    return m_description;
}
void MDGetTopPlaylist_200_response_playlists_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_description_Set() const{
    return m_description_isSet;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_description_Valid() const{
    return m_description_isValid;
}

qint32 MDGetTopPlaylist_200_response_playlists_inner::getPlayCount() const {
    return m_play_count;
}
void MDGetTopPlaylist_200_response_playlists_inner::setPlayCount(const qint32 &play_count) {
    m_play_count = play_count;
    m_play_count_isSet = true;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_play_count_Set() const{
    return m_play_count_isSet;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_play_count_Valid() const{
    return m_play_count_isValid;
}

qint32 MDGetTopPlaylist_200_response_playlists_inner::getTrackUpdateTime() const {
    return m_track_update_time;
}
void MDGetTopPlaylist_200_response_playlists_inner::setTrackUpdateTime(const qint32 &track_update_time) {
    m_track_update_time = track_update_time;
    m_track_update_time_isSet = true;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_track_update_time_Set() const{
    return m_track_update_time_isSet;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_track_update_time_Valid() const{
    return m_track_update_time_isValid;
}

MDGetTopPlaylist_200_response_playlists_inner_creator MDGetTopPlaylist_200_response_playlists_inner::getCreator() const {
    return m_creator;
}
void MDGetTopPlaylist_200_response_playlists_inner::setCreator(const MDGetTopPlaylist_200_response_playlists_inner_creator &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_creator_Set() const{
    return m_creator_isSet;
}

bool MDGetTopPlaylist_200_response_playlists_inner::is_creator_Valid() const{
    return m_creator_isValid;
}

bool MDGetTopPlaylist_200_response_playlists_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_img_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetTopPlaylist_200_response_playlists_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_id_isValid && m_create_time_isValid && m_update_time_isValid && m_track_count_isValid && m_cover_img_url_isValid && m_description_isValid && m_play_count_isValid && m_track_update_time_isValid && m_creator_isValid && true;
}

} // namespace MelodixAPI
