/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetRecommendedNewSongs_200_response_result_inner_song.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetRecommendedNewSongs_200_response_result_inner_song::MDGetRecommendedNewSongs_200_response_result_inner_song(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetRecommendedNewSongs_200_response_result_inner_song::MDGetRecommendedNewSongs_200_response_result_inner_song() {
    this->initializeModel();
}

MDGetRecommendedNewSongs_200_response_result_inner_song::~MDGetRecommendedNewSongs_200_response_result_inner_song() {}

void MDGetRecommendedNewSongs_200_response_result_inner_song::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_album_isSet = false;
    m_album_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;
}

void MDGetRecommendedNewSongs_200_response_result_inner_song::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetRecommendedNewSongs_200_response_result_inner_song::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::MelodixAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_artists_isValid = ::MelodixAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_album_isValid = ::MelodixAPI::fromJsonValue(m_album, json[QString("album")]);
    m_album_isSet = !json[QString("album")].isNull() && m_album_isValid;

    m_duration_isValid = ::MelodixAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetRecommendedNewSongs_200_response_result_inner_song::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::MelodixAPI::toJsonValue(m_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::MelodixAPI::toJsonValue(m_artists));
    }
    if (m_album.isSet()) {
        obj.insert(QString("album"), ::MelodixAPI::toJsonValue(m_album));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::MelodixAPI::toJsonValue(m_duration));
    }
    return obj;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song::getName() const {
    return m_name;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_name_Set() const{
    return m_name_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_name_Valid() const{
    return m_name_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getId() const {
    return m_id;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_id_Valid() const{
    return m_id_isValid;
}

QList<MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner> MDGetRecommendedNewSongs_200_response_result_inner_song::getArtists() const {
    return m_artists;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setArtists(const QList<MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_artists_Set() const{
    return m_artists_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_artists_Valid() const{
    return m_artists_isValid;
}

MDGetRecommendedNewSongs_200_response_result_inner_song_album MDGetRecommendedNewSongs_200_response_result_inner_song::getAlbum() const {
    return m_album;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setAlbum(const MDGetRecommendedNewSongs_200_response_result_inner_song_album &album) {
    m_album = album;
    m_album_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_album_Set() const{
    return m_album_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_album_Valid() const{
    return m_album_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getDuration() const {
    return m_duration;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_duration_Set() const{
    return m_duration_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_duration_Valid() const{
    return m_duration_isValid;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_album.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_id_isValid && m_artists_isValid && m_album_isValid && m_duration_isValid && true;
}

} // namespace MelodixAPI
