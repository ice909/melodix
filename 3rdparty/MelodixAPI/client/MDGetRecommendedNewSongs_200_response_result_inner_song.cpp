/**
 * MelodixAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetRecommendedNewSongs_200_response_result_inner_song.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetRecommendedNewSongs_200_response_result_inner_song::MDGetRecommendedNewSongs_200_response_result_inner_song(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetRecommendedNewSongs_200_response_result_inner_song::MDGetRecommendedNewSongs_200_response_result_inner_song() {
    this->initializeModel();
}

MDGetRecommendedNewSongs_200_response_result_inner_song::~MDGetRecommendedNewSongs_200_response_result_inner_song() {}

void MDGetRecommendedNewSongs_200_response_result_inner_song::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_fee_isSet = false;
    m_fee_isValid = false;

    m_copyright_id_isSet = false;
    m_copyright_id_isValid = false;

    m_disc_isSet = false;
    m_disc_isValid = false;

    m_no_isSet = false;
    m_no_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_album_isSet = false;
    m_album_isValid = false;

    m_starred_isSet = false;
    m_starred_isValid = false;

    m_popularity_isSet = false;
    m_popularity_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_starred_num_isSet = false;
    m_starred_num_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_played_num_isSet = false;
    m_played_num_isValid = false;

    m_day_plays_isSet = false;
    m_day_plays_isValid = false;

    m_hear_time_isSet = false;
    m_hear_time_isValid = false;

    m_sq_music_isSet = false;
    m_sq_music_isValid = false;

    m_hr_music_isSet = false;
    m_hr_music_isValid = false;

    m_ringtone_isSet = false;
    m_ringtone_isValid = false;

    m_copy_from_isSet = false;
    m_copy_from_isValid = false;

    m_comment_thread_id_isSet = false;
    m_comment_thread_id_isValid = false;

    m_ftype_isSet = false;
    m_ftype_isValid = false;

    m_rt_urls_isSet = false;
    m_rt_urls_isValid = false;

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_trans_name_isSet = false;
    m_trans_name_isValid = false;

    m_mark_isSet = false;
    m_mark_isValid = false;

    m_origin_cover_type_isSet = false;
    m_origin_cover_type_isValid = false;

    m_single_isSet = false;
    m_single_isValid = false;

    m_rtype_isSet = false;
    m_rtype_isValid = false;

    m_mvid_isSet = false;
    m_mvid_isValid = false;

    m_b_music_isSet = false;
    m_b_music_isValid = false;

    m_h_music_isSet = false;
    m_h_music_isValid = false;

    m_m_music_isSet = false;
    m_m_music_isValid = false;

    m_l_music_isSet = false;
    m_l_music_isValid = false;

    m_exclusive_isSet = false;
    m_exclusive_isValid = false;

    m_privilege_isSet = false;
    m_privilege_isValid = false;
}

void MDGetRecommendedNewSongs_200_response_result_inner_song::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetRecommendedNewSongs_200_response_result_inner_song::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::MelodixAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_id_isValid = ::MelodixAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_position_isValid = ::MelodixAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_alias_isValid = ::MelodixAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_status_isValid = ::MelodixAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_fee_isValid = ::MelodixAPI::fromJsonValue(m_fee, json[QString("fee")]);
    m_fee_isSet = !json[QString("fee")].isNull() && m_fee_isValid;

    m_copyright_id_isValid = ::MelodixAPI::fromJsonValue(m_copyright_id, json[QString("copyrightId")]);
    m_copyright_id_isSet = !json[QString("copyrightId")].isNull() && m_copyright_id_isValid;

    m_disc_isValid = ::MelodixAPI::fromJsonValue(m_disc, json[QString("disc")]);
    m_disc_isSet = !json[QString("disc")].isNull() && m_disc_isValid;

    m_no_isValid = ::MelodixAPI::fromJsonValue(m_no, json[QString("no")]);
    m_no_isSet = !json[QString("no")].isNull() && m_no_isValid;

    m_artists_isValid = ::MelodixAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_album_isValid = ::MelodixAPI::fromJsonValue(m_album, json[QString("album")]);
    m_album_isSet = !json[QString("album")].isNull() && m_album_isValid;

    m_starred_isValid = ::MelodixAPI::fromJsonValue(m_starred, json[QString("starred")]);
    m_starred_isSet = !json[QString("starred")].isNull() && m_starred_isValid;

    m_popularity_isValid = ::MelodixAPI::fromJsonValue(m_popularity, json[QString("popularity")]);
    m_popularity_isSet = !json[QString("popularity")].isNull() && m_popularity_isValid;

    m_score_isValid = ::MelodixAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_starred_num_isValid = ::MelodixAPI::fromJsonValue(m_starred_num, json[QString("starredNum")]);
    m_starred_num_isSet = !json[QString("starredNum")].isNull() && m_starred_num_isValid;

    m_duration_isValid = ::MelodixAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_played_num_isValid = ::MelodixAPI::fromJsonValue(m_played_num, json[QString("playedNum")]);
    m_played_num_isSet = !json[QString("playedNum")].isNull() && m_played_num_isValid;

    m_day_plays_isValid = ::MelodixAPI::fromJsonValue(m_day_plays, json[QString("dayPlays")]);
    m_day_plays_isSet = !json[QString("dayPlays")].isNull() && m_day_plays_isValid;

    m_hear_time_isValid = ::MelodixAPI::fromJsonValue(m_hear_time, json[QString("hearTime")]);
    m_hear_time_isSet = !json[QString("hearTime")].isNull() && m_hear_time_isValid;

    m_sq_music_isValid = ::MelodixAPI::fromJsonValue(m_sq_music, json[QString("sqMusic")]);
    m_sq_music_isSet = !json[QString("sqMusic")].isNull() && m_sq_music_isValid;

    m_hr_music_isValid = ::MelodixAPI::fromJsonValue(m_hr_music, json[QString("hrMusic")]);
    m_hr_music_isSet = !json[QString("hrMusic")].isNull() && m_hr_music_isValid;

    m_ringtone_isValid = ::MelodixAPI::fromJsonValue(m_ringtone, json[QString("ringtone")]);
    m_ringtone_isSet = !json[QString("ringtone")].isNull() && m_ringtone_isValid;

    m_copy_from_isValid = ::MelodixAPI::fromJsonValue(m_copy_from, json[QString("copyFrom")]);
    m_copy_from_isSet = !json[QString("copyFrom")].isNull() && m_copy_from_isValid;

    m_comment_thread_id_isValid = ::MelodixAPI::fromJsonValue(m_comment_thread_id, json[QString("commentThreadId")]);
    m_comment_thread_id_isSet = !json[QString("commentThreadId")].isNull() && m_comment_thread_id_isValid;

    m_ftype_isValid = ::MelodixAPI::fromJsonValue(m_ftype, json[QString("ftype")]);
    m_ftype_isSet = !json[QString("ftype")].isNull() && m_ftype_isValid;

    m_rt_urls_isValid = ::MelodixAPI::fromJsonValue(m_rt_urls, json[QString("rtUrls")]);
    m_rt_urls_isSet = !json[QString("rtUrls")].isNull() && m_rt_urls_isValid;

    m_copyright_isValid = ::MelodixAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_trans_name_isValid = ::MelodixAPI::fromJsonValue(m_trans_name, json[QString("transName")]);
    m_trans_name_isSet = !json[QString("transName")].isNull() && m_trans_name_isValid;

    m_mark_isValid = ::MelodixAPI::fromJsonValue(m_mark, json[QString("mark")]);
    m_mark_isSet = !json[QString("mark")].isNull() && m_mark_isValid;

    m_origin_cover_type_isValid = ::MelodixAPI::fromJsonValue(m_origin_cover_type, json[QString("originCoverType")]);
    m_origin_cover_type_isSet = !json[QString("originCoverType")].isNull() && m_origin_cover_type_isValid;

    m_single_isValid = ::MelodixAPI::fromJsonValue(m_single, json[QString("single")]);
    m_single_isSet = !json[QString("single")].isNull() && m_single_isValid;

    m_rtype_isValid = ::MelodixAPI::fromJsonValue(m_rtype, json[QString("rtype")]);
    m_rtype_isSet = !json[QString("rtype")].isNull() && m_rtype_isValid;

    m_mvid_isValid = ::MelodixAPI::fromJsonValue(m_mvid, json[QString("mvid")]);
    m_mvid_isSet = !json[QString("mvid")].isNull() && m_mvid_isValid;

    m_b_music_isValid = ::MelodixAPI::fromJsonValue(m_b_music, json[QString("bMusic")]);
    m_b_music_isSet = !json[QString("bMusic")].isNull() && m_b_music_isValid;

    m_h_music_isValid = ::MelodixAPI::fromJsonValue(m_h_music, json[QString("hMusic")]);
    m_h_music_isSet = !json[QString("hMusic")].isNull() && m_h_music_isValid;

    m_m_music_isValid = ::MelodixAPI::fromJsonValue(m_m_music, json[QString("mMusic")]);
    m_m_music_isSet = !json[QString("mMusic")].isNull() && m_m_music_isValid;

    m_l_music_isValid = ::MelodixAPI::fromJsonValue(m_l_music, json[QString("lMusic")]);
    m_l_music_isSet = !json[QString("lMusic")].isNull() && m_l_music_isValid;

    m_exclusive_isValid = ::MelodixAPI::fromJsonValue(m_exclusive, json[QString("exclusive")]);
    m_exclusive_isSet = !json[QString("exclusive")].isNull() && m_exclusive_isValid;

    m_privilege_isValid = ::MelodixAPI::fromJsonValue(m_privilege, json[QString("privilege")]);
    m_privilege_isSet = !json[QString("privilege")].isNull() && m_privilege_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetRecommendedNewSongs_200_response_result_inner_song::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::MelodixAPI::toJsonValue(m_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::MelodixAPI::toJsonValue(m_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::MelodixAPI::toJsonValue(m_position));
    }
    if (m_alias.size() > 0) {
        obj.insert(QString("alias"), ::MelodixAPI::toJsonValue(m_alias));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::MelodixAPI::toJsonValue(m_status));
    }
    if (m_fee_isSet) {
        obj.insert(QString("fee"), ::MelodixAPI::toJsonValue(m_fee));
    }
    if (m_copyright_id_isSet) {
        obj.insert(QString("copyrightId"), ::MelodixAPI::toJsonValue(m_copyright_id));
    }
    if (m_disc_isSet) {
        obj.insert(QString("disc"), ::MelodixAPI::toJsonValue(m_disc));
    }
    if (m_no_isSet) {
        obj.insert(QString("no"), ::MelodixAPI::toJsonValue(m_no));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::MelodixAPI::toJsonValue(m_artists));
    }
    if (m_album.isSet()) {
        obj.insert(QString("album"), ::MelodixAPI::toJsonValue(m_album));
    }
    if (m_starred_isSet) {
        obj.insert(QString("starred"), ::MelodixAPI::toJsonValue(m_starred));
    }
    if (m_popularity_isSet) {
        obj.insert(QString("popularity"), ::MelodixAPI::toJsonValue(m_popularity));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::MelodixAPI::toJsonValue(m_score));
    }
    if (m_starred_num_isSet) {
        obj.insert(QString("starredNum"), ::MelodixAPI::toJsonValue(m_starred_num));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::MelodixAPI::toJsonValue(m_duration));
    }
    if (m_played_num_isSet) {
        obj.insert(QString("playedNum"), ::MelodixAPI::toJsonValue(m_played_num));
    }
    if (m_day_plays_isSet) {
        obj.insert(QString("dayPlays"), ::MelodixAPI::toJsonValue(m_day_plays));
    }
    if (m_hear_time_isSet) {
        obj.insert(QString("hearTime"), ::MelodixAPI::toJsonValue(m_hear_time));
    }
    if (m_sq_music.isSet()) {
        obj.insert(QString("sqMusic"), ::MelodixAPI::toJsonValue(m_sq_music));
    }
    if (m_hr_music.isSet()) {
        obj.insert(QString("hrMusic"), ::MelodixAPI::toJsonValue(m_hr_music));
    }
    if (m_ringtone_isSet) {
        obj.insert(QString("ringtone"), ::MelodixAPI::toJsonValue(m_ringtone));
    }
    if (m_copy_from_isSet) {
        obj.insert(QString("copyFrom"), ::MelodixAPI::toJsonValue(m_copy_from));
    }
    if (m_comment_thread_id_isSet) {
        obj.insert(QString("commentThreadId"), ::MelodixAPI::toJsonValue(m_comment_thread_id));
    }
    if (m_ftype_isSet) {
        obj.insert(QString("ftype"), ::MelodixAPI::toJsonValue(m_ftype));
    }
    if (m_rt_urls.size() > 0) {
        obj.insert(QString("rtUrls"), ::MelodixAPI::toJsonValue(m_rt_urls));
    }
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::MelodixAPI::toJsonValue(m_copyright));
    }
    if (m_trans_name_isSet) {
        obj.insert(QString("transName"), ::MelodixAPI::toJsonValue(m_trans_name));
    }
    if (m_mark_isSet) {
        obj.insert(QString("mark"), ::MelodixAPI::toJsonValue(m_mark));
    }
    if (m_origin_cover_type_isSet) {
        obj.insert(QString("originCoverType"), ::MelodixAPI::toJsonValue(m_origin_cover_type));
    }
    if (m_single_isSet) {
        obj.insert(QString("single"), ::MelodixAPI::toJsonValue(m_single));
    }
    if (m_rtype_isSet) {
        obj.insert(QString("rtype"), ::MelodixAPI::toJsonValue(m_rtype));
    }
    if (m_mvid_isSet) {
        obj.insert(QString("mvid"), ::MelodixAPI::toJsonValue(m_mvid));
    }
    if (m_b_music.isSet()) {
        obj.insert(QString("bMusic"), ::MelodixAPI::toJsonValue(m_b_music));
    }
    if (m_h_music.isSet()) {
        obj.insert(QString("hMusic"), ::MelodixAPI::toJsonValue(m_h_music));
    }
    if (m_m_music.isSet()) {
        obj.insert(QString("mMusic"), ::MelodixAPI::toJsonValue(m_m_music));
    }
    if (m_l_music.isSet()) {
        obj.insert(QString("lMusic"), ::MelodixAPI::toJsonValue(m_l_music));
    }
    if (m_exclusive_isSet) {
        obj.insert(QString("exclusive"), ::MelodixAPI::toJsonValue(m_exclusive));
    }
    if (m_privilege.isSet()) {
        obj.insert(QString("privilege"), ::MelodixAPI::toJsonValue(m_privilege));
    }
    return obj;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song::getName() const {
    return m_name;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_name_Set() const{
    return m_name_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_name_Valid() const{
    return m_name_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getId() const {
    return m_id;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_id_Set() const{
    return m_id_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_id_Valid() const{
    return m_id_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getPosition() const {
    return m_position;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_position_Set() const{
    return m_position_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_position_Valid() const{
    return m_position_isValid;
}

QList<QString> MDGetRecommendedNewSongs_200_response_result_inner_song::getAlias() const {
    return m_alias;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setAlias(const QList<QString> &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_alias_Set() const{
    return m_alias_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_alias_Valid() const{
    return m_alias_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getStatus() const {
    return m_status;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_status_Set() const{
    return m_status_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_status_Valid() const{
    return m_status_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getFee() const {
    return m_fee;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setFee(const qint32 &fee) {
    m_fee = fee;
    m_fee_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_fee_Set() const{
    return m_fee_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_fee_Valid() const{
    return m_fee_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getCopyrightId() const {
    return m_copyright_id;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setCopyrightId(const qint32 &copyright_id) {
    m_copyright_id = copyright_id;
    m_copyright_id_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_copyright_id_Set() const{
    return m_copyright_id_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_copyright_id_Valid() const{
    return m_copyright_id_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song::getDisc() const {
    return m_disc;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setDisc(const QString &disc) {
    m_disc = disc;
    m_disc_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_disc_Set() const{
    return m_disc_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_disc_Valid() const{
    return m_disc_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getNo() const {
    return m_no;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setNo(const qint32 &no) {
    m_no = no;
    m_no_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_no_Set() const{
    return m_no_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_no_Valid() const{
    return m_no_isValid;
}

QList<MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner> MDGetRecommendedNewSongs_200_response_result_inner_song::getArtists() const {
    return m_artists;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setArtists(const QList<MDGetRecommendedNewSongs_200_response_result_inner_song_artists_inner> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_artists_Set() const{
    return m_artists_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_artists_Valid() const{
    return m_artists_isValid;
}

MDGetRecommendedNewSongs_200_response_result_inner_song_album MDGetRecommendedNewSongs_200_response_result_inner_song::getAlbum() const {
    return m_album;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setAlbum(const MDGetRecommendedNewSongs_200_response_result_inner_song_album &album) {
    m_album = album;
    m_album_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_album_Set() const{
    return m_album_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_album_Valid() const{
    return m_album_isValid;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::isStarred() const {
    return m_starred;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setStarred(const bool &starred) {
    m_starred = starred;
    m_starred_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_starred_Set() const{
    return m_starred_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_starred_Valid() const{
    return m_starred_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getPopularity() const {
    return m_popularity;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setPopularity(const qint32 &popularity) {
    m_popularity = popularity;
    m_popularity_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_popularity_Set() const{
    return m_popularity_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_popularity_Valid() const{
    return m_popularity_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getScore() const {
    return m_score;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_score_Set() const{
    return m_score_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_score_Valid() const{
    return m_score_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getStarredNum() const {
    return m_starred_num;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setStarredNum(const qint32 &starred_num) {
    m_starred_num = starred_num;
    m_starred_num_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_starred_num_Set() const{
    return m_starred_num_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_starred_num_Valid() const{
    return m_starred_num_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getDuration() const {
    return m_duration;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_duration_Set() const{
    return m_duration_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getPlayedNum() const {
    return m_played_num;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setPlayedNum(const qint32 &played_num) {
    m_played_num = played_num;
    m_played_num_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_played_num_Set() const{
    return m_played_num_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_played_num_Valid() const{
    return m_played_num_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getDayPlays() const {
    return m_day_plays;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setDayPlays(const qint32 &day_plays) {
    m_day_plays = day_plays;
    m_day_plays_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_day_plays_Set() const{
    return m_day_plays_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_day_plays_Valid() const{
    return m_day_plays_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getHearTime() const {
    return m_hear_time;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setHearTime(const qint32 &hear_time) {
    m_hear_time = hear_time;
    m_hear_time_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_hear_time_Set() const{
    return m_hear_time_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_hear_time_Valid() const{
    return m_hear_time_isValid;
}

MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic MDGetRecommendedNewSongs_200_response_result_inner_song::getSqMusic() const {
    return m_sq_music;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setSqMusic(const MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic &sq_music) {
    m_sq_music = sq_music;
    m_sq_music_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_sq_music_Set() const{
    return m_sq_music_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_sq_music_Valid() const{
    return m_sq_music_isValid;
}

MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic MDGetRecommendedNewSongs_200_response_result_inner_song::getHrMusic() const {
    return m_hr_music;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setHrMusic(const MDGetRecommendedNewSongs_200_response_result_inner_song_sqMusic &hr_music) {
    m_hr_music = hr_music;
    m_hr_music_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_hr_music_Set() const{
    return m_hr_music_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_hr_music_Valid() const{
    return m_hr_music_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song::getRingtone() const {
    return m_ringtone;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setRingtone(const QString &ringtone) {
    m_ringtone = ringtone;
    m_ringtone_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_ringtone_Set() const{
    return m_ringtone_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_ringtone_Valid() const{
    return m_ringtone_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song::getCopyFrom() const {
    return m_copy_from;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setCopyFrom(const QString &copy_from) {
    m_copy_from = copy_from;
    m_copy_from_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_copy_from_Set() const{
    return m_copy_from_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_copy_from_Valid() const{
    return m_copy_from_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song::getCommentThreadId() const {
    return m_comment_thread_id;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setCommentThreadId(const QString &comment_thread_id) {
    m_comment_thread_id = comment_thread_id;
    m_comment_thread_id_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_comment_thread_id_Set() const{
    return m_comment_thread_id_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_comment_thread_id_Valid() const{
    return m_comment_thread_id_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getFtype() const {
    return m_ftype;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setFtype(const qint32 &ftype) {
    m_ftype = ftype;
    m_ftype_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_ftype_Set() const{
    return m_ftype_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_ftype_Valid() const{
    return m_ftype_isValid;
}

QList<QString> MDGetRecommendedNewSongs_200_response_result_inner_song::getRtUrls() const {
    return m_rt_urls;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setRtUrls(const QList<QString> &rt_urls) {
    m_rt_urls = rt_urls;
    m_rt_urls_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_rt_urls_Set() const{
    return m_rt_urls_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_rt_urls_Valid() const{
    return m_rt_urls_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getCopyright() const {
    return m_copyright;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setCopyright(const qint32 &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_copyright_Valid() const{
    return m_copyright_isValid;
}

QString MDGetRecommendedNewSongs_200_response_result_inner_song::getTransName() const {
    return m_trans_name;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setTransName(const QString &trans_name) {
    m_trans_name = trans_name;
    m_trans_name_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_trans_name_Set() const{
    return m_trans_name_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_trans_name_Valid() const{
    return m_trans_name_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getMark() const {
    return m_mark;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setMark(const qint32 &mark) {
    m_mark = mark;
    m_mark_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_mark_Set() const{
    return m_mark_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_mark_Valid() const{
    return m_mark_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getOriginCoverType() const {
    return m_origin_cover_type;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setOriginCoverType(const qint32 &origin_cover_type) {
    m_origin_cover_type = origin_cover_type;
    m_origin_cover_type_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_origin_cover_type_Set() const{
    return m_origin_cover_type_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_origin_cover_type_Valid() const{
    return m_origin_cover_type_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getSingle() const {
    return m_single;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setSingle(const qint32 &single) {
    m_single = single;
    m_single_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_single_Set() const{
    return m_single_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_single_Valid() const{
    return m_single_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getRtype() const {
    return m_rtype;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setRtype(const qint32 &rtype) {
    m_rtype = rtype;
    m_rtype_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_rtype_Set() const{
    return m_rtype_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_rtype_Valid() const{
    return m_rtype_isValid;
}

qint32 MDGetRecommendedNewSongs_200_response_result_inner_song::getMvid() const {
    return m_mvid;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setMvid(const qint32 &mvid) {
    m_mvid = mvid;
    m_mvid_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_mvid_Set() const{
    return m_mvid_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_mvid_Valid() const{
    return m_mvid_isValid;
}

MDGetRecommendedNewSongs_200_response_result_inner_song_bMusic MDGetRecommendedNewSongs_200_response_result_inner_song::getBMusic() const {
    return m_b_music;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setBMusic(const MDGetRecommendedNewSongs_200_response_result_inner_song_bMusic &b_music) {
    m_b_music = b_music;
    m_b_music_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_b_music_Set() const{
    return m_b_music_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_b_music_Valid() const{
    return m_b_music_isValid;
}

MDGetRecommendedNewSongs_200_response_result_inner_song_bMusic MDGetRecommendedNewSongs_200_response_result_inner_song::getHMusic() const {
    return m_h_music;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setHMusic(const MDGetRecommendedNewSongs_200_response_result_inner_song_bMusic &h_music) {
    m_h_music = h_music;
    m_h_music_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_h_music_Set() const{
    return m_h_music_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_h_music_Valid() const{
    return m_h_music_isValid;
}

MDGetRecommendedNewSongs_200_response_result_inner_song_bMusic MDGetRecommendedNewSongs_200_response_result_inner_song::getMMusic() const {
    return m_m_music;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setMMusic(const MDGetRecommendedNewSongs_200_response_result_inner_song_bMusic &m_music) {
    m_m_music = m_music;
    m_m_music_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_m_music_Set() const{
    return m_m_music_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_m_music_Valid() const{
    return m_m_music_isValid;
}

MDGetRecommendedNewSongs_200_response_result_inner_song_bMusic MDGetRecommendedNewSongs_200_response_result_inner_song::getLMusic() const {
    return m_l_music;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setLMusic(const MDGetRecommendedNewSongs_200_response_result_inner_song_bMusic &l_music) {
    m_l_music = l_music;
    m_l_music_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_l_music_Set() const{
    return m_l_music_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_l_music_Valid() const{
    return m_l_music_isValid;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::isExclusive() const {
    return m_exclusive;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setExclusive(const bool &exclusive) {
    m_exclusive = exclusive;
    m_exclusive_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_exclusive_Set() const{
    return m_exclusive_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_exclusive_Valid() const{
    return m_exclusive_isValid;
}

MDGetArtistSingle_200_response_hotSongs_inner_privilege MDGetRecommendedNewSongs_200_response_result_inner_song::getPrivilege() const {
    return m_privilege;
}
void MDGetRecommendedNewSongs_200_response_result_inner_song::setPrivilege(const MDGetArtistSingle_200_response_hotSongs_inner_privilege &privilege) {
    m_privilege = privilege;
    m_privilege_isSet = true;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_privilege_Set() const{
    return m_privilege_isSet;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::is_privilege_Valid() const{
    return m_privilege_isValid;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_album.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_starred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_popularity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starred_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_played_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_plays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hear_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sq_music.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hr_music.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ringtone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_thread_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ftype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rt_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trans_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_cover_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mvid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_music.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_h_music.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_m_music.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_l_music.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privilege.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetRecommendedNewSongs_200_response_result_inner_song::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_id_isValid && m_position_isValid && m_alias_isValid && m_status_isValid && m_fee_isValid && m_copyright_id_isValid && m_disc_isValid && m_no_isValid && m_artists_isValid && m_album_isValid && m_starred_isValid && m_popularity_isValid && m_score_isValid && m_starred_num_isValid && m_duration_isValid && m_played_num_isValid && m_day_plays_isValid && m_hear_time_isValid && m_sq_music_isValid && m_hr_music_isValid && m_ringtone_isValid && m_copy_from_isValid && m_comment_thread_id_isValid && m_ftype_isValid && m_rt_urls_isValid && m_copyright_isValid && m_trans_name_isValid && m_mark_isValid && m_origin_cover_type_isValid && m_single_isValid && m_rtype_isValid && m_mvid_isValid && m_b_music_isValid && m_h_music_isValid && m_m_music_isValid && m_l_music_isValid && m_exclusive_isValid && m_privilege_isValid && true;
}

} // namespace MelodixAPI
