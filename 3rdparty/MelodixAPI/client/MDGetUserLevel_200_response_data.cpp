/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserLevel_200_response_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserLevel_200_response_data::MDGetUserLevel_200_response_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserLevel_200_response_data::MDGetUserLevel_200_response_data() {
    this->initializeModel();
}

MDGetUserLevel_200_response_data::~MDGetUserLevel_200_response_data() {}

void MDGetUserLevel_200_response_data::initializeModel() {

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_next_play_count_isSet = false;
    m_next_play_count_isValid = false;

    m_next_login_count_isSet = false;
    m_next_login_count_isValid = false;

    m_now_play_count_isSet = false;
    m_now_play_count_isValid = false;

    m_now_login_count_isSet = false;
    m_now_login_count_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;
}

void MDGetUserLevel_200_response_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserLevel_200_response_data::fromJsonObject(QJsonObject json) {

    m_user_id_isValid = ::MelodixAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_info_isValid = ::MelodixAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_progress_isValid = ::MelodixAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_next_play_count_isValid = ::MelodixAPI::fromJsonValue(m_next_play_count, json[QString("nextPlayCount")]);
    m_next_play_count_isSet = !json[QString("nextPlayCount")].isNull() && m_next_play_count_isValid;

    m_next_login_count_isValid = ::MelodixAPI::fromJsonValue(m_next_login_count, json[QString("nextLoginCount")]);
    m_next_login_count_isSet = !json[QString("nextLoginCount")].isNull() && m_next_login_count_isValid;

    m_now_play_count_isValid = ::MelodixAPI::fromJsonValue(m_now_play_count, json[QString("nowPlayCount")]);
    m_now_play_count_isSet = !json[QString("nowPlayCount")].isNull() && m_now_play_count_isValid;

    m_now_login_count_isValid = ::MelodixAPI::fromJsonValue(m_now_login_count, json[QString("nowLoginCount")]);
    m_now_login_count_isSet = !json[QString("nowLoginCount")].isNull() && m_now_login_count_isValid;

    m_level_isValid = ::MelodixAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;
}

QString MDGetUserLevel_200_response_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserLevel_200_response_data::asJsonObject() const {
    QJsonObject obj;
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::MelodixAPI::toJsonValue(m_user_id));
    }
    if (m_info_isSet) {
        obj.insert(QString("info"), ::MelodixAPI::toJsonValue(m_info));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::MelodixAPI::toJsonValue(m_progress));
    }
    if (m_next_play_count_isSet) {
        obj.insert(QString("nextPlayCount"), ::MelodixAPI::toJsonValue(m_next_play_count));
    }
    if (m_next_login_count_isSet) {
        obj.insert(QString("nextLoginCount"), ::MelodixAPI::toJsonValue(m_next_login_count));
    }
    if (m_now_play_count_isSet) {
        obj.insert(QString("nowPlayCount"), ::MelodixAPI::toJsonValue(m_now_play_count));
    }
    if (m_now_login_count_isSet) {
        obj.insert(QString("nowLoginCount"), ::MelodixAPI::toJsonValue(m_now_login_count));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::MelodixAPI::toJsonValue(m_level));
    }
    return obj;
}

qint32 MDGetUserLevel_200_response_data::getUserId() const {
    return m_user_id;
}
void MDGetUserLevel_200_response_data::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool MDGetUserLevel_200_response_data::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool MDGetUserLevel_200_response_data::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString MDGetUserLevel_200_response_data::getInfo() const {
    return m_info;
}
void MDGetUserLevel_200_response_data::setInfo(const QString &info) {
    m_info = info;
    m_info_isSet = true;
}

bool MDGetUserLevel_200_response_data::is_info_Set() const{
    return m_info_isSet;
}

bool MDGetUserLevel_200_response_data::is_info_Valid() const{
    return m_info_isValid;
}

qint32 MDGetUserLevel_200_response_data::getProgress() const {
    return m_progress;
}
void MDGetUserLevel_200_response_data::setProgress(const qint32 &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool MDGetUserLevel_200_response_data::is_progress_Set() const{
    return m_progress_isSet;
}

bool MDGetUserLevel_200_response_data::is_progress_Valid() const{
    return m_progress_isValid;
}

qint32 MDGetUserLevel_200_response_data::getNextPlayCount() const {
    return m_next_play_count;
}
void MDGetUserLevel_200_response_data::setNextPlayCount(const qint32 &next_play_count) {
    m_next_play_count = next_play_count;
    m_next_play_count_isSet = true;
}

bool MDGetUserLevel_200_response_data::is_next_play_count_Set() const{
    return m_next_play_count_isSet;
}

bool MDGetUserLevel_200_response_data::is_next_play_count_Valid() const{
    return m_next_play_count_isValid;
}

qint32 MDGetUserLevel_200_response_data::getNextLoginCount() const {
    return m_next_login_count;
}
void MDGetUserLevel_200_response_data::setNextLoginCount(const qint32 &next_login_count) {
    m_next_login_count = next_login_count;
    m_next_login_count_isSet = true;
}

bool MDGetUserLevel_200_response_data::is_next_login_count_Set() const{
    return m_next_login_count_isSet;
}

bool MDGetUserLevel_200_response_data::is_next_login_count_Valid() const{
    return m_next_login_count_isValid;
}

qint32 MDGetUserLevel_200_response_data::getNowPlayCount() const {
    return m_now_play_count;
}
void MDGetUserLevel_200_response_data::setNowPlayCount(const qint32 &now_play_count) {
    m_now_play_count = now_play_count;
    m_now_play_count_isSet = true;
}

bool MDGetUserLevel_200_response_data::is_now_play_count_Set() const{
    return m_now_play_count_isSet;
}

bool MDGetUserLevel_200_response_data::is_now_play_count_Valid() const{
    return m_now_play_count_isValid;
}

qint32 MDGetUserLevel_200_response_data::getNowLoginCount() const {
    return m_now_login_count;
}
void MDGetUserLevel_200_response_data::setNowLoginCount(const qint32 &now_login_count) {
    m_now_login_count = now_login_count;
    m_now_login_count_isSet = true;
}

bool MDGetUserLevel_200_response_data::is_now_login_count_Set() const{
    return m_now_login_count_isSet;
}

bool MDGetUserLevel_200_response_data::is_now_login_count_Valid() const{
    return m_now_login_count_isValid;
}

qint32 MDGetUserLevel_200_response_data::getLevel() const {
    return m_level;
}
void MDGetUserLevel_200_response_data::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool MDGetUserLevel_200_response_data::is_level_Set() const{
    return m_level_isSet;
}

bool MDGetUserLevel_200_response_data::is_level_Valid() const{
    return m_level_isValid;
}

bool MDGetUserLevel_200_response_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_play_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_login_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_now_play_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_now_login_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserLevel_200_response_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_id_isValid && m_info_isValid && m_progress_isValid && m_next_play_count_isValid && m_next_login_count_isValid && m_now_play_count_isValid && m_now_login_count_isValid && m_level_isValid && true;
}

} // namespace MelodixAPI
