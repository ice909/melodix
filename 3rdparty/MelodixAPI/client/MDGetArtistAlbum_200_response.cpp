/**
 * MelodixAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetArtistAlbum_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetArtistAlbum_200_response::MDGetArtistAlbum_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetArtistAlbum_200_response::MDGetArtistAlbum_200_response() {
    this->initializeModel();
}

MDGetArtistAlbum_200_response::~MDGetArtistAlbum_200_response() {}

void MDGetArtistAlbum_200_response::initializeModel() {

    m_artist_isSet = false;
    m_artist_isValid = false;

    m_hot_albums_isSet = false;
    m_hot_albums_isValid = false;

    m_more_isSet = false;
    m_more_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;
}

void MDGetArtistAlbum_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetArtistAlbum_200_response::fromJsonObject(QJsonObject json) {

    m_artist_isValid = ::MelodixAPI::fromJsonValue(m_artist, json[QString("artist")]);
    m_artist_isSet = !json[QString("artist")].isNull() && m_artist_isValid;

    m_hot_albums_isValid = ::MelodixAPI::fromJsonValue(m_hot_albums, json[QString("hotAlbums")]);
    m_hot_albums_isSet = !json[QString("hotAlbums")].isNull() && m_hot_albums_isValid;

    m_more_isValid = ::MelodixAPI::fromJsonValue(m_more, json[QString("more")]);
    m_more_isSet = !json[QString("more")].isNull() && m_more_isValid;

    m_code_isValid = ::MelodixAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;
}

QString MDGetArtistAlbum_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetArtistAlbum_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_artist.isSet()) {
        obj.insert(QString("artist"), ::MelodixAPI::toJsonValue(m_artist));
    }
    if (m_hot_albums.size() > 0) {
        obj.insert(QString("hotAlbums"), ::MelodixAPI::toJsonValue(m_hot_albums));
    }
    if (m_more_isSet) {
        obj.insert(QString("more"), ::MelodixAPI::toJsonValue(m_more));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::MelodixAPI::toJsonValue(m_code));
    }
    return obj;
}

MDGetArtistAlbum_200_response_artist MDGetArtistAlbum_200_response::getArtist() const {
    return m_artist;
}
void MDGetArtistAlbum_200_response::setArtist(const MDGetArtistAlbum_200_response_artist &artist) {
    m_artist = artist;
    m_artist_isSet = true;
}

bool MDGetArtistAlbum_200_response::is_artist_Set() const{
    return m_artist_isSet;
}

bool MDGetArtistAlbum_200_response::is_artist_Valid() const{
    return m_artist_isValid;
}

QList<MDGetArtistAlbum_200_response_hotAlbums_inner> MDGetArtistAlbum_200_response::getHotAlbums() const {
    return m_hot_albums;
}
void MDGetArtistAlbum_200_response::setHotAlbums(const QList<MDGetArtistAlbum_200_response_hotAlbums_inner> &hot_albums) {
    m_hot_albums = hot_albums;
    m_hot_albums_isSet = true;
}

bool MDGetArtistAlbum_200_response::is_hot_albums_Set() const{
    return m_hot_albums_isSet;
}

bool MDGetArtistAlbum_200_response::is_hot_albums_Valid() const{
    return m_hot_albums_isValid;
}

bool MDGetArtistAlbum_200_response::isMore() const {
    return m_more;
}
void MDGetArtistAlbum_200_response::setMore(const bool &more) {
    m_more = more;
    m_more_isSet = true;
}

bool MDGetArtistAlbum_200_response::is_more_Set() const{
    return m_more_isSet;
}

bool MDGetArtistAlbum_200_response::is_more_Valid() const{
    return m_more_isValid;
}

qint32 MDGetArtistAlbum_200_response::getCode() const {
    return m_code;
}
void MDGetArtistAlbum_200_response::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool MDGetArtistAlbum_200_response::is_code_Set() const{
    return m_code_isSet;
}

bool MDGetArtistAlbum_200_response::is_code_Valid() const{
    return m_code_isValid;
}

bool MDGetArtistAlbum_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hot_albums.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetArtistAlbum_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_artist_isValid && m_hot_albums_isValid && m_more_isValid && m_code_isValid && true;
}

} // namespace MelodixAPI
