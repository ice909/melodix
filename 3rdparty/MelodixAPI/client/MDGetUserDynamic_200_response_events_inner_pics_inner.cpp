/**
 * MelodixAPI
 * Melodix API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MDGetUserDynamic_200_response_events_inner_pics_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "MDHelpers.h"

namespace MelodixAPI {

MDGetUserDynamic_200_response_events_inner_pics_inner::MDGetUserDynamic_200_response_events_inner_pics_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MDGetUserDynamic_200_response_events_inner_pics_inner::MDGetUserDynamic_200_response_events_inner_pics_inner() {
    this->initializeModel();
}

MDGetUserDynamic_200_response_events_inner_pics_inner::~MDGetUserDynamic_200_response_events_inner_pics_inner() {}

void MDGetUserDynamic_200_response_events_inner_pics_inner::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_origin_url_isSet = false;
    m_origin_url_isValid = false;

    m_square_url_isSet = false;
    m_square_url_isValid = false;

    m_rectangle_url_isSet = false;
    m_rectangle_url_isValid = false;

    m_pc_square_url_isSet = false;
    m_pc_square_url_isValid = false;

    m_pc_rectangle_url_isSet = false;
    m_pc_rectangle_url_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void MDGetUserDynamic_200_response_events_inner_pics_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MDGetUserDynamic_200_response_events_inner_pics_inner::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::MelodixAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_origin_url_isValid = ::MelodixAPI::fromJsonValue(m_origin_url, json[QString("originUrl")]);
    m_origin_url_isSet = !json[QString("originUrl")].isNull() && m_origin_url_isValid;

    m_square_url_isValid = ::MelodixAPI::fromJsonValue(m_square_url, json[QString("squareUrl")]);
    m_square_url_isSet = !json[QString("squareUrl")].isNull() && m_square_url_isValid;

    m_rectangle_url_isValid = ::MelodixAPI::fromJsonValue(m_rectangle_url, json[QString("rectangleUrl")]);
    m_rectangle_url_isSet = !json[QString("rectangleUrl")].isNull() && m_rectangle_url_isValid;

    m_pc_square_url_isValid = ::MelodixAPI::fromJsonValue(m_pc_square_url, json[QString("pcSquareUrl")]);
    m_pc_square_url_isSet = !json[QString("pcSquareUrl")].isNull() && m_pc_square_url_isValid;

    m_pc_rectangle_url_isValid = ::MelodixAPI::fromJsonValue(m_pc_rectangle_url, json[QString("pcRectangleUrl")]);
    m_pc_rectangle_url_isSet = !json[QString("pcRectangleUrl")].isNull() && m_pc_rectangle_url_isValid;

    m_format_isValid = ::MelodixAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_width_isValid = ::MelodixAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_pics_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MDGetUserDynamic_200_response_events_inner_pics_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::MelodixAPI::toJsonValue(m_height));
    }
    if (m_origin_url_isSet) {
        obj.insert(QString("originUrl"), ::MelodixAPI::toJsonValue(m_origin_url));
    }
    if (m_square_url_isSet) {
        obj.insert(QString("squareUrl"), ::MelodixAPI::toJsonValue(m_square_url));
    }
    if (m_rectangle_url_isSet) {
        obj.insert(QString("rectangleUrl"), ::MelodixAPI::toJsonValue(m_rectangle_url));
    }
    if (m_pc_square_url_isSet) {
        obj.insert(QString("pcSquareUrl"), ::MelodixAPI::toJsonValue(m_pc_square_url));
    }
    if (m_pc_rectangle_url_isSet) {
        obj.insert(QString("pcRectangleUrl"), ::MelodixAPI::toJsonValue(m_pc_rectangle_url));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::MelodixAPI::toJsonValue(m_format));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::MelodixAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 MDGetUserDynamic_200_response_events_inner_pics_inner::getHeight() const {
    return m_height;
}
void MDGetUserDynamic_200_response_events_inner_pics_inner::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_height_Set() const{
    return m_height_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_height_Valid() const{
    return m_height_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_pics_inner::getOriginUrl() const {
    return m_origin_url;
}
void MDGetUserDynamic_200_response_events_inner_pics_inner::setOriginUrl(const QString &origin_url) {
    m_origin_url = origin_url;
    m_origin_url_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_origin_url_Set() const{
    return m_origin_url_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_origin_url_Valid() const{
    return m_origin_url_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_pics_inner::getSquareUrl() const {
    return m_square_url;
}
void MDGetUserDynamic_200_response_events_inner_pics_inner::setSquareUrl(const QString &square_url) {
    m_square_url = square_url;
    m_square_url_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_square_url_Set() const{
    return m_square_url_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_square_url_Valid() const{
    return m_square_url_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_pics_inner::getRectangleUrl() const {
    return m_rectangle_url;
}
void MDGetUserDynamic_200_response_events_inner_pics_inner::setRectangleUrl(const QString &rectangle_url) {
    m_rectangle_url = rectangle_url;
    m_rectangle_url_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_rectangle_url_Set() const{
    return m_rectangle_url_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_rectangle_url_Valid() const{
    return m_rectangle_url_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_pics_inner::getPcSquareUrl() const {
    return m_pc_square_url;
}
void MDGetUserDynamic_200_response_events_inner_pics_inner::setPcSquareUrl(const QString &pc_square_url) {
    m_pc_square_url = pc_square_url;
    m_pc_square_url_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_pc_square_url_Set() const{
    return m_pc_square_url_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_pc_square_url_Valid() const{
    return m_pc_square_url_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_pics_inner::getPcRectangleUrl() const {
    return m_pc_rectangle_url;
}
void MDGetUserDynamic_200_response_events_inner_pics_inner::setPcRectangleUrl(const QString &pc_rectangle_url) {
    m_pc_rectangle_url = pc_rectangle_url;
    m_pc_rectangle_url_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_pc_rectangle_url_Set() const{
    return m_pc_rectangle_url_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_pc_rectangle_url_Valid() const{
    return m_pc_rectangle_url_isValid;
}

QString MDGetUserDynamic_200_response_events_inner_pics_inner::getFormat() const {
    return m_format;
}
void MDGetUserDynamic_200_response_events_inner_pics_inner::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_format_Set() const{
    return m_format_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_format_Valid() const{
    return m_format_isValid;
}

qint32 MDGetUserDynamic_200_response_events_inner_pics_inner::getWidth() const {
    return m_width;
}
void MDGetUserDynamic_200_response_events_inner_pics_inner::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_width_Set() const{
    return m_width_isSet;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::is_width_Valid() const{
    return m_width_isValid;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_square_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rectangle_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pc_square_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pc_rectangle_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MDGetUserDynamic_200_response_events_inner_pics_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_height_isValid && m_origin_url_isValid && m_square_url_isValid && m_rectangle_url_isValid && m_pc_square_url_isValid && m_pc_rectangle_url_isValid && m_format_isValid && m_width_isValid && true;
}

} // namespace MelodixAPI
